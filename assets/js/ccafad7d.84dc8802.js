"use strict";(self.webpackChunkall_in_one_solana=self.webpackChunkall_in_one_solana||[]).push([[4672],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,v=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return t?o.createElement(v,i(i({ref:n},m),{},{components:t})):o.createElement(v,i({ref:n},m))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},35193:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_position:89,sidebar_label:"\ud83c\udfa5 \u6253\u9020\u4e00\u4e2a\u66f4\u597d\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f",sidebar_class_name:"green"},i="\ud83c\udfa5 \u6253\u9020\u4e00\u6b3e\u4f18\u79c0\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f",l={unversionedId:"module5/anchor-on-the-front-end/build-a-better-movie-review-program/README",id:"module5/anchor-on-the-front-end/build-a-better-movie-review-program/README",title:"\ud83c\udfa5 \u6253\u9020\u4e00\u6b3e\u4f18\u79c0\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f",description:"\u8ba9\u6211\u4eec\u5f00\u59cb\u884c\u52a8\uff0c\u91ca\u653e\u6240\u6709\u7684\u9b54\u529b\u5427\uff01",source:"@site/docs/Solana-Co-Learn/module5/anchor-on-the-front-end/build-a-better-movie-review-program/README.md",sourceDirName:"module5/anchor-on-the-front-end/build-a-better-movie-review-program",slug:"/module5/anchor-on-the-front-end/build-a-better-movie-review-program/",permalink:"/Solana-Co-Learn/module5/anchor-on-the-front-end/build-a-better-movie-review-program/",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/tree/main/docs/Solana-Co-Learn/module5/anchor-on-the-front-end/build-a-better-movie-review-program/README.md",tags:[],version:"current",lastUpdatedBy:"Davirain",lastUpdatedAt:1695967092,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:89,frontMatter:{sidebar_position:89,sidebar_label:"\ud83c\udfa5 \u6253\u9020\u4e00\u4e2a\u66f4\u597d\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc39 Anchor\u5230Typescript",permalink:"/Solana-Co-Learn/module5/anchor-on-the-front-end/anchor-into-typescript/"},next:{title:"\u4e00\u4e2a\u5168\u6808\u7684Anchor\u5e94\u7528\u7a0b\u5e8f",permalink:"/Solana-Co-Learn/module5/a-full-stack-anchor-app/"}},s={},c=[{value:"\u83b7\u53d6\u8d77\u59cb\u4ee3\u7801",id:"\u83b7\u53d6\u8d77\u59cb\u4ee3\u7801",level:2},{value:"Anchor \u7684\u8bbe\u7f6e",id:"anchor-\u7684\u8bbe\u7f6e",level:2},{value:"<code>Form.tsx</code>",id:"formtsx",level:3},{value:"<code>MovieList.tsx</code>",id:"movielisttsx",level:3},{value:"ReviewDetail.tsx",id:"reviewdetailtsx",level:3},{value:"CommentList.tsx",id:"commentlisttsx",level:3}],m={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-\u6253\u9020\u4e00\u6b3e\u4f18\u79c0\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f"},"\ud83c\udfa5 \u6253\u9020\u4e00\u6b3e\u4f18\u79c0\u7684\u7535\u5f71\u8bc4\u8bba\u7a0b\u5e8f"),(0,r.kt)("p",null,"\u8ba9\u6211\u4eec\u5f00\u59cb\u884c\u52a8\uff0c\u91ca\u653e\u6240\u6709\u7684\u9b54\u529b\u5427\uff01"),(0,r.kt)("p",null,"\u6211\u4eec\u5c06\u4f1a\u5c06\u7535\u5f71\u8bc4\u8bba\u524d\u7aef\u9002\u914d\u4e3a\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"Anchor IDL"),"\u3002"),(0,r.kt)("h2",{id:"\u83b7\u53d6\u8d77\u59cb\u4ee3\u7801"},"\u83b7\u53d6\u8d77\u59cb\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/buildspace/anchor-solana-movie-review-frontend\ncd anchor-solana-movie-review-frontend\ngit checkout starter-add-tokens\nnpm i\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bf7\u6ce8\u610f\uff0c\u8d77\u59cb\u4ee3\u7801\u5728",(0,r.kt)("inlineCode",{parentName:"li"},"Anchor"),"\u8bbe\u7f6e\u5b8c\u6210\u4e4b\u524d\u662f\u65e0\u6cd5\u8fd0\u884c\u7684\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"./context/Anchor/MockWallet.ts")," \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e34\u65f6\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"AnchorWallet"),"\uff0c\u5728\u94b1\u5305\u8fde\u63a5\u4e4b\u524d\u53ef\u4ee5\u4f7f\u7528\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Keypair } from "@solana/web3.js"\n\nconst MockWallet = {\n  publicKey: Keypair.generate().publicKey,\n  signTransaction: () => Promise.reject(),\n  signAllTransactions: () => Promise.reject(),\n}\n\nexport default MockWallet\n')),(0,r.kt)("h2",{id:"anchor-\u7684\u8bbe\u7f6e"},"Anchor \u7684\u8bbe\u7f6e"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f4d\u4e8e ",(0,r.kt)("inlineCode",{parentName:"li"},"./context/Anchor/index.tsx")," \u6587\u4ef6\u4e2d\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"li"},"WorkspaceProvider")," \u7684\u4e0a\u4e0b\u6587\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"useWorkspace")," \u7684\u94a9\u5b50\u3002",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6211\u4eec\u5c06\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"useWorkspace")," \u94a9\u5b50\u6765\u8bbf\u95ee\u6211\u4eec\u7ec4\u4ef6\u4e2d\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"program")," \u5bf9\u8c61\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u8bbe\u7f6e\u3002")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createContext, useContext } from "react"\nimport {\n  Program,\n  AnchorProvider,\n  Idl,\n  setProvider,\n} from "@project-serum/anchor"\nimport { MovieReview, IDL } from "./movie_review"\nimport { Connection, PublicKey } from "@solana/web3.js"\nimport { useAnchorWallet, useConnection } from "@solana/wallet-adapter-react"\nimport MockWallet from "./MockWallet"\nconst WorkspaceContext = createContext({})\nconst programId = new PublicKey("BouTUP7a3MZLtXqMAm1NrkJSKwAjmid8abqiNjUyBJSr")\n\ninterface WorkSpace {\n  connection?: Connection\n  provider?: AnchorProvider\n  program?: Program<MovieReview>\n}\n\nconst WorkspaceProvider = ({ children }: any) => {\n  const wallet = useAnchorWallet() || MockWallet\n  const { connection } = useConnection()\n\n  const provider = new AnchorProvider(connection, wallet, {})\n\n  setProvider(provider)\n  const program = new Program(IDL as Idl, programId)\n  const workspace = {\n    connection,\n    provider,\n    program,\n  }\n\n  return (\n    <WorkspaceContext.Provider value={workspace}>\n      {children}\n    </WorkspaceContext.Provider>\n  )\n}\n\nconst useWorkspace = (): WorkSpace => {\n  return useContext(WorkspaceContext)\n}\n\nexport { WorkspaceProvider, useWorkspace }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"..pages/_app.tsx")," \u6587\u4ef6\u4e2d\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5c06\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u88f9\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"WorkspaceProvider")," \u4e2d\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7ec4\u4ef6\u4e2d\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"useWorkspace")," \u94a9\u5b50\u6765\u8bbf\u95ee ",(0,r.kt)("inlineCode",{parentName:"li"},"program")," \u5bf9\u8c61\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import "../styles/globals.css"\nimport type { AppProps } from "next/app"\nimport { ChakraProvider } from "@chakra-ui/react"\nimport WalletContextProvider from "../context/WalletContextProvider"\nimport { WorkspaceProvider } from "../context/Anchor"\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <WalletContextProvider>\n      <ChakraProvider>\n        <WorkspaceProvider>\n          <Component {...pageProps} />\n        </WorkspaceProvider>\n      </ChakraProvider>\n    </WalletContextProvider>\n  )\n}\n\nexport default MyApp\n')),(0,r.kt)("h3",{id:"formtsx"},(0,r.kt)("inlineCode",{parentName:"h3"},"Form.tsx")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"handleSubmit")," \u51fd\u6570\u4e2d\uff1a",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u5b9e\u73b0\u6839\u636e\u60c5\u51b5\u9009\u62e9\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"addMovieReview")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"li"},"updateMovieReview")," \u6307\u4ee4\u3002")))),(0,r.kt)("p",null,"\u5728\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"Anchor"),"\u65f6\uff0c\u5229\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"IDL (Interface Description Language)")," \u7684\u7279\u6027\u53ef\u4ee5\u63a8\u65ad",(0,r.kt)("inlineCode",{parentName:"p"},"PDA"),"\uff08\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740\uff09\u8d26\u6237\u548c\u5176\u4ed6\u8d26\u6237\uff08\u5982\u7cfb\u7edf\u7a0b\u5e8f\u6216\u4ee3\u5e01\u7a0b\u5e8f\uff09\uff0c\u56e0\u6b64\u65e0\u9700\u663e\u5f0f\u4f20\u9012\u8fd9\u4e9b\u4fe1\u606f\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { FC } from "react"\nimport { useState } from "react"\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Textarea,\n  Switch,\n} from "@chakra-ui/react"\nimport * as anchor from "@project-serum/anchor"\nimport { getAssociatedTokenAddress } from "@solana/spl-token"\nimport { useConnection, useWallet } from "@solana/wallet-adapter-react"\nimport { useWorkspace } from "../context/Anchor"\n\nexport const Form: FC = () => {\n  const [title, setTitle] = useState("")\n  const [rating, setRating] = useState(0)\n  const [description, setDescription] = useState("")\n  const [toggle, setToggle] = useState(true)\n\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n\n  const workspace = useWorkspace()\n  const program = workspace.program\n\n  const handleSubmit = async (event: any) => {\n    event.preventDefault()\n\n    if (!publicKey || !program) {\n      alert("Please connect your wallet!")\n      return\n    }\n\n    const [mintPDA] = await anchor.web3.PublicKey.findProgramAddress(\n      [Buffer.from("mint")],\n      program.programId\n    )\n\n    const tokenAddress = await getAssociatedTokenAddress(mintPDA, publicKey)\n\n    const transaction = new anchor.web3.Transaction()\n\n    if (toggle) {\n      const instruction = await program.methods\n        .addMovieReview(title, description, rating)\n        .accounts({\n          tokenAccount: tokenAddress,\n        })\n        .instruction()\n\n      transaction.add(instruction)\n    } else {\n      const instruction = await program.methods\n        .updateMovieReview(title, description, rating)\n        .instruction()\n\n      transaction.add(instruction)\n    }\n\n    try {\n      let txid = await sendTransaction(transaction, connection)\n      alert(\n        `Transaction submitted: https://explorer.solana.com/tx/${txid}?cluster=devnet`\n      )\n      console.log(\n        `Transaction submitted: https://explorer.solana.com/tx/${txid}?cluster=devnet`\n      )\n    } catch (e) {\n      console.log(JSON.stringify(e))\n      alert(JSON.stringify(e))\n    }\n  }\n\n  return (\n    <Box\n      p={4}\n      display={{ md: "flex" }}\n      maxWidth="32rem"\n      borderWidth={1}\n      margin={2}\n      justifyContent="center"\n    >\n      <form onSubmit={handleSubmit}>\n        <FormControl isRequired>\n          <FormLabel color="gray.200">Movie Title</FormLabel>\n          <Input\n            id="title"\n            color="gray.400"\n            onChange={(event) => setTitle(event.currentTarget.value)}\n          />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel color="gray.200">Add your review</FormLabel>\n          <Textarea\n            id="review"\n            color="gray.400"\n            onChange={(event) => setDescription(event.currentTarget.value)}\n          />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel color="gray.200">Rating</FormLabel>\n          <NumberInput\n            max={5}\n            min={1}\n            onChange={(valueString) => setRating(parseInt(valueString))}\n          >\n            <NumberInputField id="amount" color="gray.400" />\n            <NumberInputStepper color="gray.400">\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </FormControl>\n        <FormControl display="center" alignItems="center">\n          <FormLabel color="gray.100" mt={2}>\n            Update\n          </FormLabel>\n          <Switch\n            id="update"\n            onChange={(event) => setToggle((prevCheck) => !prevCheck)}\n          />\n        </FormControl>\n        <Button width="full" mt={4} type="submit">\n          Submit Review\n        </Button>\n      </form>\n    </Box>\n  )\n}\n')),(0,r.kt)("h3",{id:"movielisttsx"},(0,r.kt)("inlineCode",{parentName:"h3"},"MovieList.tsx")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"fetchMyReviews")," \u4e2d",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u4e3a\u8fde\u63a5\u7684\u94b1\u5305\u7684\u8bc4\u8bba\u5b9e\u65bd ",(0,r.kt)("inlineCode",{parentName:"li"},"movieAccountState")," \u8d26\u6237\u8fc7\u6ee4\u5668"))),(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"fetchAccounts")," \u4e2d",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6267\u884c\u83b7\u53d6\u6240\u6709\u8d26\u6237"))),(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u8bc4\u8bba\u7684\u5206\u9875")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Card } from "./Card"\nimport { FC, useEffect, useState } from "react"\nimport {\n  Button,\n  Center,\n  HStack,\n  Input,\n  Spacer,\n  Heading,\n} from "@chakra-ui/react"\nimport { useWorkspace } from "../context/Anchor"\nimport { useWallet } from "@solana/wallet-adapter-react"\nimport { useDisclosure } from "@chakra-ui/react"\nimport { ReviewDetail } from "./ReviewDetail"\n\nexport const MovieList: FC = () => {\n  const { program } = useWorkspace()\n  const [movies, setMovies] = useState<any | null>(null)\n  const [page, setPage] = useState(1)\n  const [search, setSearch] = useState("")\n  const [result, setResult] = useState<any | null>(null)\n  const [selectedMovie, setSelectedMovie] = useState<any | null>(null)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const wallet = useWallet()\n\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      if (program) {\n        const accounts = (await program.account.movieAccountState.all()) ?? []\n\n        const sort = [...accounts].sort((a, b) =>\n          a.account.title > b.account.title ? 1 : -1\n        )\n        setMovies(sort)\n      }\n    }\n    fetchAccounts()\n  }, [])\n\n  useEffect(() => {\n    if (movies && search != "") {\n      const filtered = movies.filter((movie: any) => {\n        return movie.account.title\n          .toLowerCase()\n          .startsWith(search.toLowerCase())\n      })\n      setResult(filtered)\n    }\n  }, [search])\n\n  useEffect(() => {\n    if (movies && search == "") {\n      const filtered = movies.slice((page - 1) * 3, page * 3)\n      setResult(filtered)\n    }\n  }, [page, movies, search])\n\n  const fetchMyReviews = async () => {\n    if (wallet.connected && program) {\n      const accounts =\n        (await program.account.movieAccountState.all([\n          {\n            memcmp: {\n              offset: 8,\n              bytes: wallet.publicKey!.toBase58(),\n            },\n          },\n        ])) ?? []\n\n      const sort = [...accounts].sort((a, b) =>\n        a.account.title > b.account.title ? 1 : -1\n      )\n      setResult(sort)\n    } else {\n      alert("Please Connect Wallet")\n    }\n  }\n\n  const handleReviewSelected = (data: any) => {\n    setSelectedMovie(data)\n    onOpen()\n  }\n\n  return (\n    <div>\n      <Center>\n        <Input\n          id="search"\n          color="gray.400"\n          onChange={(event) => setSearch(event.currentTarget.value)}\n          placeholder="Search"\n          w="97%"\n          mt={2}\n          mb={2}\n          margin={2}\n        />\n        <Button onClick={fetchMyReviews}>My Reviews</Button>\n      </Center>\n      <Heading as="h1" size="l" color="white" ml={4} mt={8}>\n        Select Review To Comment\n      </Heading>\n      {selectedMovie && (\n        <ReviewDetail isOpen={isOpen} onClose={onClose} movie={selectedMovie} />\n      )}\n      {result && (\n        <div>\n          {Object.keys(result).map((key) => {\n            const data = result[key as unknown as number]\n            return (\n              <Card\n                key={key}\n                movie={data}\n                onClick={() => {\n                  handleReviewSelected(data)\n                }}\n              />\n            )\n          })}\n        </div>\n      )}\n      <Center>\n        {movies && (\n          <HStack w="full" mt={2} mb={8} ml={4} mr={4}>\n            {page > 1 && (\n              <Button onClick={() => setPage(page - 1)}>Previous</Button>\n            )}\n            <Spacer />\n            {movies.length > page * 3 && (\n              <Button onClick={() => setPage(page + 1)}>Next</Button>\n            )}\n          </HStack>\n        )}\n      </Center>\n    </div>\n  )\n}\n')),(0,r.kt)("h3",{id:"reviewdetailtsx"},"ReviewDetail.tsx"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"handleSubmit")," \u4e2d",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u65bd ",(0,r.kt)("inlineCode",{parentName:"li"},"addComment"))))),(0,r.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0cAnchor\u53ef\u4ee5\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"IDL"),"\u6765\u63a8\u65ad",(0,r.kt)("inlineCode",{parentName:"p"},"PDA"),"\u8d26\u6237\u548c\u5176\u4ed6\u8d26\u6237\uff08\u7cfb\u7edf\u7a0b\u5e8f/\u4ee3\u5e01\u7a0b\u5e8f\uff09\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u663e\u5f0f\u4f20\u9012"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  Button,\n  Input,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Stack,\n  FormControl,\n} from "@chakra-ui/react"\nimport { FC, useState } from "react"\nimport * as anchor from "@project-serum/anchor"\nimport { getAssociatedTokenAddress } from "@solana/spl-token"\nimport { CommentList } from "./CommentList"\nimport { useConnection, useWallet } from "@solana/wallet-adapter-react"\nimport { useWorkspace } from "../context/Anchor"\nimport BN from "bn.js"\n\ninterface ReviewDetailProps {\n  isOpen: boolean\n  onClose: any\n  movie: any\n}\n\nexport const ReviewDetail: FC<ReviewDetailProps> = ({\n  isOpen,\n  onClose,\n  movie,\n}: ReviewDetailProps) => {\n  const [comment, setComment] = useState("")\n  const { connection } = useConnection()\n  const { publicKey, sendTransaction } = useWallet()\n  const { program } = useWorkspace()\n\n  const handleSubmit = async (event: any) => {\n    event.preventDefault()\n\n    if (!publicKey || !program) {\n      alert("Please connect your wallet!")\n      return\n    }\n\n    const movieReview = new anchor.web3.PublicKey(movie.publicKey)\n\n    const [movieReviewCounterPda] =\n      await anchor.web3.PublicKey.findProgramAddress(\n        [Buffer.from("counter"), movieReview.toBuffer()],\n        program.programId\n      )\n\n    const [mintPDA] = await anchor.web3.PublicKey.findProgramAddress(\n      [Buffer.from("mint")],\n      program.programId\n    )\n\n    const tokenAddress = await getAssociatedTokenAddress(mintPDA, publicKey)\n\n    const transaction = new anchor.web3.Transaction()\n\n    const instruction = await program.methods\n      .addComment(comment)\n      .accounts({\n        movieReview: movieReview,\n        movieCommentCounter: movieReviewCounterPda,\n        tokenAccount: tokenAddress,\n      })\n      .instruction()\n\n    transaction.add(instruction)\n\n    try {\n      let txid = await sendTransaction(transaction, connection)\n      alert(\n        `Transaction submitted: https://explorer.solana.com/tx/${txid}?cluster=devnet`\n      )\n      console.log(\n        `Transaction submitted: https://explorer.solana.com/tx/${txid}?cluster=devnet`\n      )\n    } catch (e) {\n      console.log(JSON.stringify(e))\n      alert(JSON.stringify(e))\n    }\n  }\n\n  return (\n    <div>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            textTransform="uppercase"\n            textAlign={{ base: "center", md: "center" }}\n          >\n            {movie.account.title}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Stack textAlign={{ base: "center", md: "center" }}>\n              <p>{movie.account.description}</p>\n              <form onSubmit={handleSubmit}>\n                <FormControl isRequired>\n                  <Input\n                    id="title"\n                    color="black"\n                    onChange={(event) => setComment(event.currentTarget.value)}\n                    placeholder="Submit a comment..."\n                  />\n                </FormControl>\n                <Button width="full" mt={4} type="submit">\n                  Send\n                </Button>\n              </form>\n              <CommentList movie={movie} />\n            </Stack>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </div>\n  )\n}\n')),(0,r.kt)("h3",{id:"commentlisttsx"},"CommentList.tsx"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch")," \u4e2d",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u83b7\u53d6\u8d26\u6237\u5e76\u7b5b\u9009\u7279\u5b9a\u7684\u7535\u5f71\u8bc4\u8bba\u8d26\u6237"))),(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u8bc4\u8bba\u7684\u5206\u9875")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  Button,\n  Center,\n  HStack,\n  Spacer,\n  Stack,\n  Box,\n  Heading,\n} from "@chakra-ui/react"\nimport { FC, useState, useEffect } from "react"\nimport { useWorkspace } from "../context/Anchor"\n\ninterface CommentListProps {\n  movie: any\n}\n\nexport const CommentList: FC<CommentListProps> = ({\n  movie,\n}: CommentListProps) => {\n  const [page, setPage] = useState(1)\n  const [comments, setComments] = useState<any[]>([])\n  const [result, setResult] = useState<any[]>([])\n  const { program } = useWorkspace()\n\n  useEffect(() => {\n    const fetch = async () => {\n      if (program) {\n        const comments = await program.account.movieComment.all([\n          {\n            memcmp: {\n              offset: 8,\n              bytes: movie.publicKey.toBase58(),\n            },\n          },\n        ])\n\n        const sort = [...comments].sort((a, b) =>\n          a.account.count > b.account.count ? 1 : -1\n        )\n        setComments(comments)\n        const filtered = sort.slice((page - 1) * 3, page * 3)\n        setResult(filtered)\n      }\n    }\n    fetch()\n  }, [page])\n\n  return (\n    <div>\n      <Heading as="h1" size="l" ml={4} mt={2}>\n        Existing Comments\n      </Heading>\n      {result.map((comment, index) => (\n        <Box\n          p={4}\n          textAlign={{ base: "left", md: "left" }}\n          display={{ md: "flex" }}\n          maxWidth="32rem"\n          borderWidth={1}\n          margin={2}\n          key={index}\n        >\n          <div>{comment.account.comment}</div>\n        </Box>\n      ))}\n      <Stack>\n        <Center>\n          <HStack w="full" mt={2} mb={8} ml={4} mr={4}>\n            {page > 1 && (\n              <Button onClick={() => setPage(page - 1)}>Previous</Button>\n            )}\n            <Spacer />\n            {comments.length > page * 3 && (\n              <Button onClick={() => setPage(page + 1)}>Next</Button>\n            )}\n          </HStack>\n        </Center>\n      </Stack>\n    </div>\n  )\n}\n')),(0,r.kt)("p",null,"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,r.kt)("p",null,"\u606d\u559c\uff01\u4f60\u505a\u5230\u4e86\u3002\u6211\u4eec\u7684\u4e0b\u4e00\u8bfe\u662f\u4f60\u5efa\u7acb\u548c\u53d1\u8d27\u7684\u5927\u7ed3\u5c40\u3002"))}u.isMDXComponent=!0}}]);