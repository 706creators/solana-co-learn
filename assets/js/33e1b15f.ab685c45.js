"use strict";(self.webpackChunkall_in_one_solana=self.webpackChunkall_in_one_solana||[]).push([[3428],{3905:(n,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>d});var a=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function c(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,a,o=function(n,t){if(null==n)return{};var e,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var i=a.createContext({}),l=function(n){var t=a.useContext(i),e=t;return n&&(e="function"==typeof n?n(t):c(c({},t),n)),e},s=function(n){var t=l(n.components);return a.createElement(i.Provider,{value:t},n.children)},p="mdxType",_={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(n,t){var e=n.components,o=n.mdxType,r=n.originalType,i=n.parentName,s=u(n,["components","mdxType","originalType","parentName"]),p=l(e),m=o,d=p["".concat(i,".").concat(m)]||p[m]||_[m]||r;return e?a.createElement(d,c(c({ref:t},s),{},{components:e})):a.createElement(d,c({ref:t},s))}));function d(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var r=e.length,c=new Array(r);c[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=n,u[p]="string"==typeof n?n:o,c[1]=u;for(var l=2;l<r;l++)c[l]=e[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,e)}m.displayName="MDXCreateElement"},37284:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>u,metadata:()=>l,toc:()=>p});var a=e(87462),o=(e(67294),e(3905)),r=e(74866),c=e(85162);const u={title:"\u8d26\u6237\u6620\u5c04",sidebar_position:10,tags:["solana-cook-book","account-map"]},i="\u8d26\u6237\u6620\u5c04",l={unversionedId:"guides/account-maps",id:"guides/account-maps",title:"\u8d26\u6237\u6620\u5c04",description:"\u5728\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u6620\u5c04\uff08Map\uff09\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u4e00\u4e2a\u952e\u4e0e\u67d0\u79cd\u503c\u5173\u8054\u8d77\u6765\u3002\u952e\u548c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u952e\u7528\u4f5c\u6807\u8bc6\u8981\u4fdd\u5b58\u7684\u7279\u5b9a\u503c\u7684\u6807\u8bc6\u7b26\u3002\u901a\u8fc7\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u9ad8\u6548\u5730\u63d2\u5165\u3001\u68c0\u7d22\u548c\u66f4\u65b0\u8fd9\u4e9b\u503c\u3002",source:"@site/docs/cookbook-zh/guides/account-maps.md",sourceDirName:"guides",slug:"/guides/account-maps",permalink:"/cookbook-zh/guides/account-maps",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/tree/main/docs/cookbook-zh/guides/account-maps.md",tags:[{label:"solana-cook-book",permalink:"/cookbook-zh/tags/solana-cook-book"},{label:"account-map",permalink:"/cookbook-zh/tags/account-map"}],version:"current",lastUpdatedBy:"Davirain",lastUpdatedAt:1695967092,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:10,frontMatter:{title:"\u8d26\u6237\u6620\u5c04",sidebar_position:10,tags:["solana-cook-book","account-map"]},sidebar:"tutorialSidebar",previous:{title:"\u8fc1\u79fb\u7a0b\u5e8f\u7684\u6570\u636e\u8d26\u6237",permalink:"/cookbook-zh/guides/data-migration"},next:{title:"\u91cd\u8bd5\u4ea4\u6613",permalink:"/cookbook-zh/guides/retrying-transactions"}},s={},p=[{value:"\u6d3e\u751fPDA",id:"\u6d3e\u751fpda",level:2},{value:"\u5355\u4e2a\u6620\u5c04\u8d26\u6237",id:"\u5355\u4e2a\u6620\u5c04\u8d26\u6237",level:2}],_={toc:p},m="wrapper";function d(n){let{components:t,...e}=n;return(0,o.kt)(m,(0,a.Z)({},_,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u8d26\u6237\u6620\u5c04"},"\u8d26\u6237\u6620\u5c04"),(0,o.kt)("p",null,"\u5728\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u6620\u5c04\uff08Map\uff09\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5c06\u4e00\u4e2a\u952e\u4e0e\u67d0\u79cd\u503c\u5173\u8054\u8d77\u6765\u3002\u952e\u548c\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u952e\u7528\u4f5c\u6807\u8bc6\u8981\u4fdd\u5b58\u7684\u7279\u5b9a\u503c\u7684\u6807\u8bc6\u7b26\u3002\u901a\u8fc7\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u9ad8\u6548\u5730\u63d2\u5165\u3001\u68c0\u7d22\u548c\u66f4\u65b0\u8fd9\u4e9b\u503c\u3002"),(0,o.kt)("p",null,"\u6b63\u5982\u6211\u4eec\u6240\u4e86\u89e3\u7684\uff0cSolana\u7684\u8d26\u6237\u6a21\u578b\u8981\u6c42\u7a0b\u5e8f\u6570\u636e\u548c\u76f8\u5173\u72b6\u6001\u6570\u636e\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u8d26\u6237\u4e2d\u3002\u8fd9\u4e9b\u8d26\u6237\u90fd\u6709\u4e0e\u4e4b\u5173\u8054\u7684\u5730\u5740\uff0c\u8fd9\u672c\u8eab\u5c31\u6709\u6620\u5c04\u7684\u4f5c\u7528\uff01\u5728",(0,o.kt)("a",{parentName:"p",href:"https://solanacookbook.com/core-concepts/accounts.html"},"\u8fd9\u91cc"),"\u4e86\u89e3\u66f4\u591a\u5173\u4e8eSolana\u8d26\u6237\u6a21\u578b\u7684\u4fe1\u606f\u3002"),(0,o.kt)("p",null,"\u56e0\u6b64\uff0c\u5c06\u503c\u5b58\u50a8\u5728\u5355\u72ec\u7684\u8d26\u6237\u4e2d\uff0c\u4ee5\u5176\u5730\u5740\u4f5c\u4e3a\u68c0\u7d22\u503c\u6240\u9700\u7684\u952e\u662f\u6709\u610f\u4e49\u7684\u3002\u4f46\u8fd9\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\uff1a"),(0,o.kt)("p",null,"*\u4e0a\u8ff0\u5730\u5740\u5f88\u53ef\u80fd\u4e0d\u662f\u7406\u60f3\u7684\u952e\uff0c\u4f60\u53ef\u80fd\u96be\u4ee5\u8bb0\u4f4f\u5e76\u68c0\u7d22\u6240\u9700\u7684\u503c\u3002"),(0,o.kt)("p",null,"*\u4e0a\u8ff0\u5730\u5740\u662f\u4e0d\u540cKeypair\u7684\u516c\u94a5\uff0c\u6bcf\u4e2a\u516c\u94a5\uff08\u6216\u5730\u5740\uff09\u90fd\u6709\u4e0e\u4e4b\u5173\u8054\u7684\u79c1\u94a5\u3002\u5982\u679c\u9700\u8981\uff0c\u8fd9\u4e2a\u79c1\u94a5\u5c06\u7528\u4e8e\u5bf9\u4e0d\u540c\u7684\u6307\u4ee4\u8fdb\u884c\u7b7e\u540d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5728\u67d0\u4e2a\u5730\u65b9\u5b58\u50a8\u79c1\u94a5\uff0c\u8fd9\u7edd\u5bf9\u4e0d\u662f\u63a8\u8350\u7684\u505a\u6cd5\uff01"),(0,o.kt)("p",null,"\u8fd9\u7ed9\u8bb8\u591aSolana\u5f00\u53d1\u8005\u5e26\u6765\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5982\u4f55\u5728\u4ed6\u4eec\u7684\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u7c7b\u4f3c",(0,o.kt)("inlineCode",{parentName:"p"},"Map"),"\u7684\u903b\u8f91\u3002\u8ba9\u6211\u4eec\u770b\u770b\u51e0\u79cd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u3002"),(0,o.kt)("h2",{id:"\u6d3e\u751fpda"},"\u6d3e\u751fPDA"),(0,o.kt)("p",null,"PDA\u7684\u5168\u79f0\u662f\u201c\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740\u201d - ",(0,o.kt)("a",{parentName:"p",href:"https://solanacookbook.com/references/accounts.html#program-derived-address"},"Program Derived Address"),"\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u5b83\u4eec\u662f\u4ece\u4e00\u7ec4\u79cd\u5b50\u548c\u7a0b\u5e8fID\uff08\u6216\u5730\u5740\uff09\u6d3e\u751f\u51fa\u6765\u7684\u5730\u5740\u3002"),(0,o.kt)("p",null,"PDAs\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\uff0c\u8fd9\u4e9b\u5730\u5740\u4e0d\u4e0e\u4efb\u4f55\u79c1\u94a5\u76f8\u5173\u8054\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5730\u5740\u4e0d\u4f4d\u4e8eED25519\u66f2\u7ebf\u4e0a\u3002\u56e0\u6b64\uff0c\u53ea\u6709\u6d3e\u751f\u6b64\u5730\u5740\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684\u5bc6\u94a5\u548c\u79cd\u5b50\u5bf9\u6307\u4ee4\u8fdb\u884c\u7b7e\u540d\u3002\u5728\u8fd9\u91cc\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002"),(0,o.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u5bf9PDAs\u6709\u4e86\u4e00\u4e2a\u6982\u5ff5\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u5b83\u4eec\u6765\u6620\u5c04\u4e00\u4e9b\u8d26\u6237\uff01\u6211\u4eec\u4ee5\u4e00\u4e2a\u535a\u5ba2\u7a0b\u5e8f\u4f5c\u4e3a\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002"),(0,o.kt)("p",null,"\u5728\u8fd9\u4e2a\u535a\u5ba2\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"User"),"\u90fd\u62e5\u6709\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"Blog"),"\u3002\u8fd9\u4e2a\u535a\u5ba2\u53ef\u4ee5\u6709\u4efb\u610f\u6570\u91cf\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"Posts"),"\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u6bcf\u4e2a\u7528\u6237\u6620\u5c04\u5230\u4e00\u4e2a\u535a\u5ba2\uff0c\u6bcf\u4e2a\u5e16\u5b50\u6620\u5c04\u5230\u67d0\u4e2a\u535a\u5ba2\u3002"),(0,o.kt)("p",null,"\u7b80\u800c\u8a00\u4e4b\uff0c\u7528\u6237\u548c\u4ed6/\u5979\u7684\u535a\u5ba2\u4e4b\u95f4\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"1:1"),"\u7684\u6620\u5c04\uff0c\u800c\u535a\u5ba2\u548c\u5176\u5e16\u5b50\u4e4b\u95f4\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"1:N"),"\u7684\u6620\u5c04\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e",(0,o.kt)("inlineCode",{parentName:"p"},"1:1"),"\u7684\u6620\u5c04\uff0c\u6211\u4eec\u5e0c\u671b\u4e00\u4e2a\u535a\u5ba2\u7684\u5730\u5740\u4ec5\u4ece\u5176\u7528\u6237\u6d3e\u751f\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5176\u6743\u9650\uff08\u6216\u7528\u6237\uff09\u6765\u68c0\u7d22\u535a\u5ba2\u3002\u56e0\u6b64\uff0c\u535a\u5ba2\u7684\u79cd\u5b50\u5c06\u5305\u62ec\u5176\u6743\u9650\u7684\u5bc6\u94a5\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e2a\u524d\u7f00\u535a\u5ba2\uff0c\u4f5c\u4e3a\u7c7b\u578b\u6807\u8bc6\u7b26\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e",(0,o.kt)("inlineCode",{parentName:"p"},"1:N"),"\u7684\u6620\u5c04\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u5e16\u5b50\u7684\u5730\u5740\u4e0d\u4ec5\u4ece\u5b83\u6240\u5173\u8054\u7684\u535a\u5ba2\u6d3e\u751f\uff0c\u8fd8\u4ece\u53e6\u4e00\u4e2a\u6807\u8bc6\u7b26\u6d3e\u751f\uff0c\u4ee5\u533a\u5206\u535a\u5ba2\u4e2d\u7684\u591a\u4e2a\u5e16\u5b50\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6bcf\u4e2a\u5e16\u5b50\u7684\u5730\u5740\u662f\u4ece\u535a\u5ba2\u7684\u5bc6\u94a5\u3001\u4e00\u4e2a\u7528\u4e8e\u6807\u8bc6\u6bcf\u4e2a\u5e16\u5b50\u7684slug\u548c\u4e00\u4e2a\u524d\u7f00\u5e16\u5b50\u6d3e\u751f\u51fa\u6765\u7684\uff0c\u4f5c\u4e3a\u7c7b\u578b\u6807\u8bc6\u7b26\u3002"),(0,o.kt)("p",null,"\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"anchor",label:"anchor",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Accounts)]\n#[instruction(blog_account_bump: u8)]\npub struct InitializeBlog<'info> {\n    #[account(\n        init,\n        seeds = [\n            b\"blog\".as_ref(),\n            authority.key().as_ref()\n        ],\n        bump = blog_account_bump,\n        payer = authority,\n        space = Blog::LEN\n    )]\n    pub blog_account: Account<'info, Blog>,\n\n    #[account(mut)]\n    pub authority: Signer<'info>,\n\n    pub system_program: Program<'info, System>\n}\n\n#[derive(Accounts)]\n#[instruction(post_account_bump: u8, post: Post)]\npub struct CreatePost<'info> {\n    #[account(mut, has_one = authority)]\n    pub blog_account: Account<'info, Blog>,\n\n    #[account(\n        init,\n        seeds = [\n            b\"post\".as_ref(),\n            blog_account.key().as_ref(),\n            post.slug.as_ref(),\n        ],\n        bump = post_account_bump,\n        payer = authority,\n        space = Post::LEN\n    )]\n    pub post_account: Account<'info, Post>,\n\n    #[account(mut)]\n    pub authority: Signer<'info>,\n\n    pub system_program: Program<'info, System>\n}\n"))),(0,o.kt)(c.Z,{value:"rust",label:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn process_create_post(\n    accounts: &[AccountInfo],\n    slug: String,\n    title: String,\n    content: String,\n    program_id: &Pubkey\n) -> ProgramResult {\n    if slug.len() > 10 || content.len() > 20 || title.len() > 50 {\n        return Err(BlogError::InvalidPostData.into())\n    }\n\n    let account_info_iter = &mut accounts.iter();\n\n    let authority_account = next_account_info(account_info_iter)?;\n    let blog_account = next_account_info(account_info_iter)?;\n    let post_account = next_account_info(account_info_iter)?;\n    let system_program = next_account_info(account_info_iter)?;\n\n    if !authority_account.is_signer {\n        return Err(ProgramError::MissingRequiredSignature);\n    }\n\n    let (blog_pda, _blog_bump) = Pubkey::find_program_address(\n        &[b"blog".as_ref(), authority_account.key.as_ref()],\n        program_id\n    );\n    if blog_pda != *blog_account.key || !blog_account.is_writable || blog_account.data_is_empty() {\n        return Err(BlogError::InvalidBlogAccount.into())\n    }\n\n    let (post_pda, post_bump) = Pubkey::find_program_address(\n        &[b"post".as_ref(), slug.as_ref(), authority_account.key.as_ref()],\n        program_id\n    );\n    if post_pda != *post_account.key {\n        return Err(BlogError::InvalidPostAccount.into())\n    }\n\n    let post_len: usize = 32 + 32 + 1 + (4 + slug.len()) + (4 + title.len()) + (4 + content.len());\n\n    let rent = Rent::get()?;\n    let rent_lamports = rent.minimum_balance(post_len);\n\n    let create_post_pda_ix = &system_instruction::create_account(\n        authority_account.key,\n        post_account.key,\n        rent_lamports,\n        post_len.try_into().unwrap(),\n        program_id\n    );\n    msg!("Creating post account!");\n    invoke_signed(\n        create_post_pda_ix,\n        &[\n            authority_account.clone(),\n            post_account.clone(),\n            system_program.clone()\n        ],\n        &[&[\n            b"post".as_ref(),\n            slug.as_ref(),\n            authority_account.key.as_ref(),\n            &[post_bump]\n        ]]\n    )?;\n\n    let mut post_account_state = try_from_slice_unchecked::<Post>(&post_account.data.borrow()).unwrap();\n    post_account_state.author = *authority_account.key;\n    post_account_state.blog = *blog_account.key;\n    post_account_state.bump = post_bump;\n    post_account_state.slug = slug;\n    post_account_state.title = title;\n    post_account_state.content = content;\n\n    msg!("Serializing Post data");\n    post_account_state.serialize(&mut &mut post_account.data.borrow_mut()[..])?;\n\n\n    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;\n    blog_account_state.post_count += 1;\n\n    msg!("Serializing Blog data");\n    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;\n\n    Ok(())\n}\n\nfn process_init_blog(\n    accounts: &[AccountInfo],\n    program_id: &Pubkey\n) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let authority_account = next_account_info(account_info_iter)?;\n    let blog_account = next_account_info(account_info_iter)?;\n    let system_program = next_account_info(account_info_iter)?;\n\n    if !authority_account.is_signer {\n        return Err(ProgramError::MissingRequiredSignature);\n    }\n\n    let (blog_pda, blog_bump) = Pubkey::find_program_address(\n        &[b"blog".as_ref(), authority_account.key.as_ref()],\n        program_id\n    );\n    if blog_pda != *blog_account.key {\n        return Err(BlogError::InvalidBlogAccount.into())\n    }\n\n    let rent = Rent::get()?;\n    let rent_lamports = rent.minimum_balance(Blog::LEN);\n\n    let create_blog_pda_ix = &system_instruction::create_account(\n        authority_account.key,\n        blog_account.key,\n        rent_lamports,\n        Blog::LEN.try_into().unwrap(),\n        program_id\n    );\n    msg!("Creating blog account!");\n    invoke_signed(\n        create_blog_pda_ix,\n        &[\n            authority_account.clone(),\n            blog_account.clone(),\n            system_program.clone()\n        ],\n        &[&[\n            b"blog".as_ref(),\n            authority_account.key.as_ref(),\n            &[blog_bump]\n        ]]\n    )?;\n\n    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;\n    blog_account_state.authority = *authority_account.key;\n    blog_account_state.bump = blog_bump;\n    blog_account_state.post_count = 0;\n    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;\n\n\n    Ok(())\n}\n')))),(0,o.kt)("p",null,"\u5728\u5ba2\u6237\u7aef\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"PublicKey.findProgramAddress()"),"\u6765\u83b7\u53d6\u6240\u9700\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"Blog")," \u548c",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),"\u8d26\u6237\u5730\u5740\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9",(0,o.kt)("inlineCode",{parentName:"p"},"connection.getAccountInfo()"),"\u6765\u83b7\u53d6\u8d26\u6237\u6570\u636e\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'async () => {\n  const connection = new Connection("http://localhost:8899", "confirmed");\n\n  const [blogAccount] = await PublicKey.findProgramAddress(\n    [Buffer.from("blog"), user.publicKey.toBuffer()],\n    MY_PROGRAM_ID\n  );\n\n  const [postAccount] = await PublicKey.findProgramAddress(\n    [Buffer.from("post"), Buffer.from("slug-1"), user.publicKey.toBuffer()],\n    MY_PROGRAM_ID\n  );\n\n  const blogAccountInfo = await connection.getAccountInfo(blogAccount);\n  const blogAccountState = BLOG_ACCOUNT_DATA_LAYOUT.decode(\n    blogAccountInfo.data\n  );\n  console.log("Blog account state: ", blogAccountState);\n\n  const postAccountInfo = await connection.getAccountInfo(postAccount);\n  const postAccountState = POST_ACCOUNT_DATA_LAYOUT.decode(\n    postAccountInfo.data\n  );\n  console.log("Post account state: ", postAccountState);\n};\n')),(0,o.kt)("h2",{id:"\u5355\u4e2a\u6620\u5c04\u8d26\u6237"},"\u5355\u4e2a\u6620\u5c04\u8d26\u6237"),(0,o.kt)("p",null,"\u53e6\u4e00\u79cd\u5b9e\u73b0\u6620\u5c04\u7684\u65b9\u6cd5\u662f\u5728\u5355\u4e2a\u8d26\u6237\u4e2d\u663e\u5f0f\u5b58\u50a8\u4e00\u4e2a",(0,o.kt)("inlineCode",{parentName:"p"},"BTreeMap"),"\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e2a\u8d26\u6237\u7684\u5730\u5740\u672c\u8eab\u53ef\u4ee5\u662f\u4e00\u4e2aPDA\uff0c\u6216\u8005\u662f\u751f\u6210\u7684Keypair\u7684\u516c\u94a5\u3002"),(0,o.kt)("p",null,"\u8fd9\u79cd\u8d26\u6237\u6620\u5c04\u7684\u65b9\u6cd5\u5e76\u4e0d\u7406\u60f3\uff0c\u539f\u56e0\u5982\u4e0b\uff1a"),(0,o.kt)("p",null,"*\u9996\u5148\uff0c\u4f60\u9700\u8981\u521d\u59cb\u5316\u5b58\u50a8",(0,o.kt)("inlineCode",{parentName:"p"},"BTreeMap"),"\u7684\u8d26\u6237\uff0c\u7136\u540e\u624d\u80fd\u5411\u5176\u4e2d\u63d2\u5165\u5fc5\u8981\u7684\u952e\u503c\u5bf9\u3002\u7136\u540e\uff0c\u4f60\u8fd8\u9700\u8981\u5c06\u8fd9\u4e2a\u8d26\u6237\u7684\u5730\u5740\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u4ee5\u4fbf\u6bcf\u6b21\u66f4\u65b0\u65f6\u8fdb\u884c\u66f4\u65b0\u3002"),(0,o.kt)("p",null,"*\u8d26\u6237\u5b58\u5728\u5185\u5b58\u9650\u5236\uff0c\u6bcf\u4e2a\u8d26\u6237\u7684\u6700\u5927\u5927\u5c0f\u4e3a10 Mb\uff0c\u8fd9\u9650\u5236\u4e86",(0,o.kt)("inlineCode",{parentName:"p"},"BTreeMap"),"\u5b58\u50a8\u5927\u91cf\u952e\u503c\u5bf9\u7684\u80fd\u529b\u3002"),(0,o.kt)("p",null,"\u56e0\u6b64\uff0c\u5728\u8003\u8651\u4f60\u7684\u7528\u4f8b\u540e\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u79cd\u65b9\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn process_init_map(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    let authority_account = next_account_info(account_info_iter)?;\n    let map_account = next_account_info(account_info_iter)?;\n    let system_program = next_account_info(account_info_iter)?;\n\n    if !authority_account.is_signer {\n        return Err(ProgramError::MissingRequiredSignature)\n    }\n\n    let (map_pda, map_bump) = Pubkey::find_program_address(\n        &[b"map".as_ref()],\n        program_id\n    );\n\n    if map_pda != *map_account.key || !map_account.is_writable || !map_account.data_is_empty() {\n        return Err(BlogError::InvalidMapAccount.into())\n    }\n\n    let rent = Rent::get()?;\n    let rent_lamports = rent.minimum_balance(MapAccount::LEN);\n\n    let create_map_ix = &system_instruction::create_account(\n        authority_account.key,\n        map_account.key,\n        rent_lamports,\n        MapAccount::LEN.try_into().unwrap(),\n        program_id\n    );\n\n    msg!("Creating MapAccount account");\n    invoke_signed(\n        create_map_ix,\n        &[\n            authority_account.clone(),\n            map_account.clone(),\n            system_program.clone()\n        ],\n        &[&[\n            b"map".as_ref(),\n            &[map_bump]\n        ]]\n    )?;\n\n    msg!("Deserializing MapAccount account");\n    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow()).unwrap();\n    let empty_map: BTreeMap<Pubkey, Pubkey> = BTreeMap::new();\n\n    map_state.is_initialized = 1;\n    map_state.map = empty_map;\n\n    msg!("Serializing MapAccount account");\n    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;\n\n    Ok(())\n}\n\nfn process_insert_entry(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {\n\n    let account_info_iter = &mut accounts.iter();\n\n    let a_account = next_account_info(account_info_iter)?;\n    let b_account = next_account_info(account_info_iter)?;\n    let map_account = next_account_info(account_info_iter)?;\n\n    if !a_account.is_signer {\n        return Err(ProgramError::MissingRequiredSignature)\n    }\n\n    if map_account.data.borrow()[0] == 0 || *map_account.owner != *program_id {\n        return Err(BlogError::InvalidMapAccount.into())\n    }\n\n    msg!("Deserializing MapAccount account");\n    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow())?;\n\n    if map_state.map.contains_key(a_account.key) {\n        return Err(BlogError::AccountAlreadyHasEntry.into())\n    }\n\n    map_state.map.insert(*a_account.key, *b_account.key);\n\n    msg!("Serializing MapAccount account");\n    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;\n\n    Ok(())\n}\n')),(0,o.kt)("p",null,"\u4e0a\u8ff0\u7a0b\u5e8f\u7684\u5ba2\u6237\u7aef\u6d4b\u8bd5\u4ee3\u7801\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const insertABIx = new TransactionInstruction({\n  programId: MY_PROGRAM_ID,\n  keys: [\n    {\n      pubkey: userA.publicKey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: userB.publicKey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: mapKey,\n      isSigner: false,\n      isWritable: true,\n    },\n  ],\n  data: Buffer.from(Uint8Array.of(1)),\n});\n\nconst insertBCIx = new TransactionInstruction({\n  programId: MY_PROGRAM_ID,\n  keys: [\n    {\n      pubkey: userB.publicKey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: userC.publicKey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: mapKey,\n      isSigner: false,\n      isWritable: true,\n    },\n  ],\n  data: Buffer.from(Uint8Array.of(1)),\n});\n\nconst insertCAIx = new TransactionInstruction({\n  programId: MY_PROGRAM_ID,\n  keys: [\n    {\n      pubkey: userC.publicKey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: userA.publicKey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: mapKey,\n      isSigner: false,\n      isWritable: true,\n    },\n  ],\n  data: Buffer.from(Uint8Array.of(1)),\n});\n\nconst tx = new Transaction();\ntx.add(initMapIx);\ntx.add(insertABIx);\ntx.add(insertBCIx);\ntx.add(insertCAIx);\n")))}d.isMDXComponent=!0},85162:(n,t,e)=>{e.d(t,{Z:()=>c});var a=e(67294),o=e(86010);const r={tabItem:"tabItem_Ymn6"};function c(n){let{children:t,hidden:e,className:c}=n;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,c),hidden:e},t)}},74866:(n,t,e)=>{e.d(t,{Z:()=>v});var a=e(87462),o=e(67294),r=e(86010),c=e(12466),u=e(16550),i=e(91980),l=e(67392),s=e(50012);function p(n){return function(n){return o.Children.map(n,(n=>{if(!n||(0,o.isValidElement)(n)&&function(n){const{props:t}=n;return!!t&&"object"==typeof t&&"value"in t}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(n).map((n=>{let{props:{value:t,label:e,attributes:a,default:o}}=n;return{value:t,label:e,attributes:a,default:o}}))}function _(n){const{values:t,children:e}=n;return(0,o.useMemo)((()=>{const n=t??p(e);return function(n){const t=(0,l.l)(n,((n,t)=>n.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[t,e])}function m(n){let{value:t,tabValues:e}=n;return e.some((n=>n.value===t))}function d(n){let{queryString:t=!1,groupId:e}=n;const a=(0,u.k6)(),r=function(n){let{queryString:t=!1,groupId:e}=n;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:t,groupId:e});return[(0,i._X)(r),(0,o.useCallback)((n=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,n),a.replace({...a.location,search:t.toString()})}),[r,a])]}function b(n){const{defaultValue:t,queryString:e=!1,groupId:a}=n,r=_(n),[c,u]=(0,o.useState)((()=>function(n){let{defaultValue:t,tabValues:e}=n;if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=e.find((n=>n.default))??e[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[i,l]=d({queryString:e,groupId:a}),[p,b]=function(n){let{groupId:t}=n;const e=function(n){return n?`docusaurus.tab.${n}`:null}(t),[a,r]=(0,s.Nk)(e);return[a,(0,o.useCallback)((n=>{e&&r.set(n)}),[e,r])]}({groupId:a}),g=(()=>{const n=i??p;return m({value:n,tabValues:r})?n:null})();(0,o.useLayoutEffect)((()=>{g&&u(g)}),[g]);return{selectedValue:c,selectValue:(0,o.useCallback)((n=>{if(!m({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);u(n),l(n),b(n)}),[l,b,r]),tabValues:r}}var g=e(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(n){let{className:t,block:e,selectedValue:u,selectValue:i,tabValues:l}=n;const s=[],{blockElementScrollPositionUntilNextRender:p}=(0,c.o5)(),_=n=>{const t=n.currentTarget,e=s.indexOf(t),a=l[e].value;a!==u&&(p(t),i(a))},m=n=>{let t=null;switch(n.key){case"Enter":_(n);break;case"ArrowRight":{const e=s.indexOf(n.currentTarget)+1;t=s[e]??s[0];break}case"ArrowLeft":{const e=s.indexOf(n.currentTarget)-1;t=s[e]??s[s.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":e},t)},l.map((n=>{let{value:t,label:e,attributes:c}=n;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:n=>s.push(n),onKeyDown:m,onClick:_},c,{className:(0,r.Z)("tabs__item",f.tabItem,c?.className,{"tabs__item--active":u===t})}),e??t)})))}function k(n){let{lazy:t,children:e,selectedValue:a}=n;const r=(Array.isArray(e)?e:[e]).filter(Boolean);if(t){const n=r.find((n=>n.props.value===a));return n?(0,o.cloneElement)(n,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((n,t)=>(0,o.cloneElement)(n,{key:t,hidden:n.props.value!==a}))))}function h(n){const t=b(n);return o.createElement("div",{className:(0,r.Z)("tabs-container",f.tabList)},o.createElement(y,(0,a.Z)({},n,t)),o.createElement(k,(0,a.Z)({},n,t)))}function v(n){const t=(0,g.Z)();return o.createElement(h,(0,a.Z)({key:String(t)},n))}}}]);