"use strict";(self.webpackChunkall_in_one_solana=self.webpackChunkall_in_one_solana||[]).push([[9151],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>f});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=a.createContext({}),c=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(s.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?a.createElement(f,o(o({ref:e},u),{},{components:t})):a.createElement(f,o({ref:e},u))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[p]="string"==typeof n?n:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},74119:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=t(87462),r=(t(67294),t(3905)),i=t(74866),o=t(85162);const l={title:"\u5e8f\u5217\u6570\u636e",sidebar_position:8,tags:["solana-cook-book","serialization"]},s="\u5e8f\u5217\u6570\u636e",c={unversionedId:"guides/serialization",id:"guides/serialization",title:"\u5e8f\u5217\u6570\u636e",description:"\u5f53\u6211\u4eec\u8c08\u8bba\u5e8f\u5217\u5316\u65f6\uff0c\u6211\u4eec\u6307\u7684\u662f\u6570\u636e\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002",source:"@site/docs/cookbook-zh/guides/serialization.md",sourceDirName:"guides",slug:"/guides/serialization",permalink:"/cookbook-zh/guides/serialization",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/tree/main/docs/cookbook-zh/guides/serialization.md",tags:[{label:"solana-cook-book",permalink:"/cookbook-zh/tags/solana-cook-book"},{label:"serialization",permalink:"/cookbook-zh/tags/serialization"}],version:"current",lastUpdatedBy:"Davirain",lastUpdatedAt:1695967092,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:8,frontMatter:{title:"\u5e8f\u5217\u6570\u636e",sidebar_position:8,tags:["solana-cook-book","serialization"]},sidebar:"tutorialSidebar",previous:{title:"\u83b7\u53d6\u7a0b\u5e8f\u5e10\u6237",permalink:"/cookbook-zh/guides/get-program-accounts"},next:{title:"\u8fc1\u79fb\u7a0b\u5e8f\u7684\u6570\u636e\u8d26\u6237",permalink:"/cookbook-zh/guides/data-migration"}},u={},p=[{value:"\u8bbe\u7f6eBorsh\u5e8f\u5217\u5316",id:"\u8bbe\u7f6eborsh\u5e8f\u5217\u5316",level:2},{value:"\u5982\u4f55\u5e8f\u5217\u5316\u5ba2\u6237\u7aef\u4e0a\u7684\u6307\u4ee4\u6570\u636e",id:"\u5982\u4f55\u5e8f\u5217\u5316\u5ba2\u6237\u7aef\u4e0a\u7684\u6307\u4ee4\u6570\u636e",level:2},{value:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",id:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",level:2},{value:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",id:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",level:2},{value:"Pack",id:"pack",level:3},{value:"\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316",id:"\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316",level:3},{value:"\u7528\u6cd5",id:"\u7528\u6cd5",level:3},{value:"\u5982\u4f55\u5728\u5ba2\u6237\u7aef\u4e2d\u53cd\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",id:"\u5982\u4f55\u5728\u5ba2\u6237\u7aef\u4e2d\u53cd\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",level:2},{value:"Solana TS/JS \u5e38\u7528\u6620\u5c04",id:"solana-tsjs-\u5e38\u7528\u6620\u5c04",level:2},{value:"\u9ad8\u7ea7\u6784\u9020",id:"\u9ad8\u7ea7\u6784\u9020",level:2},{value:"COption",id:"coption",level:3},{value:"\u8d44\u6599",id:"\u8d44\u6599",level:2}],d={toc:p},m="wrapper";function f(n){let{components:e,...l}=n;return(0,r.kt)(m,(0,a.Z)({},d,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5e8f\u5217\u6570\u636e"},"\u5e8f\u5217\u6570\u636e"),(0,r.kt)("p",null,"\u5f53\u6211\u4eec\u8c08\u8bba\u5e8f\u5217\u5316\u65f6\uff0c\u6211\u4eec\u6307\u7684\u662f\u6570\u636e\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002"),(0,r.kt)("p",null,"\u5e8f\u5217\u5316\u5728Solana\u7a0b\u5e8f\u548c\u7a0b\u5e8f\u8d26\u6237\u7684\u751f\u547d\u5468\u671f\u4e2d\u7684\u51e0\u4e2a\u70b9\u4e0a\u8d77\u7740\u4f5c\u7528\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5c06\u6307\u4ee4\u6570\u636e\u5e8f\u5217\u5316\u5230\u5ba2\u6237\u7aef\u4e0a"),(0,r.kt)("li",{parentName:"ol"},"\u5728\u7a0b\u5e8f\u4e2d\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"),(0,r.kt)("li",{parentName:"ol"},"\u5c06\u8d26\u6237\u6570\u636e\u5e8f\u5217\u5316\u5230\u7a0b\u5e8f\u4e2d"),(0,r.kt)("li",{parentName:"ol"},"\u5728\u5ba2\u6237\u7aef\u4e0a\u53cd\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e")),(0,r.kt)("p",null,"\u91cd\u8981\u7684\u662f\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u90fd\u5e94\u8be5\u91c7\u7528\u76f8\u540c\u7684\u5e8f\u5217\u5316\u65b9\u6cd5\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u4f7f\u7528",(0,r.kt)("a",{parentName:"p",href:"#resources"},"Borsh"),"\u8fdb\u884c\u5e8f\u5217\u5316\u3002"),(0,r.kt)("p",null,"\u672c\u6587\u6863\u7684\u5176\u4f59\u90e8\u5206\u4e2d\u7684\u793a\u4f8b\u6458\u5f55\u81ea",(0,r.kt)("a",{parentName:"p",href:"#resources"},"Solana CLI \u7a0b\u5e8f\u6a21\u677f")),(0,r.kt)("h2",{id:"\u8bbe\u7f6eborsh\u5e8f\u5217\u5316"},"\u8bbe\u7f6eBorsh\u5e8f\u5217\u5316"),(0,r.kt)("p",null,"\u4e3a\u4e86\u4f7f\u7528Borsh\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u9700\u8981\u5728Rust\u7a0b\u5e8f\u3001Rust\u5ba2\u6237\u7aef\u3001\u8282\u70b9\u548c/\u6216Python\u5ba2\u6237\u7aef\u4e2d\u8bbe\u7f6eBorsh\u5e93\u3002"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"program",label:"program",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "solana-cli-template-program-bpf"\nversion = "0.1.0"\nedition = "2018"\nlicense = "WTFPL"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\nno-entrypoint = []\n\n[dependencies]\nborsh = "0.9.0"\nlazy_static = "1.4.0"\nnum-derive = "0.3"\nnum_enum = "0.5.1"\nnum-integer = "0.1.44"\nnum-traits = "0.2"\nsol-template-shared = {path = "../shared"}\nsolana-program = "1.8.2"\nthiserror = "1.0"\n\n[dev-dependencies]\nsolana-program-test = "1.8.2"\nsolana-sdk = "1.8.2"\n\n[lib]\ncrate-type = ["cdylib", "lib"]\n'))),(0,r.kt)(o.Z,{value:"Rust client",label:"Rust client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "cli-program-template"\nversion = "0.1.5"\nedition = "2018"\nlicense = "WTFPL"\npublish = false\n\n[dependencies]\nborsh = "0.9.0"\nclap = "2.33.3"\nlazy_static = "1.4.0"\nserde = { version = "1.0.125", features = ["derive"] }\nserde_yaml = "0.8.17"\nsol-template-shared = {path = "shared"}\nsolana-clap-utils = "1.8.2"\nsolana-cli-config = "1.8.2"\nsolana-client = "1.8.2"\nsolana-logger = "1.8.2"\nsolana-remote-wallet = "1.8.2"\nsolana-sdk = "1.8.2"\ntokio = { version = "1", features = ["full"] }\n\n[workspace]\nmembers = [\n    "program",\n    "shared",\n]\n[dev-dependencies]\nlazy_static = "1.4.0"\nsolana-validator = "1.8.2"\nsolana-streamer = "1.8.2"\n'))),(0,r.kt)(o.Z,{value:"node client",label:"node client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "ts-program-template",\n  "version": "0.1.0",\n  "description": "Sample TS App",\n  "main": "client/nmain.ts",\n  "author": "",\n  "keywords": [],\n  "workspace": "client/",\n  "repository": {\n    "type": "git",\n    "url": "https: //github.com/hashblock/solana-cli-program-template"\n  },\n  "homepage": "https: //github.com/hashblock/solana-cli-program-template",\n  "scripts": {\n    "test:all": "npm run build:client && npm run test:client",\n    "build:client": "rm -rf ./.dist/client && tsc ",\n    "start": "node ./node_modules/.bin/mocha .dist/client/main.js",\n    "test:client": "npm run start",\n    "lint": "eslint --ext .ts client/* && prettier --check \\"client/**/*.ts\\"",\n    "lint:fix": "eslint --ext .ts client/* --fix",\n    "pretty": "prettier --write \'{,client/**/}*.ts\'"\n  },\n  "devDependencies": {\n    "@tsconfig/recommended": "^1.0.1",\n    "@types/chai": "^4.3.0",\n    "@types/eslint": "^7.28.2",\n    "@types/eslint-plugin-prettier": "^3.1.0",\n    "@types/mkdirp": "^1.0.2",\n    "@types/mocha": "^9.0.0",\n    "@types/prettier": "^2.4.1",\n    "@typescript-eslint/eslint-plugin": "^5.6.0",\n    "@typescript-eslint/parser": "^5.6.0",\n    "chai": "^4.3.4",\n    "eslint": "^8.2.0",\n    "eslint-config-google": "^0.14.0",\n    "eslint-config-prettier": "^8.3.0",\n    "eslint-plugin-prettier": "^4.0.0",\n    "html-webpack-plugin": "^5.5.0",\n    "mocha": "^9.1.3",\n    "prettier": "^2.4.1",\n    "start-server-and-test": "^1.14.0",\n    "ts-node": "^10.4.0",\n    "typescript": "^4.5.2"\n  },\n  "dependencies": {\n    "@solana/web3.js": "^1.31.0",\n    "borsh": "^0.7.0",\n    "env": "^0.0.2",\n    "fs": "^0.0.1-security",\n    "mkdirp": "^1.0.4",\n    "npm-check-updates": "^12.0.3",\n    "sync-request": "^6.1.0",\n    "update": "^0.4.2"\n  }\n}\n'))),(0,r.kt)(o.Z,{value:"python client",label:"python client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"borsh-construct==0.1.0\nsolana==0.20.0\n")))),(0,r.kt)("h2",{id:"\u5982\u4f55\u5e8f\u5217\u5316\u5ba2\u6237\u7aef\u4e0a\u7684\u6307\u4ee4\u6570\u636e"},"\u5982\u4f55\u5e8f\u5217\u5316\u5ba2\u6237\u7aef\u4e0a\u7684\u6307\u4ee4\u6570\u636e"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(99319).Z,width:"3263",height:"713"})),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u8981\u5c06\u51fa\u7ad9\u6307\u4ee4\u6570\u636e\u5e8f\u5217\u5316\u5e76\u53d1\u9001\u7ed9\u7a0b\u5e8f\uff0c\u5b83\u5fc5\u987b\u4e0e\u7a0b\u5e8f\u53cd\u5e8f\u5217\u5316\u5165\u7ad9\u6307\u4ee4\u6570\u636e\u7684\u65b9\u5f0f\u4fdd\u6301\u4e00\u81f4\u3002"),(0,r.kt)("p",null,"\u5728\u6b64\u6a21\u677f\u4e2d\uff0c\u6307\u4ee4\u6570\u636e\u5757\u662f\u4e00\u4e2a\u5305\u542b\u5e8f\u5217\u5316\u6570\u7ec4\u7684\u6570\u636e\u5757\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Instruction (Variant index)"),(0,r.kt)("th",{parentName:"tr",align:null},"Serialized Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Serialized Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Initialize (0)"),(0,r.kt)("td",{parentName:"tr",align:null},"not applicable for instruction"),(0,r.kt)("td",{parentName:"tr",align:null},"not applicable for instruction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mint (1)"),(0,r.kt)("td",{parentName:"tr",align:null},'"foo"'),(0,r.kt)("td",{parentName:"tr",align:null},'"bar"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Transfer (2)"),(0,r.kt)("td",{parentName:"tr",align:null},'"foo"'),(0,r.kt)("td",{parentName:"tr",align:null},"not applicable for instruction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Burn (2)"),(0,r.kt)("td",{parentName:"tr",align:null},'"foo"'),(0,r.kt)("td",{parentName:"tr",align:null},"not applicable for instruction")))),(0,r.kt)("p",null,"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u7a0b\u5e8f\u62e5\u6709\u7684\u8d26\u6237\u5df2\u7ecf\u521d\u59cb\u5316\u5b8c\u6210\u3002"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts client",label:"ts client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Include borsh functionality\n\nimport { serialize, deserialize, deserializeUnchecked } from "borsh";\nimport { Buffer } from "buffer";\n\n// Get Solana\nimport {\n  Keypair,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  sendAndConfirmTransaction,\n} from "@solana/web3.js";\n\n// Flexible class that takes properties and imbues them\n// to the object instance\nclass Assignable {\n  constructor(properties) {\n    Object.keys(properties).map((key) => {\n      return (this[key] = properties[key]);\n    });\n  }\n}\n\n// Our instruction payload vocabulary\nclass Payload extends Assignable {}\n\n// Borsh needs a schema describing the payload\nconst payloadSchema = new Map([\n  [\n    Payload,\n    {\n      kind: "struct",\n      fields: [\n        ["id", "u8"],\n        ["key", "string"],\n        ["value", "string"],\n      ],\n    },\n  ],\n]);\n\n// Instruction variant indexes\nenum InstructionVariant {\n  InitializeAccount = 0,\n  MintKeypair,\n  TransferKeypair,\n  BurnKeypair,\n}\n\n/**\n * Mint a key value pair to account\n * @param {Connection} connection - Solana RPC connection\n * @param {PublicKey} progId - Sample Program public key\n * @param {PublicKey} account - Target program owned account for Mint\n * @param {Keypair} wallet - Wallet for signing and payment\n * @param {string} mintKey - The key being minted key\n * @param {string} mintValue - The value being minted\n * @return {Promise<Keypair>} - Keypair\n */\n\nexport async function mintKV(\n  connection: Connection,\n  progId: PublicKey,\n  account: PublicKey,\n  wallet: Keypair,\n  mintKey: string,\n  mintValue: string\n): Promise<string> {\n  // Construct the payload\n  const mint = new Payload({\n    id: InstructionVariant.MintKeypair,\n    key: mintKey, // \'ts key\'\n    value: mintValue, // \'ts first value\'\n  });\n\n  // Serialize the payload\n  const mintSerBuf = Buffer.from(serialize(payloadSchema, mint));\n  // console.log(mintSerBuf)\n  // => <Buffer 01 06 00 00 00 74 73 20 6b 65 79 0e 00 00 00 74 73 20 66 69 72 73 74 20 76 61 6c 75 65>\n  // let mintPayloadCopy = deserialize(schema, Payload, mintSerBuf)\n  // console.log(mintPayloadCopy)\n  // => Payload { id: 1, key: \'ts key\', value: \'ts first value\' }\n\n  // Create Solana Instruction\n  const instruction = new TransactionInstruction({\n    data: mintSerBuf,\n    keys: [\n      { pubkey: account, isSigner: false, isWritable: true },\n      { pubkey: wallet.publicKey, isSigner: false, isWritable: false },\n    ],\n    programId: progId,\n  });\n\n  // Send Solana Transaction\n  const transactionSignature = await sendAndConfirmTransaction(\n    connection,\n    new Transaction().add(instruction),\n    [wallet],\n    {\n      commitment: "singleGossip",\n      preflightCommitment: "singleGossip",\n    }\n  );\n  console.log("Signature = ", transactionSignature);\n  return transactionSignature;\n}\n'))),(0,r.kt)(o.Z,{value:"rust client",label:"rust client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Instruction payload gets serialized\n#[derive(BorshSerialize)]\npub struct Payload<\'a> {\n    variant: u8,\n    key: &\'a str,\n    value: &\'a str,\n}\n\n/// Perform a mint transaction consisting of a key/value pair\n/// See submit_transaction below\npub fn mint_transaction(\n    rpc_client: &RpcClient,\n    accounts: &[AccountMeta],\n    wallet_signer: &dyn Signer,\n    mint_key: &str,\n    mint_value: &str,\n    mint_instruction_id: u8,\n    commitment_config: CommitmentConfig,\n) -> Result<Signature, Box<dyn std::error::Error>> {\n    // Setup the payload. `mint_instruction_id` is instruction variant index = 1\n    let data = Payload<`_> {\n        variant: mint_instruction_id,\n        key: mint_key,\n        value: mint_value,\n    };\n    let instruction = Instruction::new_with_borsh(PROG_KEY.pubkey(), &data, accounts.to_vec());\n    submit_transaction(rpc_client, wallet_signer, instruction, commitment_config)\n}\n\n/// Submits the program instruction as per the\n/// instruction definition\npub fn submit_transaction(\n    rpc_client: &RpcClient,\n    wallet_signer: &dyn Signer,\n    instruction: Instruction,\n    commitment_config: CommitmentConfig,\n) -> Result<Signature, Box<dyn std::error::Error>> {\n    let mut transaction =\n        Transaction::new_unsigned(Message::new(&[instruction], Some(&wallet_signer.pubkey())));\n    let (recent_blockhash, _fee_calculator) = rpc_client\n        .get_recent_blockhash()\n        .map_err(|err| format!("error: unable to get recent blockhash: {}", err))?;\n    transaction\n        .try_sign(&vec![wallet_signer], recent_blockhash)\n        .map_err(|err| format!("error: failed to sign transaction: {}", err))?;\n    let signature = rpc_client\n        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)\n        .map_err(|err| format!("error: send transaction: {}", err))?;\n    Ok(signature)\n}\n'))),(0,r.kt)(o.Z,{value:"python client",label:"python client",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from borsh_construct import String, CStruct, U8\nfrom enum import IntEnum\nfrom solana.transaction import Transaction\nfrom solders.pubkey import Pubkey\nfrom solders.keypair import Keypair\nfrom solders.instruction import Instruction, AccountMeta\nfrom solders.rpc.responses import SendTransactionResp\nfrom solana.rpc.api import Client\n\n\n# Instruction variants for target program\nclass InstructionVariant(IntEnum):\n    INITIALIZE = 0\n    MINT = 1\n    TRANSFER = 2\n    BURN = 3\n\n\n# Schema for sending instructionVariants to on-chain sample program\npayload_schema = CStruct("id" / U8, "key" / String, "value" / String)\n\n\ndef construct_payload(instruction_variant: InstructionVariant, key: str, value: str):\n    """Generate a serialized instructionVariant"""\n    return payload_schema.build({"id": instruction_variant, "key": key, "value": value})\n\n\ndef mint_kv(\n    client: Client,\n    program_pk: Pubkey,\n    account_pk: Pubkey,\n    wallet_kp: Keypair,\n    mint_key: str,\n    mint_value: str,\n) -> SendTransactionResp:\n    """Mint with a key/value pair to an account"""\n    # Construct the program payload for Mint invariant\n    payload_ser = construct_payload(InstructionVariant.MINT, mint_key, mint_value)\n\n    # print(payload_ser)\n    # => b\'\\x01\\n\\x00\\x00\\x00python key\\x0c\\x00\\x00\\x00python value\'\n    # mint_payload_copy = payload_schema.parse(payload_ser)\n    # print(mint_payload_copy)\n    # => Container:\n    # =>     initialized = 1\n    # =>     key = u\'python key\' (total 10)\n    # =>     value = u\'python value\' (total 12)\n\n    # Construct the transaction with instructionVariant\n    txn = Transaction().add(\n        Instruction(\n            accounts=[AccountMeta(account_pk, False, True)], program_id=program_pk, data=payload_ser\n        )\n    )\n    return client.send_transaction(txn, wallet_kp)\n    # => {\'jsonrpc\': \'2.0\', \'result\': \'4ZdpWNdovdVaLextWSiqEBWp67k9rNTTUaX3qviHDXWY9c98bVtaRt5sasPhYzMVXHqhex78gzNKytcBnVH5CSTZ\', \'id\': 2}\n')))),(0,r.kt)("h2",{id:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"},"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Deserialize Instruction Data",src:t(92083).Z,width:"3263",height:"713"})),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"rust",label:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"//! instruction Contains the main ProgramInstruction enum\n\nuse {\n    crate::error::SampleError, borsh::BorshDeserialize, solana_program::program_error::ProgramError,\n};\n\n#[derive(Debug, PartialEq)]\n/// All custom program instructions\npub enum ProgramInstruction {\n    InitializeAccount,\n    MintToAccount { key: String, value: String },\n    TransferBetweenAccounts { key: String },\n    BurnFromAccount { key: String },\n    MintToAccountWithFee { key: String, value: String },\n    TransferBetweenAccountsWithFee { key: String },\n    BurnFromAccountWithFee { key: String },\n}\n\n/// Generic Payload Deserialization\n#[derive(BorshDeserialize, Debug)]\nstruct Payload {\n    variant: u8,\n    arg1: String,\n    arg2: String,\n}\n\nimpl ProgramInstruction {\n    /// Unpack inbound buffer to associated Instruction\n    /// The expected format for input is a Borsh serialized vector\n    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {\n        let payload = Payload::try_from_slice(input).unwrap();\n        match payload.variant {\n            0 => Ok(ProgramInstruction::InitializeAccount),\n            1 => Ok(Self::MintToAccount {\n                key: payload.arg1,\n                value: payload.arg2,\n            }),\n            2 => Ok(Self::TransferBetweenAccounts { key: payload.arg1 }),\n            3 => Ok(Self::BurnFromAccount { key: payload.arg1 }),\n            4 => Ok(Self::MintToAccountWithFee {\n                key: payload.arg1,\n                value: payload.arg2,\n            }),\n            5 => Ok(Self::TransferBetweenAccountsWithFee { key: payload.arg1 }),\n            6 => Ok(Self::BurnFromAccountWithFee { key: payload.arg1 }),\n            _ => Err(SampleError::DeserializationFailure.into()),\n        }\n    }\n}\n")))),(0,r.kt)("h2",{id:"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"},"\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Account Data Serialization",src:t(66470).Z,width:"3263",height:"713"})),(0,r.kt)("p",null,"\u7a0b\u5e8f\u8d26\u6237\u6570\u636e\u5757\uff08\u6765\u81ea\u793a\u4f8b\u4ed3\u5e93\uff09\u7684\u5e03\u5c40\u5982\u4e0b\uff1a"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Byte 0"),(0,r.kt)("th",{parentName:"tr",align:null},"Bytes 1-4"),(0,r.kt)("th",{parentName:"tr",align:null},"Remaining Byte up to 1019"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Initialized flag"),(0,r.kt)("td",{parentName:"tr",align:null},"length of serialized BTreeMap"),(0,r.kt)("td",{parentName:"tr",align:null},"BTreeMap (where key value pairs are stored)")))),(0,r.kt)("h3",{id:"pack"},"Pack"),(0,r.kt)("p",null,"\u5173\u4e8e ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/solana-labs/solana/blob/22a18a68e3ee68ae013d647e62e12128433d7230/sdk/program/src/program_pack.rs"},"Pack")," trait"),(0,r.kt)("p",null,"\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u9690\u85cf\u8d26\u6237\u6570\u636e\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u7ec6\u8282\uff0c\u4f7f\u4f60\u7684\u6838\u5fc3\u7a0b\u5e8f\u6307\u4ee4\u5904\u7406\u4ee3\u7801\u66f4\u7b80\u6d01\u3002\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u5c06\u6240\u6709\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u903b\u8f91\u653e\u5728\u7a0b\u5e8f\u5904\u7406\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5c01\u88c5\u5728\u4ee5\u4e0b\u4e09\u4e2a\u51fd\u6570\u4e2d\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"unpack_unchecked")," - \u5141\u8bb8\u4f60\u5bf9\u8d26\u6237\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u800c\u65e0\u9700\u68c0\u67e5\u5b83\u662f\u5426\u5df2\u88ab\u521d\u59cb\u5316\u3002\u5f53\u5b9e\u9645\u5904\u7406\u521d\u59cb\u5316\u51fd\u6570\uff08\u53d8\u4f53\u7d22\u5f15\u4e3a0\uff09\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"unpack")," - \u8c03\u7528\u4f60\u7684Pack\u5b9e\u73b0\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"unpack_from_slice"),"\u51fd\u6570\uff0c\u5e76\u68c0\u67e5\u8d26\u6237\u662f\u5426\u5df2\u88ab\u521d\u59cb\u5316\u3002"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"pack")," - \u8c03\u7528\u60a8\u7684Pack\u5b9e\u73b0\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"pack_into_slice"),"\u51fd\u6570\u3002")),(0,r.kt)("p",null,"\u4e0b\u9762\u662f\u6211\u4eec\u793a\u4f8b\u7a0b\u5e8f\u7684Pack trait\u5b9e\u73b0\u3002\u968f\u540e\u662f\u4f7f\u7528Borsh\u8fdb\u884c\u8d26\u6237\u6570\u636e\u5904\u7406\u7684\u793a\u4f8b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"//! @brief account_state manages account data\n\nuse crate::error::SampleError;\nuse sol_template_shared::ACCOUNT_STATE_SPACE;\nuse solana_program::{\n    entrypoint::ProgramResult,\n    program_error::ProgramError,\n    program_pack::{IsInitialized, Pack, Sealed},\n};\nuse std::collections::BTreeMap;\n\n/// Maintains global accumulator\n#[derive(Debug, Default, PartialEq)]\npub struct ProgramAccountState {\n    is_initialized: bool,\n    btree_storage: BTreeMap<String, String>,\n}\n\nimpl ProgramAccountState {\n    /// Returns indicator if this account has been initialized\n    pub fn set_initialized(&mut self) {\n        self.is_initialized = true;\n    }\n    /// Adds a new key/value pair to the account\n    pub fn add(&mut self, key: String, value: String) -> ProgramResult {\n        match self.btree_storage.contains_key(&key) {\n            true => Err(SampleError::KeyAlreadyExists.into()),\n            false => {\n                self.btree_storage.insert(key, value);\n                Ok(())\n            }\n        }\n    }\n    /// Removes a key from account and returns the keys value\n    pub fn remove(&mut self, key: &str) -> Result<String, SampleError> {\n        match self.btree_storage.contains_key(key) {\n            true => Ok(self.btree_storage.remove(key).unwrap()),\n            false => Err(SampleError::KeyNotFoundInAccount),\n        }\n    }\n}\n\nimpl Sealed for ProgramAccountState {}\n\n// Pack expects the implementation to satisfy whether the\n// account is initialzed.\nimpl IsInitialized for ProgramAccountState {\n    fn is_initialized(&self) -> bool {\n        self.is_initialized\n    }\n}\n\nimpl Pack for ProgramAccountState {\n    const LEN: usize = ACCOUNT_STATE_SPACE;\n\n    /// Store 'state' of account to its data area\n    fn pack_into_slice(&self, dst: &mut [u8]) {\n        sol_template_shared::pack_into_slice(self.is_initialized, &self.btree_storage, dst);\n    }\n\n    /// Retrieve 'state' of account from account data area\n    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {\n        match sol_template_shared::unpack_from_slice(src) {\n            Ok((is_initialized, btree_map)) => Ok(ProgramAccountState {\n                is_initialized,\n                btree_storage: btree_map,\n            }),\n            Err(_) => Err(ProgramError::InvalidAccountData),\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316"},"\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316"),(0,r.kt)("p",null,"\u4e3a\u4e86\u5b8c\u6210\u5e95\u5c42\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sol_template_shared::pack_into_slice")," - \u8fdb\u884c\u5e8f\u5217\u5316\u7684\u5730\u65b9"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"sol_template_shared::unpack_from_slice")," - \u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u7684\u5730\u65b9")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bf7\u5173\u6ce8")," \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"BTREE_LENGTH"),"\u7684\u6570\u636e\u5e03\u5c40\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"BTREE_STORAGE"),"\u4e4b\u524d\u6709\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),"\uff084\u5b57\u8282\uff09\u7684\u5206\u533a\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e2d\uff0cborsh\u4f1a\u68c0\u67e5\u60a8\u6b63\u5728\u53cd\u5e8f\u5217\u5316\u7684\u5207\u7247\u7684\u957f\u5ea6\u662f\u5426\u4e0e\u5b83\u5b9e\u9645\u8bfb\u53d6\u7684\u6570\u636e\u91cf\u4e00\u81f4\uff0c\u7136\u540e\u624d\u8fdb\u884c\u5bf9\u8c61\u7684\u91cd\u7ec4\u3002\u4e0b\u9762\u6f14\u793a\u7684\u65b9\u6cd5\u9996\u5148\u8bfb\u53d6",(0,r.kt)("inlineCode",{parentName:"p"},"BTREE_LENGTH"),"\uff0c\u4ee5\u83b7\u53d6\u8981\u4ece",(0,r.kt)("inlineCode",{parentName:"p"},"BTREE_STORAGE"),"\u6307\u9488\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"slice"),"\u7684\u5927\u5c0f\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use {\n    arrayref::*,\n    borsh::{BorshDeserialize, BorshSerialize},\n    solana_program::program_memory::sol_memcpy,\n    std::{collections::BTreeMap, error::Error},\n};\n\n/// Initialization flag size for account state\npub const INITIALIZED_BYTES: usize = 1;\n/// Storage for the serialized size of the BTreeMap control\npub const BTREE_LENGTH: usize = 4;\n/// Storage for the serialized BTreeMap container\npub const BTREE_STORAGE: usize = 1019;\n/// Sum of all account state lengths\npub const ACCOUNT_STATE_SPACE: usize = INITIALIZED_BYTES + BTREE_LENGTH + BTREE_STORAGE;\n\n/// Packs the initialized flag and data content into destination slice\n#[allow(clippy::ptr_offset_with_cast)]\npub fn pack_into_slice(\n    is_initialized: bool,\n    btree_storage: &BTreeMap<String, String>,\n    dst: &mut [u8],\n) {\n    let dst = array_mut_ref![dst, 0, ACCOUNT_STATE_SPACE];\n    // Setup pointers to key areas of account state data\n    let (is_initialized_dst, data_len_dst, data_dst) =\n        mut_array_refs![dst, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];\n    // Set the initialized flag\n    is_initialized_dst[0] = is_initialized as u8;\n    // Store the core data length and serialized content\n    let keyval_store_data = btree_storage.try_to_vec().unwrap();\n    let data_len = keyval_store_data.len();\n    if data_len < BTREE_STORAGE {\n        data_len_dst[..].copy_from_slice(&(data_len as u32).to_le_bytes());\n        sol_memcpy(data_dst, &keyval_store_data, data_len);\n    } else {\n        panic!();\n    }\n}\n\n/// Unpacks the data from slice and return the initialized flag and data content\n#[allow(clippy::ptr_offset_with_cast)]\npub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {\n    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];\n    // Setup pointers to key areas of account state data\n    let (is_initialized_src, data_len_src, data_src) =\n        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];\n\n    let is_initialized = match is_initialized_src {\n        [0] => false,\n        [1] => true,\n        _ => {\n            return Err(Box::<dyn Error>::from(format!(\n                "unrecognized initialization flag \\"{:?}\\". in account",\n                is_initialized_src\n            )))\n        }\n    };\n    // Get current size of content in data area\n    let data_len = u32::from_le_bytes(*data_len_src) as usize;\n    // If emptry, create a default\n    if data_len == 0 {\n        Ok((is_initialized, BTreeMap::<String, String>::new()))\n    } else {\n        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();\n        Ok((is_initialized, data_dser))\n    }\n}\n')),(0,r.kt)("h3",{id:"\u7528\u6cd5"},"\u7528\u6cd5"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u5c06\u6240\u6709\u5185\u5bb9\u6574\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u6f14\u793a\u4e86\u7a0b\u5e8f\u4e0e",(0,r.kt)("inlineCode",{parentName:"p"},"ProgramAccountState"),"\u7684\u4ea4\u4e92\uff0c\u5176\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"ProgramAccountState"),"\u5c01\u88c5\u4e86\u521d\u59cb\u5316\u6807\u5fd7\u4ee5\u53ca\u5e95\u5c42\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"BTreeMap"),"\u7528\u4e8e\u5b58\u50a8\u952e\u503c\u5bf9\u3002"),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u5f53\u6211\u4eec\u60f3\u8981\u521d\u59cb\u5316\u4e00\u4e2a\u5168\u65b0\u7684\u8d26\u6237\u65f6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Initialize a new program account, which is the first in AccountInfo array\nfn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {\n    msg!("Initialize account");\n    let account_info_iter = &mut accounts.iter();\n    let program_account = next_account_info(account_info_iter)?;\n    let mut account_data = program_account.data.borrow_mut();\n    // Here we use unpack_unchecked as we have yet to initialize\n    // Had we tried to use unpack it would fail because, well, chicken and egg\n    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;\n    // We double check that we haven\'t already initialized this accounts data\n    // more than once. If we are good, we set the initialized flag\n    if account_state.is_initialized() {\n        return Err(SampleError::AlreadyInitializedState.into());\n    } else {\n        account_state.set_initialized();\n    }\n    // Finally, we store back to the accounts space\n    ProgramAccountState::pack(account_state, &mut account_data).unwrap();\n    Ok(())\n}\n')),(0,r.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u5176\u4ed6\u6307\u4ee4\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u6307\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u952e\u503c\u5bf9\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Mint a key/pair to the programs account, which is the first in accounts\nfn mint_keypair_to_account(accounts: &[AccountInfo], key: String, value: String) -> ProgramResult {\n    msg!("Mint to account");\n    let account_info_iter = &mut accounts.iter();\n    let program_account = next_account_info(account_info_iter)?;\n    let mut account_data = program_account.data.borrow_mut();\n    // Unpacking an uninitialized account state will fail\n    let mut account_state = ProgramAccountState::unpack(&account_data)?;\n    // Add the key value pair to the underlying BTreeMap\n    account_state.add(key, value)?;\n    // Finally, serialize back to the accounts data\n    ProgramAccountState::pack(account_state, &mut account_data)?;\n    Ok(())\n}\n')),(0,r.kt)("h2",{id:"\u5982\u4f55\u5728\u5ba2\u6237\u7aef\u4e2d\u53cd\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"},"\u5982\u4f55\u5728\u5ba2\u6237\u7aef\u4e2d\u53cd\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"),(0,r.kt)("p",null,"\u5ba2\u6237\u7aef\u53ef\u4ee5\u8c03\u7528Solana\u6765\u83b7\u53d6\u7a0b\u5e8f\u6240\u62e5\u6709\u7684\u8d26\u6237\uff0c\u5176\u4e2d\u5e8f\u5217\u5316\u7684\u6570\u636e\u5757\u662f\u8fd4\u56de\u7ed3\u679c\u7684\u4e00\u90e8\u5206\u3002\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u9700\u8981\u4e86\u89e3\u6570\u636e\u5757\u7684\u5e03\u5c40\u3002"),(0,r.kt)("p",null,"\u8d26\u6237\u6570\u636e\u7684\u5e03\u5c40\u5728",(0,r.kt)("a",{parentName:"p",href:"#account-data-serialization"},"\u8fd9\u91cc"),"\u5df2\u7ecf\u88ab\u63cf\u8ff0\u4e86\u3002"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"rust",label:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use {\n    arrayref::*,\n    borsh::{BorshDeserialize, BorshSerialize},\n    std::{collections::BTreeMap, error::Error},\n};\n\n#[allow(clippy::ptr_offset_with_cast)]\npub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {\n    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];\n    // Setup pointers to key areas of account state data\n    let (is_initialized_src, data_len_src, data_src) =\n        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];\n\n    let is_initialized = match is_initialized_src {\n        [0] => false,\n        [1] => true,\n        _ => {\n            return Err(Box::<dyn Error>::from(format!(\n                "unrecognized initialization flag \\"{:?}\\". in account",\n                is_initialized_src\n            )))\n        }\n    };\n    // Get current size of content in data area\n    let data_len = u32::from_le_bytes(*data_len_src) as usize;\n    // If emptry, create a default\n    if data_len == 0 {\n        Ok((is_initialized, BTreeMap::<String, String>::new()))\n    } else {\n        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();\n        Ok((is_initialized, data_dser))\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from borsh_construct import CStruct, U8, U32, HashMap, String\nfrom solana.rpc.commitment import Confirmed\nfrom solders.pubkey import Pubkey\nfrom solana.rpc.api import Client\n\n\n# Schema to deserialize program's account data\naccount_schema = CStruct(\n    \"initialized\" / U8,\n    \"map_length\" / U32,\n    \"map\" / HashMap(String, String)\n)\n\n\ndef get_account_info(client: Client, account_pk: Pubkey):\n    \"\"\"Fetch account information from RPC, parse out the data and deserialize\"\"\"\n    res = client.get_account_info(account_pk, Confirmed, encoding='base64')\n    return account_schema.parse(res.value.data)\n\n# Results in or similar\n# => Container:\n# =>     initialized = 1\n# =>     map_length = 109\n# =>     map = {'Happy': 'New Year!', 'newKey': 'A new value',\n# =>            'python key': 'python value', 'ts key': 'ts first value'}\n"))),(0,r.kt)(o.Z,{value:"typescript",label:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { serialize, deserialize, deserializeUnchecked } from "borsh";\nimport { Buffer } from "buffer";\nimport {\n  Keypair,\n  AccountMeta,\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  sendAndConfirmTransaction,\n} from "@solana/web3.js";\n\n// Flexible class that takes properties and imbues them\n// to the object instance\nclass Assignable {\n  constructor(properties) {\n    Object.keys(properties).map((key) => {\n      return (this[key] = properties[key]);\n    });\n  }\n}\n\nexport class AccoundData extends Assignable {}\n\nconst dataSchema = new Map([\n  [\n    AccoundData,\n    {\n      kind: "struct",\n      fields: [\n        ["initialized", "u8"],\n        ["tree_length", "u32"],\n        ["map", { kind: "map", key: "string", value: "string" }],\n      ],\n    },\n  ],\n]);\n\n/**\n * Fetch program account data\n * @param {Connection} connection - Solana RPC connection\n * @param {PublicKey} account - Public key for account whose data we want\n * @return {Promise<AccoundData>} - Keypair\n */\nexport async function getAccountData(\n  connection: Connection,\n  account: PublicKey\n): Promise<AccoundData> {\n  let nameAccount = await connection.getAccountInfo(account, "processed");\n  return deserializeUnchecked(dataSchema, AccoundData, nameAccount.data);\n}\n')))),(0,r.kt)("h2",{id:"solana-tsjs-\u5e38\u7528\u6620\u5c04"},"Solana TS/JS \u5e38\u7528\u6620\u5c04"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#resources"},"Borsh Specification"),"\u4e2d\u5305\u542b\u4e86\u5927\u591a\u6570\u57fa\u672c\u548c\u590d\u5408\u6570\u636e\u7c7b\u578b\u7684\u6620\u5c04\u5173\u7cfb\u3002"),(0,r.kt)("p",null,"\u5728TS/JS\u548cPython\u4e2d\uff0c\u5173\u952e\u662f\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u9002\u5f53\u5b9a\u4e49\u7684Borsh\u6a21\u5f0f\uff0c\u4ee5\u4fbf\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u53ef\u4ee5\u751f\u6210\u6216\u904d\u5386\u76f8\u5e94\u7684\u8f93\u5165\u3002"),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5728Typescript\u4e2d\u5bf9\u57fa\u672c\u7c7b\u578b\uff08\u6570\u5b57\u3001\u5b57\u7b26\u4e32\uff09\u548c\u590d\u5408\u7c7b\u578b\uff08\u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\u3001Map\uff09\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u7136\u540e\u5728Python\u4e2d\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u6700\u540e\u5728Rust\u4e2d\u8fdb\u884c\u7b49\u6548\u7684\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\uff1a"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"rust",label:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {}\n\n#[cfg(test)]\nmod tests {\n    use borsh::{BorshDeserialize, BorshSerialize};\n    use std::collections::BTreeMap;\n\n    #[test]\n    fn primitives() {\n        let prim = [\n            255u8, 255, 255, 255, 255, 255, 255, 5, 0, 0, 0, 104, 101, 108, 108, 111, 5, 0, 0, 0,\n            119, 111, 114, 108, 100, 1, 2, 3, 4, 5, 2, 0, 0, 0, 8, 0, 0, 0, 99, 111, 111, 107, 98,\n            111, 111, 107, 6, 0, 0, 0, 114, 101, 99, 105, 112, 101, 6, 0, 0, 0, 114, 101, 99, 105,\n            112, 101, 10, 0, 0, 0, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116,\n        ];\n        #[derive(BorshDeserialize, BorshSerialize, Debug)]\n        struct Primitive(\n            u8,\n            u16,\n            u32,\n            String,\n            String,\n            [u8; 5],\n            BTreeMap<String, String>,\n        );\n        let x = Primitive::try_from_slice(&prim).unwrap();\n        println!("{:?}", x);\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from borsh_construct import U8, U16, U32, String, HashMap\n\n# Schema to deserialize various types\nprimitive_schema = CStruct(\n        "U8" / U8,\n        "U16" / U16,\n        "U32" / U32,\n        "FIXED_STRING_ARRAY" / String[2],\n        "FIXED_U8_ARRAY" / U8[5],\n        "MAP_STRING_STRING" / HashMap(String, String)\n)\n\n\ndef common():\n    mapping = {"cookbook": "recipe", "recipe": "ingredient"}\n\n    # Serialize\n    dser = primitive_schema.build({\n        \'U8\': 255,\n        \'U16\': 65535,\n        \'U32\': 4294967295,\n        "FIXED_STRING_ARRAY": [\'hello\', \'world\'],\n        "FIXED_U8_ARRAY": [1, 2, 3, 4, 5],\n        "MAP_STRING_STRING": mapping})\n    print(dser)\n    # => b\'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x05\\x00\\x00\\x00hello\\x05\\x00\\x00\\x00world\\x01\\x02\\x03\\x04\\x05\\x02\\x00\\x00\\x00\\x08\\x00\\x00\\x00cookbook\\x06\\x00\\x00\\x00recipe\\x06\\x00\\x00\\x00recipe\\n\\x00\\x00\\x00ingredient\'\n    # Deserialize\n    new_value = primitive_schema.parse(dser)\n    # Viola\n    print(new_value)\n    # => Container:\n    # =>    U8 = 255\n    # =>    U16 = 65535\n    # =>    U32 = 4294967295\n    # =>    FIXED_STRING_ARRAY = ListContainer:\n    # =>        hello\n    # =>        world\n    # =>    FIXED_U8_ARRAY = ListContainer:\n    # =>        1\n    # =>        2\n    # =>        3\n    # =>        4\n    # =>        5\n    # =>    MAP_STRING_STRING = {\'cookbook\': \'recipe\', \'recipe\': \'ingredient\'}\n'))),(0,r.kt)(o.Z,{value:"typescript",label:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'#!/usr/bin/env node\n\nimport { serialize, deserialize, deserializeUnchecked } from "borsh";\nimport { Buffer } from "buffer";\nimport { expect } from "chai";\nimport { PublicKey, Struct } from "@solana/web3.js";\n\n/**\n * Primitive extends the Struct type from Solana Library\n * for convenience of dynamic property setting\n * @extends {Struct} Solana JS Struct class\n */\n\nclass Primitive extends Struct {\n  constructor(properties) {\n    super(properties);\n  }\n}\n\n/**\n * Entry point for script *\n */\nasync function entry() {\n  // Emulate BTreeMap\n  let map = new Map();\n  map.set("cookbook", "recipe");\n  map.set("recipe", "ingredient");\n\n  // Setup a Primitive for all basic and a few\n  // compound types\n  const value = new Primitive({\n    U8: 255,\n    U16: 65535,\n    U32: 4294967295,\n    FIXED_STRING_ARRAY: ["hello", "world"],\n    FIXED_U8_ARRAY: [1, 2, 3, 4, 5],\n    MAP_STRING_STRING: map,\n  });\n  // Define our schema\n  const schema = new Map([\n    [\n      Primitive,\n      {\n        kind: "struct",\n        fields: [\n          ["U8", "u8"],\n          ["U16", "u16"],\n          ["U32", "u32"],\n          ["FIXED_STRING_ARRAY", ["string", 2]],\n          ["FIXED_U8_ARRAY", ["u8", 5]],\n          [\n            "MAP_STRING_STRING",\n            { kind: "map", key: "string", value: "string" },\n          ],\n        ],\n      },\n    ],\n  ]);\n  console.log("Value = ", value);\n  // Serialize then deserialize\n  const dser = Buffer.from(serialize(schema, value));\n  console.log(dser);\n  const newValue = deserialize(schema, Primitive, dser);\n  // Viola!\n  console.log("New value = ", newValue);\n  console.log("Fixed string array = ", newValue["FIXED_STRING_ARRAY"]);\n  console.log("Fixed u8 array = ", newValue["FIXED_U8_ARRAY"]);\n  console.log("Map = ", newValue["MAP_STRING_STRING"]);\n}\n\nentry();\n')))),(0,r.kt)("h2",{id:"\u9ad8\u7ea7\u6784\u9020"},"\u9ad8\u7ea7\u6784\u9020"),(0,r.kt)("p",null,"\u6211\u4eec\u5728\u4e4b\u524d\u7684\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u7b80\u5355\u7684\u8d1f\u8f7d\uff08Payloads\uff09\u3002\u6709\u65f6\uff0cSolana\u4f1a\u4f7f\u7528\u67d0\u4e9b\u7279\u6b8a\u7c7b\u578b\u3002\u672c\u8282\u5c06\u6f14\u793a\u5982\u4f55\u6b63\u786e\u6620\u5c04TS/JS\u548cRust\u4e4b\u95f4\u7684\u7c7b\u578b\uff0c\u4ee5\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u3002"),(0,r.kt)("h3",{id:"coption"},"COption"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'#!/usr/bin/env node\n\nimport { serialize, deserialize, deserializeUnchecked } from "borsh";\nimport { Buffer } from "buffer";\nimport { PublicKey, Struct } from "@solana/web3.js";\n\n/**\n * COption is meant to mirror the\n * `solana_program::options::COption`\n *\n * This type stores a u32 flag (0 | 1) indicating\n * the presence or not of a underlying PublicKey\n *\n * Similar to a Rust Option\n * @extends {Struct} Solana JS Struct class\n * @implements {encode}\n */\nclass COption extends Struct {\n  constructor(properties) {\n    super(properties);\n  }\n\n  /**\n   * Creates a COption from a PublicKey\n   * @param {PublicKey?} akey\n   * @returns {COption} COption\n   */\n  static fromPublicKey(akey?: PublicKey): COption {\n    if (akey == undefined) {\n      return new COption({\n        noneOrSome: 0,\n        pubKeyBuffer: new Uint8Array(32),\n      });\n    } else {\n      return new COption({\n        noneOrSome: 1,\n        pubKeyBuffer: akey.toBytes(),\n      });\n    }\n  }\n  /**\n   * @returns {Buffer} Serialized COption (this)\n   */\n  encode(): Buffer {\n    return Buffer.from(serialize(COPTIONSCHEMA, this));\n  }\n  /**\n   * Safe deserializes a borsh serialized buffer to a COption\n   * @param {Buffer} data - Buffer containing borsh serialized data\n   * @returns {COption} COption object\n   */\n  static decode(data): COption {\n    return deserialize(COPTIONSCHEMA, this, data);\n  }\n\n  /**\n   * Unsafe deserializes a borsh serialized buffer to a COption\n   * @param {Buffer} data - Buffer containing borsh serialized data\n   * @returns {COption} COption object\n   */\n  static decodeUnchecked(data): COption {\n    return deserializeUnchecked(COPTIONSCHEMA, this, data);\n  }\n}\n\n/**\n * Defines the layout of the COption object\n * for serializing/deserializing\n * @type {Map}\n */\nconst COPTIONSCHEMA = new Map([\n  [\n    COption,\n    {\n      kind: "struct",\n      fields: [\n        ["noneOrSome", "u32"],\n        ["pubKeyBuffer", [32]],\n      ],\n    },\n  ],\n]);\n\n/**\n * Entry point for script *\n */\nasync function entry(indata?: PublicKey) {\n  // If we get a PublicKey\n  if (indata) {\n    // Construct COption instance\n    const coption = COption.fromPublicKey(indata);\n    console.log("Testing COption with " + indata.toBase58());\n    // Serialize it\n    let copt_ser = coption.encode();\n    console.log("copt_ser ", copt_ser);\n    // Deserialize it\n    const tdone = COption.decode(copt_ser);\n    console.log(tdone);\n    // Validate contains PublicKey\n    if (tdone["noneOrSome"] == 1) {\n      console.log("pubkey: " + new PublicKey(tdone["pubKeyBuffer"]).toBase58());\n    }\n    /*\n            Output:\n            Testing COption with A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU\n            copt_ser  Buffer(36) [1, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186, 109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 1064, length: 36]\n            COption {noneOrSome: 1, pubKeyBuffer: Uint8Array(32)}\n            pubkey: A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU\n        */\n  } else {\n    console.log("Testing COption with null");\n    // Construct COption instance\n    const coption = COption.fromPublicKey();\n    // Serialize it\n    const copt_ser = coption.encode();\n    console.log(copt_ser);\n    // Deserialize it\n    const tdone1 = COption.decode(copt_ser);\n    console.log(tdone1);\n    // Validate does NOT contains PublicKey\n    if (tdone1["noneOrSome"] == 1) {\n      throw Error("Expected no public key");\n    } else console.log("pubkey: null");\n    /*\n            Output:\n            Testing COption with null\n            Buffer(36)[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 2272, length: 36]\n            COption { noneOrSome: 0, pubKeyBuffer: Uint8Array(32) }\n            pubkey: null\n        */\n  }\n}\n\n// Test with PublicKey\nentry(new PublicKey("A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU"));\nconsole.log("");\n// Test without PublicKey\nentry();\n'))),(0,r.kt)(o.Z,{value:"rust",label:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {}\n\n#[cfg(test)]\nmod tests {\n    use arrayref::{array_ref, array_refs};\n    use solana_program::{program_option::COption, pubkey::Pubkey};\n\n    /// Emulate how COption is \'unpacked\'\n    fn deser_option(data: &[u8]) -> COption<Pubkey> {\n        // Map the data block\n        let ain = array_ref![data, 0, 36];\n        let (base, key) = array_refs![ain, 4, 32];\n        // Get the SOME or NONE u32\n        let nos = u32::from_le_bytes(*base);\n        // Construct the COption accordingly\n        let opt: COption<Pubkey> = if nos == 0 {\n            COption::None\n        } else {\n            COption::Some(Pubkey::new_from_array(*key))\n        };\n        opt\n    }\n    #[test]\n    fn btest() {\n        // From Typescript with borsh\'ing\n        let copt = [\n            1u8, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186,\n            109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35,\n        ];\n        // Emulate COption deserialization\n        let coption = deser_option(&copt);\n        if coption.is_some() {\n            println!("{:?}", coption.expect("Uh-oh"));\n        }\n        // As a Borsh Struct\n        #[derive(BorshDeserialize, BorshSerialize, Debug)]\n        struct TOption(u32, [u8; 32]);\n        let toption = TOption::try_from_slice(&copt).unwrap();\n        let pkey = Pubkey::new_from_array(toption.1);\n        println!("Some = {:?} Pubkey = {:?}", toption.0, pkey);\n    }\n}\n')))),(0,r.kt)("h2",{id:"\u8d44\u6599"},"\u8d44\u6599"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://borsh.io/"},"Borsh Specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/near/borsh-rs"},"Rust Borsh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/near/borsh-js"},"TS/JS Borsh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/near/borsh-construct-py"},"Python Borsh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://near.github.io/borsh-construct-py/"},"Python Borsh Documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/hashblock/solana-cli-program-template"},"Solana CLI Program Template2"))))}f.isMDXComponent=!0},85162:(n,e,t)=>{t.d(e,{Z:()=>o});var a=t(67294),r=t(86010);const i={tabItem:"tabItem_Ymn6"};function o(n){let{children:e,hidden:t,className:o}=n;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:t},e)}},74866:(n,e,t)=>{t.d(e,{Z:()=>S});var a=t(87462),r=t(67294),i=t(86010),o=t(12466),l=t(16550),s=t(91980),c=t(67392),u=t(50012);function p(n){return function(n){return r.Children.map(n,(n=>{if(!n||(0,r.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(n).map((n=>{let{props:{value:e,label:t,attributes:a,default:r}}=n;return{value:e,label:t,attributes:a,default:r}}))}function d(n){const{values:e,children:t}=n;return(0,r.useMemo)((()=>{const n=e??p(t);return function(n){const e=(0,c.l)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function m(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function f(n){let{queryString:e=!1,groupId:t}=n;const a=(0,l.k6)(),i=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,s._X)(i),(0,r.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(a.location.search);e.set(i,n),a.replace({...a.location,search:e.toString()})}),[i,a])]}function k(n){const{defaultValue:e,queryString:t=!1,groupId:a}=n,i=d(n),[o,l]=(0,r.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=t.find((n=>n.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:i}))),[s,c]=f({queryString:t,groupId:a}),[p,k]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[a,i]=(0,u.Nk)(t);return[a,(0,r.useCallback)((n=>{t&&i.set(n)}),[t,i])]}({groupId:a}),g=(()=>{const n=s??p;return m({value:n,tabValues:i})?n:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((n=>{if(!m({value:n,tabValues:i}))throw new Error(`Can't select invalid tab value=${n}`);l(n),c(n),k(n)}),[c,k,i]),tabValues:i}}var g=t(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function _(n){let{className:e,block:t,selectedValue:l,selectValue:s,tabValues:c}=n;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=n=>{const e=n.currentTarget,t=u.indexOf(e),a=c[t].value;a!==l&&(p(e),s(a))},m=n=>{let e=null;switch(n.key){case"Enter":d(n);break;case"ArrowRight":{const t=u.indexOf(n.currentTarget)+1;e=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(n.currentTarget)-1;e=u[t]??u[u.length-1];break}}e?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},e)},c.map((n=>{let{value:e,label:t,attributes:o}=n;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===e?0:-1,"aria-selected":l===e,key:e,ref:n=>u.push(n),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":l===e})}),t??e)})))}function h(n){let{lazy:e,children:t,selectedValue:a}=n;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=i.find((n=>n.props.value===a));return n?(0,r.cloneElement)(n,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((n,e)=>(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==a}))))}function b(n){const e=k(n);return r.createElement("div",{className:(0,i.Z)("tabs-container",y.tabList)},r.createElement(_,(0,a.Z)({},n,e)),r.createElement(h,(0,a.Z)({},n,e)))}function S(n){const e=(0,g.Z)();return r.createElement(b,(0,a.Z)({key:String(e)},n))}},99319:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/ser1-af49276e978a786d6aa0ce681a5e00ef.png"},92083:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/ser2-968d8ddeca64eaf613bd53efef9f3d10.png"},66470:(n,e,t)=>{t.d(e,{Z:()=>a});const a=t.p+"assets/images/ser3-25e49b3e094cc01103e349eb38e8ba91.png"}}]);