"use strict";(self.webpackChunkall_in_one_solana=self.webpackChunkall_in_one_solana||[]).push([[5935],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>b});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=o.createContext({}),i=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=i(e.components);return o.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,b=p["".concat(u,".").concat(d)]||p[d]||m[d]||r;return t?o.createElement(b,s(s({ref:n},l),{},{components:t})):o.createElement(b,s({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[p]="string"==typeof e?e:a,s[1]=c;for(var i=2;i<r;i++)s[i]=t[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},14962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>i});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:105,sidebar_label:"\ud83c\udf81 \u5f00\u542f\u6218\u5229\u54c1\u7bb1",sidebar_class_name:"green"},s="\ud83c\udf81 \u5f00\u542f\u6218\u5229\u54c1\u7bb1",c={unversionedId:"module6/randomness/opening-loot-boxes/README",id:"module6/randomness/opening-loot-boxes/README",title:"\ud83c\udf81 \u5f00\u542f\u6218\u5229\u54c1\u7bb1",description:"\u73b0\u5728\u6211\u4eec\u6765\u6df1\u5165\u63a2\u8ba8\u5f00\u542f\u6218\u5229\u54c1\u7bb1\u7684\u6307\u5357\u3002\u9996\u5148\u4f60\u4f1a\u6ce8\u610f\u5230\u7684\u662f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u8bb8\u591a\u8d26\u53f7\uff0c\u603b\u5171\u670919\u4e2a\uff01",source:"@site/docs/Solana-Co-Learn/module6/randomness/opening-loot-boxes/README.md",sourceDirName:"module6/randomness/opening-loot-boxes",slug:"/module6/randomness/opening-loot-boxes/",permalink:"/Solana-Co-Learn/module6/randomness/opening-loot-boxes/",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/tree/main/docs/Solana-Co-Learn/module6/randomness/opening-loot-boxes/README.md",tags:[],version:"current",lastUpdatedBy:"Davirain",lastUpdatedAt:1695967092,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:105,frontMatter:{sidebar_position:105,sidebar_label:"\ud83c\udf81 \u5f00\u542f\u6218\u5229\u54c1\u7bb1",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc41\u200d\ud83d\udde8 \u6784\u5efa\u4e00\u4e2a\u968f\u673a\u5668",permalink:"/Solana-Co-Learn/module6/randomness/build-a-randomiser/"},next:{title:"\u6700\u540e\u7684\u4f5c\u54c1",permalink:"/Solana-Co-Learn/module6/finishing-touches/"}},u={},i=[{value:"\u5ba2\u6237\u7aef\u4ea4\u4e92\u4e0e\u6d4b\u8bd5",id:"\u5ba2\u6237\u7aef\u4ea4\u4e92\u4e0e\u6d4b\u8bd5",level:2}],l={toc:i},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-\u5f00\u542f\u6218\u5229\u54c1\u7bb1"},"\ud83c\udf81 \u5f00\u542f\u6218\u5229\u54c1\u7bb1"),(0,a.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u6765\u6df1\u5165\u63a2\u8ba8\u5f00\u542f\u6218\u5229\u54c1\u7bb1\u7684\u6307\u5357\u3002\u9996\u5148\u4f60\u4f1a\u6ce8\u610f\u5230\u7684\u662f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u8bb8\u591a\u8d26\u53f7\uff0c\u603b\u5171\u6709",(0,a.kt)("inlineCode",{parentName:"p"},"19"),"\u4e2a\uff01"),(0,a.kt)("p",null,"\u76f4\u5230",(0,a.kt)("inlineCode",{parentName:"p"},"stake_state"),"\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662f\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u4e86\u89e3\u7684\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u6b63\u5728\u6dfb\u52a0\u4e0e\u603b\u7ebf\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5305\u62ec\u6211\u4eec\u5728\u521d\u59cb\u5316\u7528\u6237\u4e2d\u521a\u521a\u8bbe\u7f6e\u7684\u7528\u6237\u72b6\u6001\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u603b\u7ebf\u8d26\u6237\uff0c\u5305\u62ec",(0,a.kt)("inlineCode",{parentName:"p"},"vrf"),"\u8d26\u6237\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"oracle"),"\u961f\u5217\u8d26\u6237\u3001\u961f\u5217\u6743\u9650\u8d26\u6237\uff08\u8fd9\u53ea\u662f\u6743\u9650\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"PDA"),"\uff09\u3001\u6570\u636e\u7f13\u51b2\u533a\u8d26\u6237\u3001\u6743\u9650\u8d26\u6237\u3001\u6258\u7ba1\u8d26\u6237\u3001\u7a0b\u5e8f\u72b6\u6001\u8d26\u6237\u548c\u603b\u7ebf\u7a0b\u5e8f\u8d26\u6237\u672c\u8eab\u3002"),(0,a.kt)("p",null,"\u4f60\u4f1a\u53d1\u73b0\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u5c1a\u672a\u8ba8\u8bba\u8fc7\u7684\u7c7b\u578b\uff0c\u5b83\u4eec\u6765\u81ea",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard-v2 crate"),"\u3002\u4ee5\u4e0b\u662f\u4f60\u9700\u8981\u6dfb\u52a0\u5230",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),"\u4e2d\u7684\u4e24\u4e2a\u4f9d\u8d56\u9879\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u8fd9\u4e9b\u7c7b\u578b\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'switchboard-v2 = { version = "^0.1.14", features = ["devnet"] }\nbytemuck = "1.7.2"\n')),(0,a.kt)("p",null,"\u6700\u540e\u4e24\u4e2a\u8d26\u6237\u662f\u4ed8\u6b3e\u4eba\u94b1\u5305\uff0c\u5b83\u4e0e\u4f60\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard"),"\u4ee3\u5e01\u5173\u8054\uff0c\u7528\u4e8e\u652f\u4ed8\u968f\u673a\u6027\u548c\u6700\u8fd1\u7684\u533a\u5757\u54c8\u5e0c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"use crate::*;\nuse anchor_lang::solana_program;\n\n#[derive(Accounts)]\npub struct OpenLootbox<'info> {\n    #[account(mut)]\n    pub user: Signer<'info>,\n    #[account(\n        init_if_needed,\n        payer = user,\n        space = std::mem::size_of::<LootboxPointer>() + 8,\n        seeds=[\"lootbox\".as_bytes(), user.key().as_ref()],\n        bump\n    )]\n    pub lootbox_pointer: Box<Account<'info, LootboxPointer>>,\n    pub system_program: Program<'info, System>,\n    pub token_program: Program<'info, Token>,\n    // TESTING - Uncomment the next line during testing\n    // #[account(mut)]\n    // TESTING - Comment out the next three lines during testing\n    #[account(\n          mut,\n          address=\"D7F9JnGcjxQwz9zEQmasksX1VrwFcfRKu8Vdqrk2enHR\".parse::<Pubkey>().unwrap()\n      )]\n    pub stake_mint: Account<'info, Mint>,\n    #[account(\n        mut,\n        associated_token::mint=stake_mint,\n        associated_token::authority=user\n    )]\n    pub stake_mint_ata: Box<Account<'info, TokenAccount>>,\n    pub associated_token_program: Program<'info, AssociatedToken>,\n    #[account(\n        constraint=stake_state.user_pubkey==user.key(),\n    )]\n    pub stake_state: Box<Account<'info, UserStakeInfo>>,\n    #[account(\n        mut,\n        // TESTING - Comment out these seeds for testing\n        seeds = [\n            user.key().as_ref(),\n        ],\n        // TESTING - Uncomment these seeds for testing\n        // seeds = [\n        //     vrf.key().as_ref(),\n        //     user.key().as_ref()\n        // ],\n        bump = state.load()?.bump,\n        has_one = vrf @ LootboxError::InvalidVrfAccount\n    )]\n    pub state: AccountLoader<'info, UserState>,\n\n    // SWITCHBOARD ACCOUNTS\n    #[account(mut,\n        has_one = escrow\n    )]\n    pub vrf: AccountLoader<'info, VrfAccountData>,\n    #[account(mut,\n        has_one = data_buffer\n    )]\n    pub oracle_queue: AccountLoader<'info, OracleQueueAccountData>,\n    /// CHECK:\n    #[account(mut,\n        constraint =\n            oracle_queue.load()?.authority == queue_authority.key()\n    )]\n    pub queue_authority: UncheckedAccount<'info>,\n    /// CHECK\n    #[account(mut)]\n    pub data_buffer: AccountInfo<'info>,\n    #[account(mut)]\n    pub permission: AccountLoader<'info, PermissionAccountData>,\n    #[account(mut,\n        constraint =\n            escrow.owner == program_state.key()\n            && escrow.mint == program_state.load()?.token_mint\n    )]\n    pub escrow: Account<'info, TokenAccount>,\n    #[account(mut)]\n    pub program_state: AccountLoader<'info, SbState>,\n    /// CHECK:\n    #[account(\n        address = *vrf.to_account_info().owner,\n        constraint = switchboard_program.executable == true\n    )]\n    pub switchboard_program: AccountInfo<'info>,\n\n    // PAYER ACCOUNTS\n    #[account(mut,\n        constraint =\n            payer_wallet.owner == user.key()\n            && escrow.mint == program_state.load()?.token_mint\n    )]\n    pub payer_wallet: Account<'info, TokenAccount>,\n    // SYSTEM ACCOUNTS\n    /// CHECK:\n    #[account(address = solana_program::sysvar::recent_blockhashes::ID)]\n    pub recent_blockhashes: AccountInfo<'info>,\n}\n")),(0,a.kt)("p",null,"\u5728\u6211\u4eec\u7684\u8d26\u6237\u914d\u7f6e\u4e4b\u540e\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u6211\u4eec\u5728\u5f00\u653e\u5f0f\u6218\u5229\u54c1\u7bb1\u5b9e\u73b0\u4e2d\u771f\u6b63\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u903b\u8f91\u6240\u5728\u7684\u5730\u65b9\u3002"),(0,a.kt)("p",null,"\u8d77\u521d\uff0c\u6211\u4eec\u52a0\u8f7d\u72b6\u6001\u7684\u90e8\u5206\u4e0e\u4ee5\u524d\u5b8c\u5168\u76f8\u540c\u3002\u4e00\u65e6\u6211\u4eec\u52a0\u8f7d\u4e86\u72b6\u6001\uff0c\u6211\u4eec\u5c31\u4ece\u72b6\u6001\u4e2d\u83b7\u53d6\u4e86\u6211\u4eec\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"bump"),"\uff08\u8bd1\u8005\u6ce8\uff1abump\u901a\u5e38\u7528\u4e8e\u6821\u9a8c\u6216\u786e\u4fdd\u552f\u4e00\u6027\uff09\uff0c\u8fd8\u6709\u6211\u4eec\u5728\u521d\u59cb\u5316\u7528\u6237\u65f6\u6dfb\u52a0\u7684\u53e6\u5916\u4e24\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"bump"),"\u3002\u6211\u4eec\u8fd8\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u4e86\u72b6\u6001\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let state = ctx.accounts.state.load()?;\nlet bump = state.bump.clone();\nlet switchboard_state_bump = state.switchboard_state_bump;\nlet vrf_permission_bump = state.vrf_permission_bump;\ndrop(state);\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ece\u8d26\u6237\u5217\u8868\u4e2d\u83b7\u53d6\u4e86\u4ea4\u6362\u673a\u7a0b\u5e8f\u672c\u8eab\u3002\u7136\u540e\uff0c\u6211\u4eec\u6784\u5efa\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"VRF"),"\u8bf7\u6c42\u7684\u968f\u673a\u6027\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u6211\u4eec\u7528\u4e8e",(0,a.kt)("inlineCode",{parentName:"p"},"CPI"),"\uff08\u8de8\u7a0b\u5e8f\u8c03\u7528\uff09\u7684\u4e0a\u4e0b\u6587\uff0c\u5728\u6211\u4eec\u51e0\u884c\u540e\u8c03\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"vrf_request_randomness"),"\u65f6\u4f1a\u7528\u5230\u3002"),(0,a.kt)("p",null,"\u518d\u6b21\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e9b\u88ab\u6ce8\u91ca\u6389\u7684\u4ee3\u7801\uff0c\u7528\u6765\u533a\u5206\u751f\u4ea7\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u3002\u6211\u4eec\u4ec5\u5728\u6d4b\u8bd5\u76ee\u7684\u4e0b\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"vrf"),"\u8d26\u6237\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let switchboard_program = ctx.accounts.switchboard_program.to_account_info();\n\nlet vrf_request_randomness = VrfRequestRandomness {\n    authority: ctx.accounts.state.to_account_info(),\n    vrf: ctx.accounts.vrf.to_account_info(),\n    oracle_queue: ctx.accounts.oracle_queue.to_account_info(),\n    queue_authority: ctx.accounts.queue_authority.to_account_info(),\n    data_buffer: ctx.accounts.data_buffer.to_account_info(),\n    permission: ctx.accounts.permission.to_account_info(),\n    escrow: ctx.accounts.escrow.clone(),\n    payer_wallet: ctx.accounts.payer_wallet.clone(),\n    payer_authority: ctx.accounts.user.to_account_info(),\n    recent_blockhashes: ctx.accounts.recent_blockhashes.to_account_info(),\n    program_state: ctx.accounts.program_state.to_account_info(),\n    token_program: ctx.accounts.token_program.to_account_info(),\n};\n\nlet payer = ctx.accounts.user.key();\n// TESTING - uncomment the following during tests\nlet vrf = ctx.accounts.vrf.key();\nlet state_seeds: &[&[&[u8]]] = &[&[vrf.as_ref(), payer.as_ref(), &[bump]]];\n// TESTING - comment out the next line during tests\n// let state_seeds: &[&[&[u8]]] = &[&[payer.as_ref(), &[bump]]];\n")),(0,a.kt)("p",null,"\u8fd9\u662f\u5bf9",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard"),"\u7684\u547c\u53eb\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'msg!("requesting randomness");\nvrf_request_randomness.invoke_signed(\n    switchboard_program,\n    switchboard_state_bump,\n    vrf_permission_bump,\n    state_seeds,\n)?;\n\nmsg!("randomness requested successfully");\n')),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u5c06\u968f\u673a\u8bf7\u6c42\u66f4\u6539\u4e3a\u5df2\u521d\u59cb\u5316\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"ctx.accounts.lootbox_pointer.randomness_requested = true;\nctx.accounts.lootbox_pointer.is_initialized = true;\nctx.accounts.lootbox_pointer.available_lootbox = box_number * 2;\n\nOk(())\n")),(0,a.kt)("p",null,"\u6211\u4eec\u518d\u6765\u63a2\u8ba8\u6218\u5229\u54c1\u76d2\u6307\u9488\u7ed3\u6784\u4f53\uff0c\u6ce8\u610f\u5230\u5176\u4e2d\u6709\u4e00\u4e2a\u540d\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemable")," \u7684\u5c5e\u6027\u3002\u8fd9\u4e2a\u5c5e\u6027\u8ba9\u5ba2\u6237\u7aef\u53ef\u4ee5\u89c2\u5bdf\u6218\u5229\u54c1\u76d2\u6307\u9488\u8d26\u6237\uff0c\u4e00\u65e6\u5b83\u4ece",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"\u53d8\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\uff0c\u6211\u4eec\u4fbf\u80fd\u77e5\u9053\u968f\u673a\u6027\u5df2\u7ecf\u6062\u590d\uff0c\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u94f8\u9020\u3002\u6b64\u53d8\u5316\u662f\u5728\u6d88\u8017\u968f\u673a\u6027\u51fd\u6570\u4e2d\u53d1\u751f\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[account]\npub struct LootboxPointer {\n  pub mint: Pubkey,\n  pub redeemable: bool,\n  pub randomness_requested: bool,\n  pub available_lootbox: u64,\n  pub is_initialized: bool,\n}\n")),(0,a.kt)("p",null,"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u5bf9\u5b83\u8fdb\u884c\u89e3\u8bfb\u3002\u8be5\u51fd\u6570\u7531\u4ea4\u6362\u673a\u8c03\u7528\uff0c\u5e76\u4e14\u5185\u5bb9\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," \u6587\u4ef6\u4e2d\u63d0\u4f9b\u3002\u56de\u8c03\u4e2d\u7684\u56db\u4e2a\u8d26\u6237\u4e0e",(0,a.kt)("inlineCode",{parentName:"p"},"ConsumeRandomness"),"\u4e2d\u7684\u8d26\u6237\u5339\u914d\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"loobox"),"\u6307\u9488\u548c\u72b6\u6001\u662f\u53ef\u53d8\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use crate::state::*;\nuse crate::*;\n\n#[derive(Accounts)]\npub struct ConsumeRandomness<'info> {\n    #[account(\n        mut,\n        // TESTING - Comment out these seeds for testing\n        seeds = [\n            payer.key().as_ref(),\n        ],\n        // TESTING - Uncomment these seeds for testing\n        // seeds = [\n        //     vrf.key().as_ref(),\n        //     payer.key().as_ref()\n        // ],\n        bump = state.load()?.bump,\n        has_one = vrf @ LootboxError::InvalidVrfAccount\n    )]\n    pub state: AccountLoader<'info, UserState>,\n    pub vrf: AccountLoader<'info, VrfAccountData>,\n    #[account(\n        mut,\n        seeds=[\"lootbox\".as_bytes(), payer.key().as_ref()],\n        bump\n      )]\n    pub lootbox_pointer: Account<'info, LootboxPointer>,\n    /// CHECK: ...\n    pub payer: AccountInfo<'info>,\n}\n")),(0,a.kt)("p",null,"\u5728\u5b9e\u9645\u6267\u884c\u4e0a\uff0c\u6211\u4eec\u5728\u6d41\u7a0b\u6307\u4ee4\u529f\u80fd\u4e2d\u9996\u5148\u52a0\u8f7d",(0,a.kt)("inlineCode",{parentName:"p"},"vrf"),"\u548c\u72b6\u6001\u8d26\u6237\u3002\u968f\u540e\uff0c\u6211\u4eec\u4ece",(0,a.kt)("inlineCode",{parentName:"p"},"vrf"),"\u8d26\u6237\u83b7\u53d6\u7ed3\u679c\u7f13\u51b2\u533a\uff0c\u5e76\u68c0\u67e5\u786e\u4fdd\u5176\u4e0d\u4e3a\u7a7a\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'impl ConsumeRandomness<\'_> {\n    pub fn process_instruction(ctx: &mut Context<Self>) -> Result<()> {\n        let vrf = ctx.accounts.vrf.load()?;\n               let state = &mut ctx.accounts.state.load_mut()?;\n\n               let result_buffer = vrf.get_result()?;\n               if result_buffer == [0u8; 32] {\n                   msg!("vrf buffer empty");\n                   return Ok(());\n               }\n\n               if result_buffer == state.result_buffer {\n                   msg!("result_buffer unchanged");\n                   return Ok(());\n               }\n    }\n')),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5bf9\u53ef\u7528\u7684\u88c5\u5907\u8fdb\u884c\u6620\u5c04\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e0b\u65b9\u5b9a\u4e49\u7684\u5e38\u91cf\uff0c\u65b9\u4fbf\u5728\u6784\u5efa\u7a0b\u5e8f\u65f6\u8fdb\u884c\u5fc5\u8981\u7684\u4fee\u6539\u3002\u8fd9\u5c06\u7ed9\u6211\u4eec\u4e00\u4e2a\u516c\u94a5\u5411\u91cf\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let available_gear: Vec<Pubkey> = Self::AVAILABLE_GEAR\n           .into_iter()\n           .map(|key| key.parse::<Pubkey>().unwrap())\n           .collect();\n")),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," \u53d8\u91cf\u4e2d\uff0c\u6211\u4eec\u5c06\u7ed3\u679c\u7f13\u51b2\u533a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7",(0,a.kt)("inlineCode",{parentName:"p"},"8"),"\u4f4d\u6574\u6570\uff0c\u8fd9\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"switchboard"),"\u63a8\u8350\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u91c7\u7528\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"bytemuck crate"),"\u3002\u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u53d6\u6a21\u8fd0\u7b97\u548c\u53ef\u7528\u7684\u6700\u5927\u8584\u8377\u6570\u91cf\u6765\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// maximum value to convert randomness buffer\nlet max_result = available_gear.len();\nlet value: &[u8] = bytemuck::cast_slice(&result_buffer[..]);\nlet i = (value[0] as usize) % max_result;\nmsg!("The chosen mint index is {} out of {}", i, max_result);\n')),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u9009\u4e2d\u7b2c",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"\u4e2a\u7d22\u5f15\u5904\u7684\u503c\uff0c\u5e76\u5206\u914d\u7ed9",(0,a.kt)("inlineCode",{parentName:"p"},"lootbox"),"\u6307\u9488\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"mint"),"\uff0c\u7136\u540e\u5c06",(0,a.kt)("inlineCode",{parentName:"p"},"redeemable"),"\u7684\u503c\u66f4\u6539\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5ba2\u6237\u7aef\u4fbf\u53ef\u89c2\u5bdf\u5230\u8fd9\u4e00\u53d8\u5316\uff0c\u4e00\u65e6",(0,a.kt)("inlineCode",{parentName:"p"},"redeemable"),"\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\uff0c\u7528\u6237\u5c31\u80fd\u5f00\u59cb\u94f8\u9020\u4ed6\u4eec\u7684\u88c5\u5907\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let mint = available_gear[i];\n        msg!("Next mint is {:?}", mint);\n        ctx.accounts.lootbox_pointer.mint = mint;\n        ctx.accounts.lootbox_pointer.redeemable = true;\n\n        Ok(())\n    }\n\n    const AVAILABLE_GEAR: [&\'static str; 5] = [\n        "87QkviUPcxNqjdo1N6C4FrQe3ZiYdAyxGoT44ioDUG8m",\n        "EypLPq3xBRREfpsdbyXfFjobVAnHsNerP892NMHWzrKj",\n        "Ds1txTXZadjsjKtt2ybH56GQ2do4nbGc8nrSH3Ln8G9p",\n        "EHPo4mSNCfYzX3Dtr832boZAiR8vy39eTsUfKprXbFus",\n        "HzUvbXymUCBtubKQD9yiwWdivAbTiyKhpzVBcgD9DhrV",\n    ];\n}\n')),(0,a.kt)("p",null,"\u6b63\u5982\u4e4b\u524d\u6240\u63d0\u53ca\u7684\uff0c\u4ece\u6218\u5229\u54c1\u7bb1\u4e2d\u83b7\u53d6\u7269\u54c1\u7684\u6307\u4ee4\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002\u5982\u679c\u60a8\u66f4\u7ec6\u81f4\u5730\u89c2\u5bdf\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u5e76\u6ca1\u6709\u4e0e\u4ea4\u6362\u673a\u8fdb\u884c\u4efb\u4f55\u4ea4\u4e92\uff0c\u56e0\u6b64\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u66f4\u65b0\u3002"),(0,a.kt)("h2",{id:"\u5ba2\u6237\u7aef\u4ea4\u4e92\u4e0e\u6d4b\u8bd5"},"\u5ba2\u6237\u7aef\u4ea4\u4e92\u4e0e\u6d4b\u8bd5"),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u8981\u6765\u63a2\u8ba8\u4e0e\u4ea4\u6362\u673a\u76f8\u5173\u7684\u6d4b\u8bd5\u73af\u8282\u3002\u6211\u4eec\u5df2\u7ecf\u5ba1\u89c6\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"setupSwitchboard"),"\u51fd\u6570\uff0c\u4ee5\u4fbf\u51c6\u5907\u6d4b\u8bd5\u3002\u524d\u4e09\u4e2a\u6d4b\u8bd5\u4e3b\u8981\u7528\u4e8e\u8d28\u62bc\u3001\u8d4e\u56de\u548c\u89e3\u8d28\u62bc\u3002\u7d27\u968f\u5176\u540e\u7684\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"init_user"),"\u6d4b\u8bd5\uff0c\u975e\u5e38\u76f4\u63a5\u660e\u4e86\u3002\u6211\u4eec\u53ea\u9700\u4f20\u5165\u4ea4\u6362\u673a\u72b6\u6001\u7684\u589e\u91cf\u548c\u6743\u9650\u589e\u91cf\uff0c\u518d\u52a0\u4e0a\u56db\u4e2a\u8d26\u6237\u5373\u53ef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'it("init user", async () => {\n    const tx = await lootboxProgram.methods\n      .initUser({\n        switchboardStateBump: switchboardStateBump,\n        vrfPermissionBump: permissionBump,\n      })\n      .accounts({\n        state: userState,\n        vrf: vrfAccount.publicKey,\n        payer: wallet.pubkey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n      })\n      .rpc();\n})\n')),(0,a.kt)("p",null,"\u968f\u540e\u7684\u9009\u62e9\u6027\u968f\u673a\u6d4b\u8bd5\u5219\u76f8\u5bf9\u590d\u6742\u4e00\u4e9b\u3002\u524d\u534a\u90e8\u5206\u4e0e\u5176\u4ed6\u6d4b\u8bd5\u76f8\u4f3c\u3002\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684\u94f8\u5e01\u673a\uff0c\u7528\u4ee5\u94f8\u9020\u8fd9\u4e9b\u7269\u54c1\u3002\u7136\u540e\u83b7\u53d6\u6216\u521b\u5efa\u4e00\u4e2a\u6240\u8c13\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"ATA"),"\uff0c\u5e76\u5c06\u7269\u54c1\u94f8\u9020\u5230\u5176\u4e2d\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u6211\u4eec\u7684\u8d28\u62bc\u8d26\u6237\uff0c\u8d1f\u8d23\u5b9e\u9645\u8d28\u62bc\u6211\u4eec\u7684NFT\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'it("Chooses a mint pseudorandomly", async () => {\n    const mint = await createMint(\n      provider.connection,\n      wallet.payer,\n      wallet.publicKey,\n      wallet.publicKey,\n      2\n    )\n    const ata = await getOrCreateAssociatedTokenAccount(\n      provider.connection,\n      wallet.payer,\n      mint,\n      wallet.publicKey\n    )\n\n    await mintToChecked(\n      provider.connection,\n      wallet.payer,\n      mint,\n      ata.address,\n      wallet.payer,\n      1000,\n      2\n    )\n\n    const [stakeAccount] = anchor.web3.PublicKey.findProgramAddressSync(\n      [wallet.publicKey.toBuffer(), nft.tokenAddress.toBuffer()],\n      program.programId\n    )\n')),(0,a.kt)("p",null,"\u6211\u4eec\u9996\u5148\u4ece",(0,a.kt)("inlineCode",{parentName:"p"},"vrf"),"\u8d26\u6237\u4e2d\u52a0\u8f7d\u6570\u636e\uff0c\u5e76\u4ece\u4ea4\u6362\u673a\u961f\u5217\u4e2d\u83b7\u53d6\u6211\u4eec\u7684\u6743\u9650\u548c\u6570\u636e\u7f13\u51b2\u533a\u3002\u968f\u540e\uff0c\u6211\u4eec\u8c03\u7528\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"openLootbox"),"\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u8bb8\u591a\u5408\u9002\u7684\u8d26\u6237\uff0c\u6570\u91cf\u76f8\u5f53\u591a\u3002\u5176\u4e2d\u5927\u90e8\u5206\u6765\u81ea",(0,a.kt)("inlineCode",{parentName:"p"},"setupSwitchboard"),"\u51fd\u6570\uff0c\u8fd8\u6709\u4e00\u4e9b\u5219\u6765\u81ea\u6211\u4eec\u521a\u521a\u4ece\u4ea4\u6362\u673a\u961f\u5217\u4e2d\u83b7\u53d6\u7684\u5185\u5bb9\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const vrfState = await vrfAccount.loadData();\nconst { authority, dataBuffer } = await switchboard.queue.loadData();\n\nawait lootboxProgram.methods\n  .openLootbox(new BN(10))\n  .accounts({\n    user: wallet.publicKey,\n    stakeMint: mint,\n    stakeMintAta: ata.address,\n    stakeState: stakeAccount,\n    state: userState,\n    vrf: vrfAccount.publicKey,\n    oracleQueue: switchboard.queue.publicKey,\n    queueAuthority: authority,\n    dataBuffer: dataBuffer,\n    permission: permissionAccount.publicKey,\n    escrow: vrfState.escrow,\n    programState: switchboardStateAccount.publicKey,\n    switchboardProgram: switchboard.program.programId,\n    payerWallet: switchboard.payerTokenWallet,\n    recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n  })\n  .rpc();\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"awaitCallback"),"\u51fd\u6570\uff0c\u5728\u5176\u4e2d\u6211\u4eec\u4f20\u9012\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"lootbox"),"\u7a0b\u5e8f\u3001\u6307\u9488",(0,a.kt)("inlineCode",{parentName:"p"},"PDA"),"\uff0c\u5e76\u8bbe\u7f6e\u4e8620\u79d2\u7684\u7b49\u5f85\u65f6\u95f4\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u6211\u4eec\u5c06\u89c2\u5bdf",(0,a.kt)("inlineCode",{parentName:"p"},"lootbox"),"\u6307\u9488\u662f\u5426\u66f4\u65b0\u4e3a\u65b0\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"mint"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'await awaitCallback(\n  lootboxProgram,\n  lootboxPointerPda,\n  20_000,\n  "Didn\'t get random mint"\n);\n')),(0,a.kt)("p",null,"\u4e0b\u9762\u662f\u7b49\u5f85\u56de\u8c03\u51fd\u6570\u7684\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u968f\u610f\u5f15\u7528\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u4f1a\u770b\u5230\u5b83\u5b9e\u9645\u4e0a\u53ea\u662f\u9759\u9759\u5730\u7b49\u5f85\u3002\u5b83\u4f1a\u89c2\u5bdf\u6218\u5229\u54c1\u76d2\u6307\u9488\u4e0a\u7684\u8d26\u6237\u53d8\u5316\uff0c\u4e00\u65e6\u6709\u53d8\u5316\uff0c\u5b83\u5c31\u4f1a\u68c0\u67e5\u6218\u5229\u54c1\u76d2\u6307\u9488\uff0c\u770b\u770b\u662f\u5426\u5df2\u8bbe\u7f6e\u4e3a\u201c\u53ef\u5151\u6362\u201d\u4e3a\u771f\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u5b83\u5c31\u4f1a\u89e3\u51b3\u5e76\u5b8c\u6210\u56de\u8c03\uff0c\u4e00\u5207\u90fd\u5c06\u987a\u5229\u8fdb\u884c\u3002\u5982\u679c\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"20"),'\u79d2\u5185\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff0c\u5b83\u5c06\u62a5\u544a"\u672a\u83b7\u5f97\u968f\u673a\u94f8\u5e01"\u7684\u9519\u8bef\u3002'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'async function awaitCallback(\n  program: Program<LootboxProgram>,\n  lootboxPointerAddress: anchor.web3.PublicKey,\n  timeoutInterval: number,\n  errorMsg = "Timed out waiting for VRF Client callback"\n) {\n  let ws: number | undefined = undefined\n  const result: boolean = await promiseWithTimeout(\n    timeoutInterval,\n    new Promise((resolve: (result: boolean) => void) => {\n      ws = program.provider.connection.onAccountChange(\n        lootboxPointerAddress,\n        async (\n          accountInfo: anchor.web3.AccountInfo<Buffer>,\n          context: anchor.web3.Context\n        ) => {\n          const lootboxPointer = await program.account.lootboxPointer.fetch(\n            lootboxPointerAddress\n          )\n\n          if (lootboxPointer.redeemable) {\n            resolve(true)\n          }\n        }\n      )\n    }).finally(async () => {\n      if (ws) {\n        await program.provider.connection.removeAccountChangeListener(ws)\n      }\n      ws = undefined\n    }),\n    new Error(errorMsg)\n  ).finally(async () => {\n    if (ws) {\n      await program.provider.connection.removeAccountChangeListener(ws)\n    }\n    ws = undefined\n  })\n\n  return result\n}\n')),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u6765\u6d4b\u8bd5\u9009\u5b9a\u9f7f\u8f6e\u7684\u94f8\u9020\u8fc7\u7a0b\u3002\u9996\u5148\uff0c\u6211\u4eec\u83b7\u53d6\u6218\u5229\u54c1\u7bb1\u6307\u9488\uff0c\u4ece\u4e2d\u627e\u5230\u94f8\u5e01\uff0c\u5e76\u83b7\u53d6\u6211\u4eec\u9700\u8981\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"ATA"),"\u4ee5\u4f7f\u5176\u5de5\u4f5c\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u68c0\u67e5\u662f\u5426\u4e4b\u524d\u5df2\u7ecf\u6709\u4e86\u76f8\u540c\u7684\u9f7f\u8f6e\uff0c\u4ee5\u9632\u6b62\u6211\u4eec\u91cd\u590d\u8fd0\u884c\u3002\u968f\u540e\uff0c\u6211\u4eec\u8c03\u7528\u4ece\u6218\u5229\u54c1\u7bb1\u4e2d\u68c0\u7d22\u7269\u54c1\u7684\u51fd\u6570\uff0c\u5e76\u518d\u6b21\u786e\u8ba4\u65b0\u7684\u9f7f\u8f6e\u6570\u91cf\u662f\u4e4b\u524d\u7684\u6570\u91cf\u52a0\u4e00\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'it("Mints the selected gear", async () => {\n  const [pointerAddress] = anchor.web3.PublicKey.findProgramAddressSync(\n    [Buffer.from("lootbox"), wallet.publicKey.toBuffer()],\n    lootboxProgram.programId\n  );\n\n  const pointer = await lootboxProgram.account.lootboxPointer.fetch(\n    pointerAddress\n  );\n\n  let previousGearCount = 0;\n  const gearAta = await getAssociatedTokenAddress(\n    pointer.mint,\n    wallet.publicKey\n  );\n  try {\n    let gearAccount = await getAccount(provider.connection, gearAta);\n    previousGearCount = Number(gearAccount.amount);\n  } catch (error) {}\n\n  await lootboxProgram.methods\n    .retrieveItemFromLootbox()\n    .accounts({\n      mint: pointer.mint,\n      userGearAta: gearAta,\n    })\n    .rpc();\n\n  const gearAccount = await getAccount(provider.connection, gearAta);\n  expect(Number(gearAccount.amount)).to.equal(previousGearCount + 1);\n})\n')),(0,a.kt)("p",null,"\u73b0\u5728\u60a8\u53ef\u4ee5\u8fd0\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u5e0c\u671b\u4e00\u5207\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5982\u679c\u521a\u5f00\u59cb\u4e0d\u6210\u529f\uff0c\u8bf7\u4e0d\u8981\u6c14\u9981\u3002\u6211\u4eec\u81ea\u5df1\u4e5f\u82b1\u4e86\u597d\u51e0\u5929\u7684\u65f6\u95f4\u8fdb\u884c\u8c03\u8bd5\u3002"))}m.isMDXComponent=!0}}]);