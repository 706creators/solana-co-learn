"use strict";(self.webpackChunkall_in_one_solana=self.webpackChunkall_in_one_solana||[]).push([[6492],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>k});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=r.createContext({}),s=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},m=function(n){var e=s(n.components);return r.createElement(c.Provider,{value:e},n.children)},p="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,c=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),p=s(t),d=o,k=p["".concat(c,".").concat(d)]||p[d]||u[d]||a;return t?r.createElement(k,i(i({ref:e},m),{},{components:t})):r.createElement(k,i({ref:e},m))}));function k(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l[p]="string"==typeof n?n:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},92712:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:71,sidebar_label:"\ud83e\udd47 \u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01",sidebar_class_name:"green"},i="\ud83e\udd47 \u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01",l={unversionedId:"module4/cross-program-invocations/mint-token-for-users/README",id:"module4/cross-program-invocations/mint-token-for-users/README",title:"\ud83e\udd47 \u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01",description:"\u6211\u4eec\u7684\u7535\u5f71\u8bc4\u8bba\u9879\u76ee\u8fdb\u5c55\u5f97\u4e0d\u9519\uff0c\u4f46\u8fd8\u6ca1\u6709\u5145\u5206\u4f53\u73b0Web3\u7684\u7279\u6027\u3002\u76ee\u524d\u6211\u4eec\u4e3b\u8981\u5c06Solana\u7528\u4f5c\u6570\u636e\u5e93\u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u5956\u52b1\u7528\u6237\u589e\u52a0\u4e00\u4e9b\u8da3\u5473\u6027\u5427\uff01\u6bcf\u5f53\u7528\u6237\u8bc4\u8bba\u4e00\u90e8\u7535\u5f71\u6216\u7559\u4e0b\u8bc4\u8bba\u65f6\uff0c\u6211\u4eec\u5c06\u4e3a\u5176\u94f8\u9020\u4ee3\u5e01\u3002\u8fd9\u53ef\u4ee5\u60f3\u8c61\u6210StackOverflow\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528\u4ee3\u5e01\u6765\u4ee3\u66ff\u70b9\u8d5e\u3002",source:"@site/docs/Solana-Co-Learn/module4/cross-program-invocations/mint-token-for-users/README.md",sourceDirName:"module4/cross-program-invocations/mint-token-for-users",slug:"/module4/cross-program-invocations/mint-token-for-users/",permalink:"/Solana-Co-Learn/module4/cross-program-invocations/mint-token-for-users/",draft:!1,editUrl:"https://github.com/CreatorsDAO/all-in-one-solana/tree/main/docs/Solana-Co-Learn/module4/cross-program-invocations/mint-token-for-users/README.md",tags:[],version:"current",lastUpdatedBy:"Davirain",lastUpdatedAt:1695967092,formattedLastUpdatedAt:"Sep 29, 2023",sidebarPosition:71,frontMatter:{sidebar_position:71,sidebar_label:"\ud83e\udd47 \u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"\u2694 \u8de8\u9879\u76ee\u7684Boss\u6218\u6597",permalink:"/Solana-Co-Learn/module4/cross-program-invocations/the-cross-program-boss-fight/"},next:{title:"\ud83d\udcb8 \u4f7f\u7528CPI\u6784\u5efa\u652f\u4ed8\u7cfb\u7edf",permalink:"/Solana-Co-Learn/module4/cross-program-invocations/build-a-payment-system-with-cpis/"}},c={},s=[{value:"\ud83e\udd16 \u8bbe\u7f6e\u4ee3\u5e01\u94f8\u9020",id:"-\u8bbe\u7f6e\u4ee3\u5e01\u94f8\u9020",level:2}],m={toc:s},p="wrapper";function u(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-\u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01"},"\ud83e\udd47 \u4e3a\u7528\u6237\u94f8\u9020\u4ee3\u5e01"),(0,o.kt)("p",null,"\u6211\u4eec\u7684\u7535\u5f71\u8bc4\u8bba\u9879\u76ee\u8fdb\u5c55\u5f97\u4e0d\u9519\uff0c\u4f46\u8fd8\u6ca1\u6709\u5145\u5206\u4f53\u73b0Web3\u7684\u7279\u6027\u3002\u76ee\u524d\u6211\u4eec\u4e3b\u8981\u5c06",(0,o.kt)("inlineCode",{parentName:"p"},"Solana"),"\u7528\u4f5c\u6570\u636e\u5e93\u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u5956\u52b1\u7528\u6237\u589e\u52a0\u4e00\u4e9b\u8da3\u5473\u6027\u5427\uff01\u6bcf\u5f53\u7528\u6237\u8bc4\u8bba\u4e00\u90e8\u7535\u5f71\u6216\u7559\u4e0b\u8bc4\u8bba\u65f6\uff0c\u6211\u4eec\u5c06\u4e3a\u5176\u94f8\u9020\u4ee3\u5e01\u3002\u8fd9\u53ef\u4ee5\u60f3\u8c61\u6210",(0,o.kt)("inlineCode",{parentName:"p"},"StackOverflow"),"\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528\u4ee3\u5e01\u6765\u4ee3\u66ff\u70b9\u8d5e\u3002"),(0,o.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u4e0a\u4e00\u6b21\u7684\u672c\u5730\u73af\u5883\u4e0a\u7ee7\u7eed\u5f00\u53d1\uff0c\u6216\u8005\u901a\u8fc7\u590d\u5236",(0,o.kt)("a",{parentName:"p",href:"https://beta.solpg.io/6313104b88a7fca897ad7d19?utm_source=buildspace.so&utm_medium=buildspace_project"},"\u8fd9\u4e2a\u73af\u5883"),"\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/buildspace/solana-movie-program/\ncd solana-movie-program\ngit checkout solution-add-comments\n")),(0,o.kt)("p",null,"\u6211\u4eec\u5c06\u4f7f\u7528SPL\u4ee3\u5e01\u7a0b\u5e8f\u6765\u5b9e\u73b0\u6240\u6709\u8fd9\u4e9b\u795e\u5947\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u8bf7\u66f4\u65b0 ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," \u6587\u4ef6\u4e2d\u7684\u4f9d\u8d56\u9879\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nsolana-program = "~1.10.29"\nborsh = "0.9.3"\nthiserror = "1.0.31"\nspl-token = { version="3.2.0", features = [ "no-entrypoint" ] }\nspl-associated-token-account = { version="=1.0.5", features = [ "no-entrypoint" ] }\n')),(0,o.kt)("p",null,"\u8ba9\u6211\u4eec\u5feb\u901f\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u770b\u770b\u662f\u5426\u80fd\u591f\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684\u4f9d\u8d56\u9879\u6b63\u5e38\u6784\u5efa\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"cargo  build-sbf"),"\u3002"),(0,o.kt)("p",null,"\u4e00\u5207\u5c31\u7eea\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u4e86\uff01"),(0,o.kt)("h2",{id:"-\u8bbe\u7f6e\u4ee3\u5e01\u94f8\u9020"},"\ud83e\udd16 \u8bbe\u7f6e\u4ee3\u5e01\u94f8\u9020"),(0,o.kt)("p",null,"\u6211\u4eec\u9996\u5148\u8981\u521b\u5efa\u4e00\u4e2a\u4ee3\u5e01\u94f8\u9020\u3002\u63d0\u9192\u4e00\u4e0b\uff1a\u4ee3\u5e01\u94f8\u9020\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8d26\u6237\uff0c\u7528\u4e8e\u5b58\u50a8\u6211\u4eec\u7684\u4ee3\u5e01\u6570\u636e\u3002"),(0,o.kt)("p",null,"\u8fd9\u662f\u4e00\u6761\u65b0\u7684\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u6309\u7167\u6dfb\u52a0\u8bc4\u8bba\u652f\u6301\u65f6\u7684\u76f8\u540c\u6b65\u9aa4\u6765\u64cd\u4f5c\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u66f4\u65b0\u6307\u4ee4\u679a\u4e3e"),(0,o.kt)("li",{parentName:"ul"},"\u66f4\u65b0",(0,o.kt)("inlineCode",{parentName:"li"},"unpack"),"\u51fd\u6570"),(0,o.kt)("li",{parentName:"ul"},"\u66f4\u65b0 ",(0,o.kt)("inlineCode",{parentName:"li"},"process_instruction")," \u51fd\u6570")),(0,o.kt)("p",null,"\u4ece",(0,o.kt)("inlineCode",{parentName:"p"},"instruction.rs"),"\u5f00\u59cb\uff0c\u6211\u4eec\u5148\u66f4\u65b0\u679a\u4e3e\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum MovieInstruction {\n    AddMovieReview {\n        title: String,\n        rating: u8,\n        description: String,\n    },\n    UpdateMovieReview {\n        title: String,\n        rating: u8,\n        description: String,\n    },\n    AddComment {\n        comment: String,\n    },\n    InitializeMint, // \u8fd9\u91cc\u65b0\u589e\u4e86\u521d\u59cb\u5316\u94f8\u5e01\u7684\u64cd\u4f5c\n}\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u4efb\u4f55\u5b57\u6bb5\u2014\u2014\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u53ea\u9700\u63d0\u4f9b\u5730\u5740\uff01"),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u89e3\u5305\u51fd\u6570\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl MovieInstruction {\n    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {\n        let (&variant, rest) = input\n            .split_first()\n            .ok_or(ProgramError::InvalidInstructionData)?;\n        Ok(match variant {\n            0 => {\n                let payload = MovieReviewPayload::try_from_slice(rest).unwrap();\n                Self::AddMovieReview {\n                    title: payload.title,\n                    rating: payload.rating,\n                    description: payload.description,\n                }\n            }\n            1 => {\n                let payload = MovieReviewPayload::try_from_slice(rest).unwrap();\n                Self::UpdateMovieReview {\n                    title: payload.title,\n                    rating: payload.rating,\n                    description: payload.description,\n                }\n            }\n            2 => {\n                let payload = CommentPayload::try_from_slice(rest).unwrap();\n                Self::AddComment {\n                    comment: payload.comment,\n                }\n            }\n            // \u8fd9\u91cc\u65b0\u589e\u4e86\u521d\u59cb\u5316\u94f8\u5e01\u7684\u64cd\u4f5c\n            3 => Self::InitializeMint,\n            _ => return Err(ProgramError::InvalidInstructionData),\n        })\n    }\n}\n")),(0,o.kt)("p",null,"\u4f60\u4f1a\u7acb\u5373\u6ce8\u610f\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"process_instruction")," \u7684\u5339\u914d\u8bed\u53e5\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5904\u7406\u6240\u6709\u60c5\u51b5\u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u5f15\u5165\u65b0\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"SPL"),"\u5bfc\u5165\u5e76\u6dfb\u52a0\u5230\u5339\u914d\u8bed\u53e5\u4e2d\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u7ee7\u7eed\u5f80\u4e0b\u5f00\u53d1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// Update imports at the top\nuse solana_program::{\n    //Existing imports within solana_program\n\n    sysvar::{rent::Rent, Sysvar, rent::ID as RENT_PROGRAM_ID},\n    native_token::LAMPORTS_PER_SOL,\n    system_program::ID as SYSTEM_PROGRAM_ID\n}\nuse spl_associated_token_account::get_associated_token_address;\nuse spl_token::{instruction::initialize_mint, ID as TOKEN_PROGRAM_ID};\n\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n) -> ProgramResult {\n    let instruction = MovieInstruction::unpack(instruction_data)?;\n    match instruction {\n        MovieInstruction::AddMovieReview {\n            title,\n            rating,\n            description,\n        } => add_movie_review(program_id, accounts, title, rating, description),\n        MovieInstruction::UpdateMovieReview {\n            title,\n            rating,\n            description,\n        } => update_movie_review(program_id, accounts, title, rating, description),\n        MovieInstruction::AddComment { comment } => add_comment(program_id, accounts, comment),\n        // New instruction handled here to initialize the mint account\n        MovieInstruction::InitializeMint => initialize_token_mint(program_id, accounts),\n    }\n}\n// Rest of the file remains the same\n")),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize_token_mint")," \u529f\u80fd\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"processor.rs")," \u5e95\u90e8\u5b9e\u65bd ",(0,o.kt)("inlineCode",{parentName:"p"},"add_comment")," \u8d26\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn initialize_token_mint(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {\n    let account_info_iter = &mut accounts.iter();\n\n    // The order of accounts is not arbitrary, the client will send them in this order\n    // Whoever sent in the transaction\n    let initializer = next_account_info(account_info_iter)?;\n    // Token mint PDA - derived on the client\n    let token_mint = next_account_info(account_info_iter)?;\n    // Token mint authority\n    let mint_auth = next_account_info(account_info_iter)?;\n    // System program to create a new account\n    let system_program = next_account_info(account_info_iter)?;\n    // Solana Token program address\n    let token_program = next_account_info(account_info_iter)?;\n    // System account to calcuate the rent\n    let sysvar_rent = next_account_info(account_info_iter)?;\n\n    // Derive the mint PDA again so we can validate it\n    // The seed is just "token_mint"\n    let (mint_pda, mint_bump) = Pubkey::find_program_address(&[b"token_mint"], program_id);\n    // Derive the mint authority so we can validate it\n    // The seed is just "token_auth"\n    let (mint_auth_pda, _mint_auth_bump) =\n        Pubkey::find_program_address(&[b"token_auth"], program_id);\n\n    msg!("Token mint: {:?}", mint_pda);\n    msg!("Mint authority: {:?}", mint_auth_pda);\n\n    // Validate the important accounts passed in\n    if mint_pda != *token_mint.key {\n        msg!("Incorrect token mint account");\n        return Err(ReviewError::IncorrectAccountError.into());\n    }\n\n    if *token_program.key != TOKEN_PROGRAM_ID {\n        msg!("Incorrect token program");\n        return Err(ReviewError::IncorrectAccountError.into());\n    }\n\n    if *mint_auth.key != mint_auth_pda {\n        msg!("Incorrect mint auth account");\n        return Err(ReviewError::IncorrectAccountError.into());\n    }\n\n    if *system_program.key != SYSTEM_PROGRAM_ID {\n        msg!("Incorrect system program");\n        return Err(ReviewError::IncorrectAccountError.into());\n    }\n\n    if *sysvar_rent.key != RENT_PROGRAM_ID {\n        msg!("Incorrect rent program");\n        return Err(ReviewError::IncorrectAccountError.into());\n    }\n\n    // Calculate the rent\n    let rent = Rent::get()?;\n    // We know the size of a mint account is 82 (remember it lol)\n    let rent_lamports = rent.minimum_balance(82);\n\n    // Create the token mint PDA\n    invoke_signed(\n        &system_instruction::create_account(\n            initializer.key,\n            token_mint.key,\n            rent_lamports,\n            82, // Size of the token mint account\n            token_program.key,\n        ),\n        // Accounts we\'re reading from or writing to\n        &[\n            initializer.clone(),\n            token_mint.clone(),\n            system_program.clone(),\n        ],\n        // Seeds for our token mint account\n        &[&[b"token_mint", &[mint_bump]]],\n    )?;\n\n    msg!("Created token mint account");\n\n    // Initialize the mint account\n    invoke_signed(\n        &initialize_mint(\n            token_program.key,\n            token_mint.key,\n            mint_auth.key,\n            Option::None, // Freeze authority - we don\'t want anyone to be able to freeze!\n            9, // Number of decimals\n        )?,\n        // Which accounts we\'re reading from or writing to\n        &[token_mint.clone(), sysvar_rent.clone(), mint_auth.clone()],\n        // The seeds for our token mint PDA\n        &[&[b"token_mint", &[mint_bump]]],\n    )?;\n\n    msg!("Initialized token mint");\n\n    Ok(())\n}\n')),(0,o.kt)("p",null,"\u5728\u9ad8\u5c42\u6b21\u4e0a\uff0c\u8fd9\u91cc\u7684\u64cd\u4f5c\u8fc7\u7a0b\u53ef\u6982\u62ec\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u904d\u5386\u8d26\u6237\u5217\u8868\uff0c\u63d0\u53d6\u5fc5\u8981\u7684\u4fe1\u606f\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u6d3e\u751f\u4ee3\u5e01\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"mint PDA"),"\uff08\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740\uff09\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u5bf9\u4f20\u5165\u7684\u91cd\u8981\u8d26\u6237\u8fdb\u884c\u9a8c\u8bc1\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Token mint account")," - \u4ee3\u5e01\u94f8\u5e01\u8d26\u6237\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Mint authority account")," - \u94f8\u5e01\u6743\u9650\u8d26\u6237\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"System program")," - \u7cfb\u7edf\u7a0b\u5e8f\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Token program")," - \u4ee3\u5e01\u7a0b\u5e8f\u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Sysvar rent")," - \u7528\u4e8e\u8ba1\u7b97\u79df\u91d1\u7684\u7cfb\u7edf\u53d8\u91cf\u8d26\u6237\u3002"))),(0,o.kt)("li",{parentName:"ol"},"\u8ba1\u7b97",(0,o.kt)("inlineCode",{parentName:"li"},"mint account"),"\u6240\u9700\u7684\u79df\u91d1\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u521b\u5efa",(0,o.kt)("inlineCode",{parentName:"li"},"token mint PDA"),"\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u521d\u59cb\u5316",(0,o.kt)("inlineCode",{parentName:"li"},"mint account"),"\u3002")),(0,o.kt)("p",null,"\u7531\u4e8e\u6211\u4eec\u8c03\u7528\u4e86\u4e00\u4e2a\u672a\u58f0\u660e\u7684\u65b0\u9519\u8bef\u7c7b\u578b\uff0c\u4f60\u4f1a\u6536\u5230\u4e00\u4e2a\u9519\u8bef\u63d0\u793a\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u6253\u5f00",(0,o.kt)("inlineCode",{parentName:"p"},"error.rs"),"\u6587\u4ef6\uff0c\u5e76\u5c06",(0,o.kt)("inlineCode",{parentName:"p"},"IncorrectAccountError"),"\u6dfb\u52a0\u5230",(0,o.kt)("inlineCode",{parentName:"p"},"ReviewError"),"\u679a\u4e3e\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Error)]\npub enum ReviewError {\n    #[error("Account not initialized yet")]\n    UninitializedAccount,\n\n    #[error("PDA derived does not equal PDA passed in")]\n    InvalidPDA,\n\n    #[error("Input data exceeds max length")]\n    InvalidDataLength,\n\n    #[error("Rating greater than 5 or less than 1")]\n    InvalidRating,\n\n    // \u65b0\u589e\u7684\u9519\u8bef\u7c7b\u578b\n    #[error("Accounts do not match")]\n    IncorrectAccountError,\n}\n')),(0,o.kt)("p",null,"\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u975e\u5e38\u76f4\u89c2\u3002"),(0,o.kt)("p",null,"\u7136\u540e\uff0c\u5728\u6587\u4ef6\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u76ee\u6807\u6587\u4ef6\u5939\uff0c\u5e76\u5728\u90e8\u7f72\u6587\u4ef6\u5939\u4e2d\u5220\u9664\u5bc6\u94a5\u5bf9\u3002"),(0,o.kt)("p",null,"\u56de\u5230\u4f60\u7684\u63a7\u5236\u53f0\uff0c\u8fd0\u884c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build-sbf\n")),(0,o.kt)("p",null,"\u7136\u540e\u590d\u5236\u5e76\u7c98\u8d34\u63a7\u5236\u53f0\u6253\u5370\u7684\u90e8\u7f72\u547d\u4ee4\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u9047\u5230",(0,o.kt)("inlineCode",{parentName:"p"},"insufficient funds"),"\u7684\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u8fd0\u884c",(0,o.kt)("inlineCode",{parentName:"p"},"solana airdrop 2"),"\u3002"),(0,o.kt)("p",null,"\u4e00\u65e6\u5728\u672c\u5730\u90e8\u7f72\u5b8c\u6210\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u6d4b\u8bd5\u4e86\uff01\u6211\u4eec\u5c06\u4f7f\u7528\u672c\u5730\u5ba2\u6237\u7aef\u811a\u672c\u6765\u6d4b\u8bd5\u8d26\u6237\u521d\u59cb\u5316\u3002\u4ee5\u4e0b\u662f\u4f60\u9700\u8981\u505a\u7684\u8bbe\u7f6e\u6b65\u9aa4\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/buildspace/solana-movie-token-client\ncd solana-movie-token-client\nnpm install\n")),(0,o.kt)("p",null,"\u5728\u8fd0\u884c\u811a\u672c\u4e4b\u524d\uff0c\u8bf7\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u66f4\u65b0",(0,o.kt)("inlineCode",{parentName:"li"},"index.ts"),"\u4e2d\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"PROGRAM_ID"),"\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u5c06\u7b2c",(0,o.kt)("inlineCode",{parentName:"li"},"67"),"\u884c\u7684\u8fde\u63a5\u66f4\u6539\u4e3a\u4f60\u7684\u672c\u5730\u8fde\u63a5\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const connection = new web3.Connection("http://localhost:8899");\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"\u5728\u7b2c\u4e8c\u4e2a\u63a7\u5236\u53f0\u7a97\u53e3\u4e2d\u8fd0\u884c",(0,o.kt)("inlineCode",{parentName:"li"},"solana logs PROGRAM_ID_HERE"),"\u3002")),(0,o.kt)("p",null,"\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u6709\u4e00\u4e2a\u63a7\u5236\u53f0\u6b63\u5728\u8bb0\u5f55\u6b64\u7a0b\u5e8f\u7684\u6240\u6709\u8f93\u51fa\uff0c\u5e76\u4e14\u5df2\u51c6\u5907\u597d\u8fd0\u884c\u811a\u672c\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u4f60\u8fd0\u884c",(0,o.kt)("inlineCode",{parentName:"p"},"npm start"),"\uff0c\u4f60\u5e94\u8be5\u80fd\u591f\u770b\u5230\u6709\u5173\u521b\u5efa\u94f8\u5e01\u8d26\u6237\u7684\u65e5\u5fd7\u4fe1\u606f\u3002"),(0,o.kt)("p",null,":D"))}u.isMDXComponent=!0}}]);