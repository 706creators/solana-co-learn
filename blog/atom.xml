<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.all-in-one-blockchain.xyz/blog</id>
    <title>All in One Solana Blog</title>
    <updated>2023-09-28T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.all-in-one-blockchain.xyz/blog"/>
    <subtitle>All in One Solana Blog</subtitle>
    <icon>https://www.all-in-one-blockchain.xyz/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Cloudbreak Solana Horizontally Scaled State Architecture]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/cloudbreak</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/cloudbreak"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在这篇博文中，我们将介绍 Cloudbreak，Solana 的水平扩展状态架构]]></summary>
        <content type="html"><![CDATA[<p>在这篇博文中，我们将介绍 Cloudbreak，Solana 的水平扩展状态架构</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述ramssd-和线程">概述：RAM、SSD 和线程<a href="#概述ramssd-和线程" class="hash-link" aria-label="Direct link to 概述：RAM、SSD 和线程" title="Direct link to 概述：RAM、SSD 和线程">​</a></h2><p>当在不进行分片的情况下扩展区块链时，仅扩展计算是不够的。用于跟踪帐户的内存很快就会成为大小和访问速度的瓶颈。例如：人们普遍认为，许多现代链使用的本地数据库引擎 LevelDB 在单台机器上无法支持超过 5,000 TPS。这是因为虚拟机无法通过数据库抽象利用对帐户状态的并发读写访问。</p><p>一个简单的解决方案是在 RAM 中维护全局状态。然而，期望消费级机器有足够的 RAM 来存储全局状态是不合理的。下一个选择是使用 SSD。虽然 SSD 将每字节成本降低了 30 倍或更多，但它们比 RAM 慢 1000 倍。以下是最新三星 SSD 的<a href="https://www.samsung.com/semiconductor/global.semi.static/Samsung_NVMe_SSD_970_PRO_Data_Sheet_Rev.1.0.pdf" target="_blank" rel="noopener noreferrer">数据表</a>，它是市场上最快的 SSD 之一。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/0*rjRPk_av77fMNZbK" class="img_ev3q"></p><p>单笔交易需要读取 2 个账户并写入 1 个账户。账户密钥是加密公钥，完全随机，没有真实的数据局部性。用户的钱包会有很多账户地址，每个地址的位与任何其他地址完全无关。由于帐户之间不存在局部性，因此我们不可能将它们放置在内存中以使它们可能彼此接近。</p><p>每秒最多 15,000 次唯一读取，使用单个 SSD 的帐户数据库的简单单线程实现将支持每秒最多 7,500 个事务。现代 SSD 支持 32 个并发线程，因此可以支持每秒 370,000 次读取，或每秒大约 185,000 个事务。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cloudbreak-破云">Cloudbreak 破云<a href="#cloudbreak-破云" class="hash-link" aria-label="Direct link to Cloudbreak 破云" title="Direct link to Cloudbreak 破云">​</a></h2><p>Solana 的指导设计原则是设计不妨碍硬件的软件，以实现 100% 的利用率。</p><p>组织帐户数据库以便在 32 个线程之间可以进行并发读取和写入是一项挑战。像 LevelDB 这样的普通开源数据库会导致瓶颈，因为它们没有针对区块链设置中的这一特定挑战进行优化。 Solana 不使用传统数据库来解决这些问题。相反，我们使用操作系统使用的几种机制。</p><p>首先，我们利用内存映射文件。内存映射文件是其字节被映射到进程的虚拟地址空间的文件。一旦文件被映射，它的行为就像任何其他内存一样。内核可能会将部分内存缓存在 RAM 中，或者不将其缓存在 RAM 中，但物理内存的数量受到磁盘大小的限制，而不是 RAM 的大小。读取和写入仍然明显受到磁盘性能的限制。</p><p>第二个重要的设计考虑因素是顺序操作比随机操作快得多。这不仅适用于 SSD，也适用于整个虚拟内存堆栈。 CPU 擅长预取按顺序访问的内存，而操作系统则擅长处理连续页错误。为了利用这种行为，我们将帐户数据结构大致分解如下：</p><ol><li><p>账户和分叉的索引存储在 RAM 中。</p></li><li><p>帐户存储在最大 4MB 的内存映射文件中。</p></li><li><p>每个内存映射仅存储来自单个提议分叉的帐户。</p></li><li><p>地图随机分布在尽可能多的可用 SSD 上。</p></li><li><p>使用写时复制语义。</p></li><li><p>写入会附加到同一分叉的随机内存映射中。</p></li><li><p>每次写入完成后都会更新索引。</p></li></ol><p>由于帐户更新是写时复制并附加到随机 SSD，因此 Solana 获得了顺序写入和跨多个 SSD 进行横向写入以进行并发事务的好处。读取仍然是随机访问，但由于任何给定的分叉状态更新都分布在许多 SSD 上，因此读取最终也会水平扩展。</p><p>Cloudbreak 还执行某种形式的垃圾收集。随着分叉在回滚之外最终确定并且帐户被更新，旧的无效帐户将被垃圾收集，并且内存将被放弃。</p><p>这种架构至少还有一个更大的好处：计算任何给定分叉的状态更新的 Merkle 根可以通过跨 SSD 水平扩展的顺序读取来完成。这种方法的缺点是失去了数据的通用性。由于这是一个自定义数据结构，具有自定义布局，因此我们无法使用通用数据库抽象来查询和操作数据。我们必须从头开始构建一切。幸运的是，现在已经完成了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="benchmarking-cloudbreak-cloudbreak-基准测试">Benchmarking Cloudbreak Cloudbreak 基准测试<a href="#benchmarking-cloudbreak-cloudbreak-基准测试" class="hash-link" aria-label="Direct link to Benchmarking Cloudbreak Cloudbreak 基准测试" title="Direct link to Benchmarking Cloudbreak Cloudbreak 基准测试">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*k_JFp7vmxdp0IOSgURJNug.png" class="img_ev3q"></p><p>虽然帐户数据库位于 RAM 中，但我们看到吞吐量与 RAM 访问时间相匹配，同时随可用内核数量进行扩展。当帐户数量达到 1000 万时，数据库不再适合 RAM。然而，我们仍然看到单个 SSD 上每秒读取或写入的性能接近 1m。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="cloudbreak" term="cloudbreak"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gulf Stream Solana Mempool-less Transaction Forwarding Protocol]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/gulf-stream</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/gulf-stream"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在这篇博文中，我们将探讨 Gulf Stream，这是 Solana 用于高性能对抗网络的内存池管理解决方案。在进一步的博客文章中，我们将列出所有 7 个关键创新。]]></summary>
        <content type="html"><![CDATA[<p>在这篇博文中，我们将探讨 Gulf Stream，这是 Solana 用于高性能对抗网络的内存池管理解决方案。在进一步的博客文章中，我们将列出所有 7 个关键创新。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存池解释">内存池解释<a href="#内存池解释" class="hash-link" aria-label="Direct link to 内存池解释" title="Direct link to 内存池解释">​</a></h2><p>内存池是一组已提交但尚未被网络处理的交易。您现在可以看到比特币和以太坊内存池。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*30LjYU6b-XeuWF_NWzYl3g.png" alt="30 天的比特币内存池（以字节为单位）。" class="img_ev3q"></p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*FOcunSU91FoxGDfQuXDTgg.png" alt="以交易量衡量的 30 天以太坊内存池" class="img_ev3q"></p><p>对于比特币和以太坊来说，未经确认的交易数量通常约为 20K-100K，如上所示。内存池的大小（通常以未确认交易的数量来衡量）取决于区块空间的供需。即使在区块链时代的早期，当内存池上升时，这也会对整个网络产生显着的瓶颈效应。</p><p>那么，Solana 如何做得更好呢？在不增加网络吞吐量的情况下，Solana 验证器可以管理 100,000 的内存池大小。这意味着在网络吞吐量为 50,000 TPS 的情况下，100,000 个交易内存池只需几秒钟即可执行。这就是 Solana 成为世界上性能最高的无需许可区块链的原因。</p><p>令人印象深刻，对吧？但这个简单的分析忽略了很多重要因素……</p><p>以太坊和比特币中的内存池使用八卦协议以点对点方式在随机节点之间传播。网络中的节点定期构建代表本地内存池的布隆过滤器，并向网络上的其他节点请求与该过滤器不匹配的任何交易（以及其他一些交易，例如最低费用）。将单个事务传播到网络的其余部分将至少需要 log(N) 步骤，消耗过滤它所需的带宽、内存和计算资源。</p><p>当基准客户端开始每秒生成 100,000 个事务时，八卦协议就会不堪重负。计算过滤器以及在机器之间应用过滤器同时维护内存中的所有事务的成本变得非常高。领导者（区块生产者）还必须在区块中重新传输相同的交易，这意味着每笔交易至少通过网络传播两次。这既不高效也不实用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-gulf-stream-墨西哥湾流简介">Introducing Gulf Stream 墨西哥湾流简介<a href="#introducing-gulf-stream-墨西哥湾流简介" class="hash-link" aria-label="Direct link to Introducing Gulf Stream 墨西哥湾流简介" title="Direct link to Introducing Gulf Stream 墨西哥湾流简介">​</a></h2><p>我们在 Solana 网络上解决这个问题的解决方案是将事务缓存和转发推到网络边缘。我们称之为湾流。由于每个验证者都知道即将到来的领导者的顺序，因此客户端和验证者会提前将交易转发给预期的领导者。这使得验证者可以提前执行交易，减少确认时间，更快地切换领导者，并减少未确认交易池对验证者的内存压力。该解决方案在具有非确定性领导者的网络中是不可能的</p><p>那么它是怎样工作的？客户端（例如钱包）签署引用特定区块哈希的交易。客户端选择一个最近的、已被网络完全确认的区块哈希值。区块大约每 800 毫秒提议一次，并且每增加一个区块就需要指数级增加的超时时间来展开。使用我们的默认超时曲线，在最坏的情况下，完全确认的块哈希值是 32 个块旧的。该交易仅在引用块的子块中有效，并且仅对 X 个块有效。虽然 X 尚未最终确定，但我们预计区块哈希的 TTL（生存时间）约为 32 个区块。假设区块时间为 800 毫秒，相当于 24 秒。</p><p>一旦交易被转发给任何验证者，验证者就会将其转发给即将到来的领导者之一。客户可以订阅来自验证器的交易确认。客户知道区块哈希会在有限的时间内过期，或者交易已被网络确认。这允许客户签署保证执行或失败的交易。一旦网络越过回滚点，使得交易引用的区块哈希过期，客户端就可以保证交易现在无效并且永远不会在链上执行。</p><p><a href="https://podcasts.apple.com/us/podcast/anatoly-yakovenko-ceo-co-founder-solana-what-sharding/id1434060078?i=1000439218245&amp;source=post_page-----d342e72186ad--------------------------------" target="_blank" rel="noopener noreferrer">https://podcasts.apple.com/us/podcast/anatoly-yakovenko-ceo-co-founder-solana-what-sharding/id1434060078?i=1000439218245&amp;source=post_page-----d342e72186ad--------------------------------</a></p><p>这种架构固有的许多积极的副作用。首先，负载下的验证器可以提前执行交易并丢弃任何失败的交易。其次，领导者可以根据转发交易的验证器的权益权重来优先处理交易。这允许网络在大规模拒绝服务期间正常降级。</p><p>到目前为止，很明显，区块链网络的功能只有在其内存池最小的情况下才能发挥作用。虽然交易吞吐量有限的网络承担着尝试改造全新扩展技术以解决不断增长的内存池的崇高努力，但 Solana 自构思以来一直通过历史证明、湾流和海平面等优化来解决第一代的问题区块链网络并实现巨大的交易吞吐量。从一开始，这就是全球范围内的惊人速度，也是为世界各地的企业、经济和人民创建功能强大的去中心化基础设施的根本性发展。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="gulf" term="gulf"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pipelining in Solana The Transaction Processing Unit]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/pileline</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/pileline"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[为了达到亚秒级的确认时间和 Solana 成为世界上第一个网络规模区块链所需的交易能力，仅仅快速达成共识是不够的。该团队必须开发一种方法来快速验证大量交易块，同时在网络上快速复制它们。为了实现这一目标，Solana 网络上的事务验证过程广泛使用了 CPU 设计中常见的一种称为管道的优化。]]></summary>
        <content type="html"><![CDATA[<p>为了达到亚秒级的确认时间和 Solana 成为世界上第一个网络规模区块链所需的交易能力，仅仅快速达成共识是不够的。该团队必须开发一种方法来快速验证大量交易块，同时在网络上快速复制它们。为了实现这一目标，Solana 网络上的事务验证过程广泛使用了 CPU 设计中常见的一种称为管道的优化。</p><p>当存在需要通过一系列步骤处理的输入数据流并且每个步骤都有不同的硬件负责时，流水线是一个合适的过程。解释这一点的典型比喻是洗衣机和烘干机，它按顺序洗涤/烘干/折叠多批衣物。清洗必须在干燥之前进行，干燥之前必须进行折叠，但这三个操作中的每一个都由单独的单元执行。</p><p>为了最大限度地提高效率，人们创建了一系列阶段的管道。我们将洗衣机称为第一阶段，烘干机称为第二阶段，折叠过程称为第三阶段。为了运行管道，需要在第一批衣物添加到烘干机后立即将第二批衣物添加到洗衣机中。同样，第三个负载在第二个负载放入烘干机并且第一个负载被折叠之后添加到洗衣机。通过这种方式，人们可以同时处理三批衣物。给定无限负载，管道将始终以管道中最慢阶段的速率完成负载。</p><p>“我们需要找到一种方法让所有硬件始终保持忙碌状态。这就是网卡、CPU 核心和所有 GPU 核心。为此，我们借鉴了 CPU 设计的经验”，Solana 创始人兼首席技术官 Greg Fitzgerald 解释道。 “我们在软件中创建了一个四级交易处理器。我们称之为 TPU，我们的交易处理单元。”</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*e0HE3BV4nfJAx_qOElC9ZQ.png" class="img_ev3q"></p><p>在 Solana 网络上，管道机制——交易处理单元——通过内核级别的数据获取、GPU 级别的签名验证、CPU 级别的存储和内核空间的写入来进行。当 TPU 开始向验证器发送块时，它已经在下一组数据包中获取，验证了它们的签名，并开始记入令牌。</p><p>验证器节点同时运行两个管道进程，一个用于领导者模式，称为 TPU，另一个用于验证器模式，称为 TVU。在这两种情况下，管道化的硬件是相同的：网络输入、GPU 卡、CPU 内核、磁盘写入和网络输出。它对该硬件的作用是不同的。 TPU 的存在是为了创建分类帐条目，而 TVU 的存在是为了验证它们。</p><p>“我们知道签名验证将成为瓶颈，但我们也可以将这种与上下文无关的操作卸载到 GPU，”Fitzgersald 说道。 “即使卸载了这一最昂贵的操作，仍然存在许多额外的瓶颈，例如与网络驱动程序交互以及管理限制并发性的智能合约中的数据依赖性。”</p><p>在这个四级管道中的 GPU 并行化之间，在任何给定时刻，Solana TPU 都可以同时处理 50,000 个事务。 “这一切都可以通过一台现成的计算机来实现，价格不到 5000 美元，”Fitzgerland 解释道。 “不是超级计算机。”</p><p>通过将 GPU 卸载到 Solana 的事务处理单元上，网络可以影响单个节点的效率。实现这一目标一直是 Solana 自成立以来的目标。</p><p>“下一个挑战是以某种方式将块从领导节点发送到所有验证节点，并且以一种不会拥塞网络并导致吞吐量缓慢的方式进行，”Fitzgerald 继续说道。 “为此，我们提出了一种称为 Turbine 的区块传播策略。</p><p>“通过 Turbine，我们将验证器节点构建为多个级别，其中每个级别的大小至少是其上一级的两倍。通过这种结构，这些不同的级别，确认时间最终与树的高度成正比，而不是与树中的节点数量成正比，后者要大得多。每当网络规模扩大一倍时，您都会看到确认时间略有增加，但仅此而已。”</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="pipeline" term="pipeline"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proof of History A Clock for Blockchain]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/proof-of-history</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/proof-of-history"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[分布式系统中最困难的问题之一是时间一致性。事实上，一些人认为比特币的工作量证明算法最重要的功能是充当系统的去中心化时钟。在 Solana，我们相信历史证明提供了这个解决方案，并且我们已经基于它构建了一个区块链。]]></summary>
        <content type="html"><![CDATA[<p>分布式系统中最困难的问题之一是时间一致性。事实上，<a href="https://grisha.org/blog/2018/01/23/explaining-proof-of-work/" target="_blank" rel="noopener noreferrer">一些</a>人认为比特币的工作量证明算法最重要的功能是充当系统的去中心化时钟。在 <a href="https://solana.com/zh?utm_source=medium&amp;utm_campaign=proof_of_history" target="_blank" rel="noopener noreferrer">Solana</a>，我们相信历史证明提供了这个解决方案，并且我们已经基于它构建了一个区块链。</p><p>去中心化网络通过可信的集中式计时解决方案解决了这个问题。例如，谷歌的 <a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf" target="_blank" rel="noopener noreferrer">Spanner</a> 在其数据中心之间使用同步原子钟。谷歌的工程师以非常高的精度同步这些时钟并不断维护它们。</p><p>在区块链等对抗性系统中，这个问题更加困难。网络中的节点不能信任外部时间源或消息中出现的任何时间戳。例如，哈希图通过“中值”时间戳解决了这个问题。网络看到的每条消息都由网络的绝大多数人签名和时间戳。消息的时间戳中位数就是 Hashgraph 所说的“公平”排序。每条消息都必须传播到系统中的绝大多数节点，然后在消息收集到足够的签名后，整个集合需要传播到整个网络。正如您可以想象的那样，这确实很慢。</p><p>如果您可以简单地信任编码到消息中的时间戳怎么办？大量的分布式系统优化将突然可供您使用。例如。</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>同步时钟很有趣，因为它们可以用来提高分布式算法的性能。它们使得用本地计算取代通信成为可能。</p><p>— Liskov, B. 分布式系统中同步时钟的实际应用</p></div></div><p>在我们的例子中，这意味着高吞吐量、高性能的区块链</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="历史证明">历史证明<a href="#历史证明" class="hash-link" aria-label="Direct link to 历史证明" title="Direct link to 历史证明">​</a></h2><iframe width="680" height="382" src="https://www.youtube.com/embed/rywOYfGu4EA" title="Proof of History Explainer" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p>如果您可以证明消息是在事件之前和之后的某个时间发生的，而不是信任时间戳，该怎么办？当您拍摄《纽约时报》封面的照片时，您正在创建一个证据，证明您的照片是在该报纸出版后拍摄的，或者您有某种方式影响《纽约时报》的出版内容。通过历史证明，您可以创建历史记录，证明事件在特定时刻发生。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*Y4ogVaaFg54dVV4FOukMYA.png" alt="历史时间戳证明" class="img_ev3q"></p><p>历史证明是一种高频可验证延迟函数。<a href="https://www.youtube.com/watch?v=qUoagL7OZ1k" target="_blank" rel="noopener noreferrer">可验证延迟函数</a>需要特定数量的连续步骤来进行评估，但会产生可以有效且公开验证的独特输出。</p><p>我们的具体实现使用顺序原像抗散列，该散列连续地运行在自身上，并将先前的输出用作下一个输入。定期记录计数和当前输出。</p><p>对于 SHA256 哈希函数，如果不使用 2^2⁸ 核心进行强力攻击，则该过程不可能并行化。</p><p>然后我们可以确定每个计数器在生成时已经经过了实时时间，并且每个计数器记录的顺序与实时时的顺序相同。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="时间上限">时间上限<a href="#时间上限" class="hash-link" aria-label="Direct link to 时间上限" title="Direct link to 时间上限">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*oNjzzrlMxByxz-PN5rBv5w.png" alt="将消息记录到历史证明序列中" class="img_ev3q"></p><p>通过将数据的散列附加到先前生成的状态，可以将数据插入到序列中。状态、输入数据和计数均已发布。附加输入会导致所有未来的输出发生不可预测的变化。并行化仍然是不可能的，并且只要散列函数是原像和抗碰撞的，就不可能创建一个在未来生成所需散列的输入，或者创建具有相同散列的替代历史记录。我们可以证明任意两个追加操作之间经过的时间。我们可以证明数据是在附加之前的某个时间创建的。就像我们知道《纽约时报》上刊登的事件发生在报纸撰写之前。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="时间下限">时间下限<a href="#时间下限" class="hash-link" aria-label="Direct link to 时间下限" title="Direct link to 时间下限">​</a></h2><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9Nu83I_2B3xv-wZbm60ZXA.png" alt="历史证明的时间下限" class="img_ev3q"></p><p>历史证明的输入可以引用历史证明本身。反向引用可以作为带有用户签名的签名消息的一部分插入，因此如果没有用户私钥就无法对其进行修改。这就像以《纽约时报》为背景拍照一样。因为此消息包含 0xdeadc0de 哈希值，所以我们知道它是在创建计数 510144806912 之后生成的。</p><p>但由于该消息也被插入回历史证明流中，就好像您以《纽约时报》为背景拍了一张照片，第二天《纽约时报》发布了这张照片。我们知道该照片的内容在特定日期之前和之后存在。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="确认">确认<a href="#确认" class="hash-link" aria-label="Direct link to 确认" title="Direct link to 确认">​</a></h2><p>虽然记录的序列只能在单个 CPU 内核上生成，但可以并行验证输出。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*3uZfg-qQKBniLIRaKrMFFw.png" alt="并行验证" class="img_ev3q"></p><p>每个记录的切片都可以在单独的核心上从头到尾进行验证，所需时间仅为生成时间的 1/（核心数）。因此，具有 4000 个核心的现代 GPU 可以在 0.25 毫秒内验证一秒。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="asics-亚瑟士">ASICS 亚瑟士<a href="#asics-亚瑟士" class="hash-link" aria-label="Direct link to ASICS 亚瑟士" title="Direct link to ASICS 亚瑟士">​</a></h2><p>是不是每个 CPU 都不同，有些 CPU 比其他 CPU 快得多？您如何真正相信我们的 SHA256 循环生成的“时间”是准确的？</p><p>这个主题值得单独写一篇文章，但长话短说，我们不太关心某些 CPU 是否比其他 CPU 更快，以及 ASIC 是否可以比网络可用的 CPU 更快。最重要的是 ASIC 的速度是有限的。</p><p>我们正在使用 SHA256，并且感谢比特币，在使这种加密哈希函数变得更快方面进行了大量研究。该功能不可能通过使用更大的芯片区域（例如查找表）或在不影响时钟速度的情况下展开它来加速。 Intel 和 AMD 都发布了可以在 1.75 个周期内完成一轮 SHA256 的消费类芯片。</p><p>因此，我们非常确定定制 ASIC 的速度不会快 100 倍，更不用说 1000 倍了，而且很可能会在网络可用速度的 30% 以内。我们可以构建利用这个界限的协议，并且只允许攻击者有非常有限的、容易检测到的、短暂的拒绝服务攻击机会。下一篇文章将详细介绍这一点！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="代码">代码<a href="#代码" class="hash-link" aria-label="Direct link to 代码" title="Direct link to 代码">​</a></h2><p><a href="https://github.com/solana-labs/solana" target="_blank" rel="noopener noreferrer">https://github.com/solana-labs/solana</a></p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="poh" term="poh"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[SeaLevel Parallel Processing Thousands of Smart Contracts]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/solana-sealevel-runtime</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/solana-sealevel-runtime"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在这篇博文中，我们将探讨 Solana 的并行智能合约运行时 Sealevel。在开始之前，需要考虑的一件事是 EVM 和 EOS 基于 WASM 的运行时都是单线程的。这意味着一次一个合约会修改区块链状态。我们在 Solana 中构建的是一个运行时，可以使用验证器可用的尽可能多的内核并行处理数万个合约。]]></summary>
        <content type="html"><![CDATA[<p>在这篇博文中，我们将探讨 Solana 的并行智能合约运行时 Sealevel。在开始之前，需要考虑的一件事是 EVM 和 EOS 基于 WASM 的运行时都是单线程的。这意味着一次一个合约会修改区块链状态。我们在 Solana 中构建的是一个运行时，可以使用验证器可用的尽可能多的内核并行处理数万个合约。</p><p>Solana 之所以能够并行处理事务，是因为 Solana 事务描述了事务在执行时将读取或写入的所有状态。这不仅允许非重叠事务并发执行，还允许仅读取相同状态的事务并发执行。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="程序和帐户">程序和帐户<a href="#程序和帐户" class="hash-link" aria-label="Direct link to 程序和帐户" title="Direct link to 程序和帐户">​</a></h2><p>Cloudbreak，我们的帐户数据库，是公钥到帐户的映射。账户维护余额和数据，其中数据是字节向量。帐户有一个“所有者”字段。所有者是管理帐户状态转换的程序的公钥。程序是代码，没有状态。他们依赖分配给他们的账户中的数据向量来进行状态转换。</p><ol><li><p>程序只能更改其拥有的帐户的数据。</p></li><li><p>程序只能借记其拥有的账户。</p></li><li><p>任何程序都可以存入任何帐户。</p></li><li><p>任何程序都可以读取任何帐户。</p></li></ol><p>默认情况下，所有帐户一开始均由系统程序拥有。</p><ol><li><p>系统程序是唯一可以分配帐户所有权的程序。</p></li><li><p>系统程序是唯一可以分配零初始化数据的程序。</p></li><li><p>帐户所有权的分配在帐户的生命周期内只能发生一次。</p></li></ol><p>用户定义的程序由加载程序加载。加载程序能够将帐户中的数据标记为可执行。用户执行以下事务来加载自定义程序：</p><ol><li><p>创建一个新的公钥。</p></li><li><p>将硬币转移到钥匙上。</p></li><li><p>告诉系统程序分配内存。</p></li><li><p>告诉系统程序将帐户分配给加载程序。</p></li><li><p>将字节码分块上传到内存中。</p></li><li><p>告诉 Loader 程序将内存标记为可执行文件。</p></li></ol><p>此时，加载器对字节码进行验证，字节码加载到的账户就可以作为可执行程序了。新帐户可以标记为由用户定义的程序拥有。</p><p>这里的关键见解是程序是代码，并且在我们的键值存储中，存在程序的某些键子集，并且只有该程序具有写访问权限。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="交易">交易<a href="#交易" class="hash-link" aria-label="Direct link to 交易" title="Direct link to 交易">​</a></h2><p>事务指定一个指令向量。每条指令都包含程序、程序指令以及交易想要读写的账户列表。该接口的灵感来自于设备的低级操作系统接口：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">size_t</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">readv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">iovec</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iov</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> iovcnt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">iovec</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iov_base</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Base address. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">size_t</span><span class="token plain"> iov_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Length. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>readv 或 writev 等接口提前告诉内核用户想要读取或写入的所有内存。这允许操作系统预取、准备设备，并在设备允许的情况下并发执行操作。</p><p>在 Solana 上，每条指令都会提前告诉虚拟机要读取和写入哪些帐户。这就是我们对VM进行优化的根源。</p><ol><li><p>对数以百万计的待处理交易进行排序。</p></li><li><p>并行安排所有非重叠事务。</p></li></ol><p>更重要的是，我们可以利用 CPU 和 GPU 硬件的设计方式。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:4800/format:webp/1*5CwncUtV3FwS3Gp91RGmSA.png" class="img_ev3q"></p><p>SIMD 指令允许在多个数据流上执行一段代码。这意味着 Sealevel 可以执行额外的优化，这是 Solana 设计所独有的：</p><ol><li><p>按程序 ID 对所有指令进行排序。</p></li><li><p>同时在所有帐户上运行相同的程序。</p></li></ol><p>要了解为什么这是一个如此强大的优化，请查看 <a href="https://docs.nvidia.com/cuda/" target="_blank" rel="noopener noreferrer">CUDA 开发人员指南</a>：</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>CUDA 架构是围绕可扩展的多线程流多处理器 (SM) 阵列构建的。当主机 CPU 上的 CUDA 程序调用内核网格时，网格的块将被枚举并分配给具有可用执行能力的多处理器。</p></div></div><p>现代 Nvidia GPU 拥有 4000 个 CUDA 核心，但大约有 50 个多处理器。虽然多处理器一次只能执行一条程序指令，但它可以并行执行超过 80 个不同输入的指令。因此，如果 Sealvel 加载的传入事务都调用相同的程序指令（例如 CryptoKitties::BreedCats），Solana 可以在所有可用的 CUDA 核心上同时执行所有事务。</p><p>性能方面没有免费的午餐，因此为了使 <a href="https://en.wikipedia.org/wiki/SIMD" target="_blank" rel="noopener noreferrer">SIMD</a> 优化可行，执行的指令应该包含少量分支，并且都应该采用相同的分支。多处理器受到批处理中执行速度最慢的路径的限制。即使考虑到这一点，与单线程运行时相比，通过 Sealevel 进行的并行处理在区块链网络的运行方式方面呈现出基础性的发展，从而实现了极高的吞吐量和可用性。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="sealevel" term="sealevel"/>
        <category label="runtime" term="runtime"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tower BFT Solana High Performance Implementation of PBFT]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/tower-bft</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/tower-bft"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在这篇博文中，我们将探讨 Tower BFT，这是 Solana 的 PBFT 自定义实现，它更喜欢活跃性而不是一致性。 Tower BFT 在达成共识之前利用 Solana 的 PoH 作为时钟，以减少消息传递开销和延迟。]]></summary>
        <content type="html"><![CDATA[<p>在这篇博文中，我们将探讨 Tower BFT，这是 Solana 的 PBFT 自定义实现，它更喜欢活跃性而不是一致性。 Tower BFT 在达成共识之前利用 Solana 的 PoH 作为时钟，以减少消息传递开销和延迟。</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>为了提供活力，如果副本无法执行请求，则必须移动到新视图。然而，当至少 2f + 1 个无故障副本处于同一视图中时，最大化时间段非常重要，并确保这段时间呈指数增长，直到执行某些请求的操作</p><ul><li>（<a href="http://pmg.csail.mit.edu/papers/osdi99.pdf" target="_blank" rel="noopener noreferrer">实用拜占庭容错</a>，米格尔·卡斯特罗和芭芭拉·利斯科夫）。</li></ul></div></div><p>Solana 实现了 PBFT 的一种衍生，但有一个根本区别。历史证明（PoH）提供了达成共识之前的全球时间来源。我们的 PBFT 实现使用 PoH 作为网络时间时钟，并且副本在 PBFT 中使用的指数增长超时可以在 PoH 本身中计算和强制执行。</p><p>PoH 是一种可验证延迟函数，以顺序哈希函数的形式实现。我们使用 VDF 的松散定义，因为验证需要（计算时间）/（核心数量）。 PoH 工作的基本原理如下：</p><ol><li>Sha256 尽可能快地循环，使得每个输出都是下一个输入。</li><li>对循环进行采样，并记录迭代次数和状态。</li></ol><p>记录的样本代表了编码为可验证数据结构的时间流逝。此外，该循环还可用于记录事件。</p><ol><li><p>引用任何示例的消息都保证是在该示例之后创建的。</p></li><li><p>消息可以插入到循环中并与状态一起进行哈希处理。这保证了在下一次插入之前创建了一条消息。</p></li></ol><p>这种数据结构保证了嵌入事件的时间和顺序，这一核心思想是 Solana 中所有主要技术优化的基础。</p><p>换句话说：想象一下你在一座岛上，一个瓶子漂过，里面有一个拇指驱动器。该驱动器上是 Solana PoH 分类账。仅使用 PoH 账本，您就可以计算网络中所有节点的状态。例如，如果对账本的投票尚未记录在最后 X 个哈希值中，则节点被视为失败。如果在过去的 X 个哈希中，对已签署验证消息的网络的绝大多数进行哈希处理，我们就可以认为账本是有效的。</p><ol><li><p>检查此数据结构的所有节点将计算完全相同的结果，而不需要任何点对点通信。</p></li><li><p>PoH 哈希唯一标识账本的该分叉；和</p></li><li><p>仅当验证投票消息所投票的 PoH 哈希值存在于账本中时，验证投票消息才有效。</p></li></ol><p>这就引出了投票和 PBFT。由于账本本身可作为可靠的网络时钟，因此我们可以在账本本身中对 PBFT 超时进行编码。</p><ol><li>投票以 N 个哈希超时开始。</li></ol><p>验证者保证（通过削减）一旦对 PoH 哈希进行投票，验证者将不会投票给任何不是该投票子项的 PoH 哈希，至少 N 个哈希。</p><ol start="2"><li>所有前任投票的超时时间加倍</li></ol><p>为了使操作更易于管理，投票被限制在固定的哈希周期内，我们称之为时隙。我们对时隙的目标是代表 400 毫秒左右的哈希数。每 400 毫秒，网络就有一个潜在的回滚点，但随后的每一次投票都会使网络在展开该投票之前必须停滞的实时时间加倍。</p><p>想象一下，每个验证者在过去 12 秒内投票了 32 次。 12 秒前的投票现在有 232 个时隙的超时，即大约 54 年。实际上，这次投票永远不会被网络回滚。而最近的投票有 2 个时隙的超时，即大约 800 毫秒。随着新区块被添加到账本中，旧区块被确认的可能性越来越大，因为旧投票的时隙数量会在每个时隙或每 400 毫秒增加一倍。</p><p>请注意，虽然这听起来像是工作量证明中的概率最终性，但事实并非如此。一旦 2/3 的验证者对某个 PoH 哈希进行了投票，该 PoH 哈希就会被规范化，并且无法回滚。这与工作量证明不同，工作量证明中没有规范化的概念。</p><p>为了防止被网络其他部分锁定，每个验证者确保只有在看到绝大多数网络也在同一账本上投票时才进行投票。每个验证器都会监控祖先投票的超时时间何时超过预定义的阈值（例如从 5 到 10 分钟），并确保网络的绝大多数人已对包含该投票的分叉进行了投票。在实践中，验证者：</p><ol><li><p>检查是否有绝大多数人对一个将承诺 10 分钟超时的插槽进行了投票</p></li><li><p>如果没有，请不要投票</p></li></ol><p>那么在分区期间网络会发生什么并且超时实际上开始到期呢？</p><ol><li><p>任何已过期的投票都会被清除</p></li><li><p>当且仅当孩子有相同的超时时，祖先的超时加倍</p></li></ol><p>例如，让我们考虑当前超时的场景：</p><p>64, 32, 16, 8, 4, 2</p><p>如果验证者停止对 17 个插槽进行投票并再次投票，则验证者的超时结果将是：</p><p>64, 32, 2</p><p>还需要连续4次投票，所有祖先的暂停时间才会再次加倍。</p><p>64, 32, 4, 2</p><p>64, 32, 8, 4, 2</p><p>64, 32, 16, 4, 2</p><p>最后第四次投票将使所有超时加倍</p><p>128, 64, 32, 16, 8, 4, 2</p><p>这种方法允许网络连续传输区块，而不会导致账本停滞，直到绝大多数人观察到相同的账本。另一个值得注意的方面是，网络中的每个参与者都可以计算每个其他参与者的超时，而无需任何 P2P 通信。这就是 Tower BFT 异步的原因。</p><p>我们预计会有许多微分叉很快被丢弃。当验证者检测到多个分叉时，诚实的验证者会计算每个分叉的有效权益加权超时并选择最重的一个。仅针对达到 2³² 超时的投票生成验证者奖励。因此，验证者在最重的分叉之上进行投票是兼容激励的，因为具有最大量权益加权超时的分叉将为网络产生最大量的奖励。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="tower-bft" term="tower-bft"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Turbine Solana Block Propagation Protocol Solves the Scalability Trilemma]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/tubine</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/tubine"/>
        <updated>2023-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在这篇文章中，我们将探讨 Turbine，这是 Solana 的区块传播协议（受 BitTorrent 启发），它解决了区块链可扩展性的难题。]]></summary>
        <content type="html"><![CDATA[<p>在这篇文章中，我们将探讨 Turbine，这是 Solana 的区块传播协议（受 BitTorrent 启发），它解决了区块链可扩展性的难题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="可扩展性的困境">可扩展性的困境<a href="#可扩展性的困境" class="hash-link" aria-label="Direct link to 可扩展性的困境" title="Direct link to 可扩展性的困境">​</a></h2><p>区块链技术中的可扩展性三难困境都与带宽有关。在当今的大多数区块链网络中，给定每个节点的固定带宽量，增加节点数将增加将所有数据传播到所有节点所需的时间。这是一个大问题。</p><p>然而，有无数的机会来优化数据的传播方式。有许多新颖的数据传播技术，每种技术都针对特定应用进行了优化。例如，BitTorrent 经过优化，可使用 TCP 向大量人员提供大型文件，而我参与的项目 MediaFLO 是一种针对物理层数据传播进行优化的协议，以提高无线网络上的多播效率。</p><p>在此背景下，让我们进入 Solana 的区块传播协议 Turbine，来解释 Solana 网络如何传播数据来解决区块链可扩展性三难困境。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="turbine-涡轮">Turbine 涡轮<a href="#turbine-涡轮" class="hash-link" aria-label="Direct link to Turbine 涡轮" title="Direct link to Turbine 涡轮">​</a></h2><p>高性能区块链面临的挑战之一是网络如何将大量数据传播到大量节点。例如，让我们考虑一个由 20,000 个验证者组成的网络。领导者需要向所有 20,000 个验证者传输一个 128 MB 的区块（大约 500,000 个交易 @ 250 字节/交易）。简单的实现将要求领导者与每个验证者建立唯一的连接，并传输完整的 128 MB 20,000 次。根本没有足够的带宽来容纳这么多的连接。</p><p>我们针对这个问题的解决方案 Turbine 大量借鉴了 BitTorrent，尽管两者在一些主要技术细节上有所区别。 Turbine 针对流式传输进行了优化，仅使用 UDP 传输数据，并在领导者（区块生产者）流式传输数据时通过网络实现每个数据包的随机路径。领导者将块分成大小最大为 64KB 的数据包。对于 128MB 的块，领导者会生成 2,000 个 64KB 数据包，并将每个数据包传输到不同的验证器。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*IuaWcY17zIdSTB-g8Sd4TA.jpeg" class="img_ev3q"></p><p>反过来，每个验证器将数据包重新传输给一组我们称为邻居的对等点。您可以将网络可视化为邻域树，从而使网络能够增长到远远超过 1,000 个验证者：</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*pTDMBLbXEKQxfMmSgLEfHg.jpeg" class="img_ev3q"></p><p>每个邻域负责将其部分数据传输到其下面的每个邻域。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*vZYagCC7O6SJJcSgGuBfrQ.jpeg" class="img_ev3q"></p><p>如果每个邻域由 200 个节点组成，则从根部的单个领导者开始的 3 级网络可以在 2 跳内达到 40,000 个验证者——或者假设每个网络链路平均为 100 毫秒，大约需要 200 毫秒。</p><p>我们使用这项技术面临的挑战是安全性。例如：敌对节点可以选择不重播数据，或者重播不正确的数据。为了处理对抗性节点，领导者生成里德-所罗门擦除码。纠删码允许每个验证器在不接收所有数据包的情况下重建整个块。</p><p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*lK2hV3_GFtiUlwA0mscdRA.jpeg" class="img_ev3q"></p><p>如果领导者将块的 33% 的数据包作为纠删码传输，那么网络可以丢弃任意 33% 的数据包而不会丢失该块。领导者甚至可以根据网络状况动态调整这个数字。这些决定是根据领导者在之前区块中观察到的数据包丢失率来做出的。</p><p>并非所有验证器都是生而平等的。最重要的验证者是那些拥有最多股份的验证者。因此，我们相应地优先考虑传播。权益加权选择算法构建树，使得较高权益的验证者位于更接近领导者的邻域。每个验证器独立地计算同一棵树。虽然纠删码可以修复故障，但敌对节点有可能将自己定位在树中，从而引发高于其组合权益大小的故障，尤其是与拒绝服务攻击相结合时。</p><p>我们该如何应对这种<a href="https://www.radixdlt.com/blog/what-is-an-eclipse-attack" target="_blank" rel="noopener noreferrer">日食攻击</a>呢？我们的扇出算法使用基于数据包数字签名的随机源为每个数据包生成一个权益加权树。由于每个数据包采用不同的路径，并且路径事先未知，因此邻域级 Eclipse 攻击将需要几乎完全控制网络。</p><p>对于一个级别，该技术可以扩展到 200 到 1,000 个节点之间。支持 1 Gbps 的网卡每秒可传输一百万个数据包。如果网络连接允许，单个验证器可以在一秒钟内向 1,000 台机器发送最多 64 KB 的数据包。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="tubine" term="tubine"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是Phoenix？]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/what-is-Phoenix</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/what-is-Phoenix"/>
        <updated>2023-09-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Phoenix是Solana上的去中心化限价订单簿，支持现货资产市场。]]></summary>
        <content type="html"><![CDATA[<p>Phoenix是Solana上的去中心化限价订单簿，支持现货资产市场。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why">Why<a href="#why" class="hash-link" aria-label="Direct link to Why" title="Direct link to Why">​</a></h2><p>可组合的流动性中心是DeFi的公共产品。开发者可以构建其他链上应用，将流动性发布到或从规范的流动性来源中提取流动性。</p><h2></h2><ul><li></li></ul>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="Phoenix" term="Phoenix"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是Anchor？]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/what-is-anchor</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/what-is-anchor"/>
        <updated>2023-09-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[今天，开始我们学习从Solana上开发智能合约，这里我打算先从Anchor开始。因为Anchor也是Solana上现在如今用的最多的开发框架，哦，这里主要用的也是Rust语言，对于Anchor还支持的Solidity语法来写合约，暂时我先不考虑。也希望有🧍‍♂️能一起完善。]]></summary>
        <content type="html"><![CDATA[<p>今天，开始我们学习从Solana上开发智能合约，这里我打算先从Anchor开始。因为Anchor也是Solana上现在如今用的最多的开发框架，哦，这里主要用的也是Rust语言，对于Anchor还支持的Solidity语法来写合约，暂时我先不考虑。也希望有🧍‍♂️能一起完善。</p><p>那今天就简单的介绍下Anchor上如何从项目的初始化，到后面如何部署合约以及前端如何来调用这个简单的Example合约。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="先来介绍下什么是anchor吧">先来介绍下什么是Anchor吧<a href="#先来介绍下什么是anchor吧" class="hash-link" aria-label="Direct link to 先来介绍下什么是Anchor吧" title="Direct link to 先来介绍下什么是Anchor吧">​</a></h2><p>这里我先引用下官方的介绍</p><blockquote><p>Anchor是一个快速构建安全Solana程序的框架。</p><p>使用Anchor，您可以快速构建程序，因为它会为您编写各种样板代码，例如账户和指令数据的（反）序列化。</p><p>由于Anchor为您处理了某些安全检查，因此您可以更轻松地构建安全的程序。除此之外，它还允许您简洁地定义额外的检查，并将其与业务逻辑分开。</p><p>这两个方面意味着，你不必再花费时间在繁琐的Solana原始程序上，而是可以更多地投入到最重要的事情上，即你的产品。</p></blockquote><p>简单的点来说，就是Anchor做为一个Solana上的合约开发框架，对于原生使用Rust开发来说的话，anchor 提供了对于一些模版代码，或者说公共代码操作的抽象，使得开发者更加具体的专注与自己的业务逻辑。</p><p>简单的Anchor介绍完了，我们看看如何来初始化一个合约以及部署合约到本地测试网。本地测试网的部署查看<a href="https://creatorsdao.github.io/Solana-Co-Learn/module1/local_program_development/" target="_blank" rel="noopener noreferrer">这个教程</a>完成✅。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一个简单的anchor合约的部署测试">一个简单的Anchor合约的部署测试<a href="#一个简单的anchor合约的部署测试" class="hash-link" aria-label="Direct link to 一个简单的Anchor合约的部署测试" title="Direct link to 一个简单的Anchor合约的部署测试">​</a></h2><p>对于要使用Anchor来开发他需要一些前置的环境配置，例如你需要先安装Rust环境，第二个是安装Solana-cli工具。因为这里Anchor要使用solana cli的 <code>solana-keygen new</code> 命令来生成一个本地册测试账户。最后一个是Yarn。这里是Anchor官方给出的<a href="https://www.anchor-lang.com/docs/installation" target="_blank" rel="noopener noreferrer">安装教程</a>，按照这个安装即可。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="下面是具体的anchor如何安装">下面是具体的anchor如何安装<a href="#下面是具体的anchor如何安装" class="hash-link" aria-label="Direct link to 下面是具体的anchor如何安装" title="Direct link to 下面是具体的anchor如何安装">​</a></h3><p>官方推荐的是avm，一个Anchor的多版本管理器。前面我们已经安装了Rust语言，我们就可以使用cargo来安装这个工具。</p><p>通过执行这个命令，我们就可以安装avm了。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cargo </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> --git https://github.com/coral-xyz/anchor avm --locked --force</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>按照完之后我们就可以使用avm选择一个具体的版本安装，下面者一个命令我们安装的Anchor版本是最新的Anchor。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">avm </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">avm use latest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>验证安装成功的我们可以执行<code>anchor --version</code>命令，我们可以看到有版本号输出，说明我们安装成功了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="一个anchor项目的结构">一个anchor项目的结构<a href="#一个anchor项目的结构" class="hash-link" aria-label="Direct link to 一个anchor项目的结构" title="Direct link to 一个anchor项目的结构">​</a></h3><p>通过执行<code>anchor init new-workspace-name</code> 我们就可以初始化一个solana program。</p><p>下面是通过执行<code>anchor init hello-world</code>的输出。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> --tree </span><span class="token builtin class-name">.</span><span class="token plain"> --depth </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .gitignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .prettierignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  Anchor.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  Cargo.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  migrations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  package-lock.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  programs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  tsconfig.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──  yarn-error.log</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>app</code> 文件夹：初始化之后是一个空文件夹，这里可以用来存放自己的前端代码。</li><li><code>programs</code> 文件夹：此文件夹包含程序代码。它可以包含多个文件，但最初只包含与 <code>&lt;new-workspace-name&gt;</code> 相同名称的程序。并且这个program中已经包含了一些示例代码，在<code>lib.rs</code>中可以看到。</li><li><code>tests</code> 文件夹：包含您的端到端测试的文件夹。它已经包含一个测试 <code>programs/&lt;new-workspace-name&gt;</code> 中示例代码的文件，这里面的测试都是使用typescript写✍️的代码。当执行<code>anchor test</code>的时候会在本地启动一个solana的测试节点，执行里面的测试代码。</li><li><code>migrations</code> 文件夹：在这个文件夹中，保存程序的部署和迁移脚本。</li><li><code>Anchor.toml</code> 文件：此文件配置了程序的工作区范围设置。<ul><li>程序在本地网络上的地址（ <code>[programs.localnet]</code> ）</li><li>程序可以推送到的注册表 ( <code>[registry]</code> )</li><li>一个可以在你的测试中使用的也就是通过<code>solana-keygen new</code> 生成的私钥文件路径 ( <code>[provider]</code> )</li></ul></li><li><code>.anchor</code> 这个文件是只有在执行<code>anchor test</code>之后才生成的文件夹，里面包含了最新的程序日志和用于测试的本地账本。</li></ul><p>这个是在执行<code>anchor test</code>之后的文件内容。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> --tree </span><span class="token builtin class-name">.</span><span class="token plain"> --depth </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .anchor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .gitignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  .prettierignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  Anchor.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  Cargo.lock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  Cargo.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  migrations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  package-lock.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  programs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├──  tsconfig.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└──  yarn-error.log</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>下面这个是执行<code>anchor test</code>之后<code>.anchor</code>里面生成的日志内容。</p><p><img loading="lazy" src="/assets/images/anchor-test-log-3b291e7ed8269316b22fd140e27b1659.png" width="2840" height="654" class="img_ev3q"></p><p>好说了这么多，我们看下如何使用anchor打印一个hello world， 目前先只通过anchor test 来观察打印，后面在做介绍如何通过前端调用打印。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化一个-hello-world-program">初始化一个 hello world program<a href="#初始化一个-hello-world-program" class="hash-link" aria-label="Direct link to 初始化一个 hello world program" title="Direct link to 初始化一个 hello world program">​</a></h2><p>通过执行<code>anchor init hello-world</code>， 会为我们创建一个solana program的样板代码。</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anchor_lang</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">prelude</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property" style="color:#36acaa">declare_id!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"2HvxNpAdkkWitSQyDy9vMvJDpRsvtrhZ6JNqsXzGRi3i"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[program]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Context</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Initialize</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Accounts)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Initialize</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面这段代码就是通过<code>anchor init hello-world</code> 创建出来的代码，文件存放在<code>hello-world/programs/hello-world/src/lib.rs</code>中。</p><p>下面我们就通过简单的修改下这个简单的代码，在里面添加一个打印hello, world!的消息。</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anchor_lang</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">prelude</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property" style="color:#36acaa">declare_id!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"2HvxNpAdkkWitSQyDy9vMvJDpRsvtrhZ6JNqsXzGRi3i"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[program]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Context</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">Initialize</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">msg!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello, world!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Accounts)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Initialize</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个是添加了<code>msg!</code>这段代码，<code>msg!</code>主要做的事情，类似于在rust中打印内容到标准输出的<code>println!</code>，
因为是solana program，他是链上代码，我们不可能打印到标准输出的，所以这我们就通过使用<code>msg!</code>这个宏记录自己需要打印的东西。</p><blockquote><p>在Solana中，由于智能合约在执行时是在分布式网络中运行的，无法直接使用传统的标准输出来打印消息。为了在智能合约中输出调试信息或日志，Solana提供了<code>msg!</code>宏。</p><p><code>msg!</code>宏的使用方式与<code>println!</code>宏类似，你可以在智能合约中使用它来打印消息。这些消息将被记录并作为日志输出到Solana节点的日志文件中。</p><p>需要注意的是，<code>msg!</code>宏只在Solana智能合约中可用，用于在智能合约执行过程中输出消息。它与Rust中的<code>println!</code>宏略有不同，因为它将消息记录到Solana节点的日志文件中，而不是直接输出到控制台。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="观察-helloworld消息">观察👀 <code>hello,world!</code>消息<a href="#观察-helloworld消息" class="hash-link" aria-label="Direct link to 观察-helloworld消息" title="Direct link to 观察-helloworld消息">​</a></h2><p>想要观察是否打印了<code>hello, world!</code>这个消息，我们可以通过运行<code>anchor test</code>。这个会记录📝program在测试执行的内容。</p><p><img loading="lazy" src="/assets/images/anchor-hello-msg-4272d7733e68cfc564e614cedf2600a4.png" width="2804" height="586" class="img_ev3q"></p><p>我们可以看到通过执行<code>anchor test</code>已经将我们打印的hello,world! 记录下来了。</p><p>来看下执行的这个测试脚本吧。这里是执行的程序的<code>initialize</code>执行的调用。我们在这个指令中添加了打印hello, world的代码。</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> anchor </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@coral-xyz/anchor"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Program </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@coral-xyz/anchor"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> Hello </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"../target/types/hello"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Configure the client to use the local cluster.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  anchor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setProvider</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">anchor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">AnchorProvider</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">env</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> program </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> anchor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">workspace</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Hello </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> Program</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">Hello</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">it</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Is initialized!"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Add your test here.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> tx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> program</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">methods</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">rpc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Your transaction signature"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>anchor.setProvider(anchor.AnchorProvider.env());</code> 这段代码是通过读取的Anchor.toml中的配置初始化了Anchor的provider。</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token table class-name">features</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">seeds</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">skip-lint</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token table class-name">programs.localnet</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">hello</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2HvxNpAdkkWitSQyDy9vMvJDpRsvtrhZ6JNqsXzGRi3i"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token table class-name">registry</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">url</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://api.apr.dev"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token table class-name">provider</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">cluster</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Localnet"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">wallet</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/Users/davirain/.config/solana/id.json"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token table class-name">scripts</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key property" style="color:#36acaa">test</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们可以看到这里的provider是localnet,wallet是自己本地的私钥路径。</p><p><code>const program = anchor.workspace.Hello as Program&lt;Hello&gt;;</code></p><p>这一步是我们初始化了一个solana 的program 实例，通过Hello这个IDL文件。</p><p>在测试中，使用<code>it</code>函数定义了一个测试用例，名称为"Is initialized!"。在这个测试用例中，调用了<code>program.methods.initialize().rpc()</code>方法，该方法是调用合约中的<code>initialize</code>方法，并通过RPC方式发送交易。然后，使用<code>console.log</code>打印出交易的签名。</p><p>这段代码的目的是测试<code>hello</code>程序是否能够成功初始化。通过调用<code>initialize</code>方法并打印交易签名，可以验证初始化过程是否成功。</p><p>这就是一个简单的<code>Anchor</code>合约的入门。</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="anchor" term="anchor"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ADA(派生账号) 和 PDA 使用]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/ada-and-pda</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/ada-and-pda"/>
        <updated>2023-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在solana的数据账号使用过程中，牵扯两种账号]]></summary>
        <content type="html"><![CDATA[<p>在solana的数据账号使用过程中，牵扯两种账号</p><ul><li>PDA (Program Derived Account)</li></ul><p>由 createProgramAddressSync 产生。
通常由特定程序（通常是一个智能合约）关联额外的账户。该账号没有私钥，故除程序本身外，无法完成数据签名，无法完成完整的数据交易。</p><ul><li>ADA (Account Derived Account)</li></ul><p>由 createWithSeed 方法产生。
有一个账号公钥派生出来的关联账户，数据签名权限属于主账号。也即，需要主账号的签名才能完成完整的数据交易。</p><p>solana中，根据数据签名，决定了数据的真实所有权。即 <code>我的数据我做主</code></p><p>本文主要分析这两种账号的异同。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="地址生成逻辑介绍如下">地址生成逻辑介绍如下<a href="#地址生成逻辑介绍如下" class="hash-link" aria-label="Direct link to 地址生成逻辑介绍如下" title="Direct link to 地址生成逻辑介绍如下">​</a></h2><ul><li>PDA 地址生成规则</li></ul><ol><li>buffer = <!-- -->[seed,programId,"ProgramDerivedAddress"]</li><li>对buffer 取 sha256</li><li>如果在曲线上，那么抛出error, 如果不在，那么直接返回作为 使用地址</li></ol><p><a href="https://github.com/solana-labs/solana-web3.js/blob/ae1056366cd75fea784e9146af511302d5a62845/packages/library-legacy/src/publickey.ts#L168" target="_blank" rel="noopener noreferrer">createProgramAddressSync</a></p><ul><li>ADA 生成</li></ul><ol><li>buffer=<!-- -->[fromPublicKey,seed,programId]</li><li>buffer 取 sha256, 直接返回</li></ol><p><a href="https://github.com/solana-labs/solana-web3.js/blob/ae1056366cd75fea784e9146af511302d5a62845/packages/library-legacy/src/publickey.ts#L150" target="_blank" rel="noopener noreferrer">createWithSeed</a></p><p>区别在于，数据的托管使用逻辑.</p><ul><li>ADA 数据签名权限，在于账户本身。即 我的数据我做主，未经允许(我未签名)不能修改。</li><li>PDA 数据签名权限在于合约。经过程序签名，可以修改 account 的数据和提取其中的sol。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ada-账号使用">ADA 账号使用<a href="#ada-账号使用" class="hash-link" aria-label="Direct link to ADA 账号使用" title="Direct link to ADA 账号使用">​</a></h2><p>数据操作，有配套的函数对应，内部包含 xxxxWithSeedParams 类型的参数，完成对应的操作。
操作数据，需要 主账户的签名，这一点决定了，账号的真实所有权。</p><ul><li>SystemProgram.createAccountWithSeed 初始化账号</li><li>SystemProgram.assign 重新分配owner</li><li>SystemProgram.allocate 分配空间</li><li>SystemProgram.transfer 转移SOL</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pda-账号使用">PDA 账号使用<a href="#pda-账号使用" class="hash-link" aria-label="Direct link to PDA 账号使用" title="Direct link to PDA 账号使用">​</a></h2><ul><li>客户端只用于账户地址推导，不能初始化。初始化过程在合约内部完成。</li><li>因其签名权限，必须在合约内部完成。他的操作权限完全属于智能合约。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ada-账号使用-example">ADA 账号使用 example<a href="#ada-账号使用-example" class="hash-link" aria-label="Direct link to ADA 账号使用 example" title="Direct link to ADA 账号使用 example">​</a></h2><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> seed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ada.creator"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化ada 账户</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> ada_account </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">PublicKey</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createWithSeed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    signer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    seed</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ada_account address: "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ada_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toBase58</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> ada_info </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getAccountInfo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ada_account</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 根据是否存在账号，决定是否初始化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ada_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ada_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ada account not found"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> transaction </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Transaction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">SystemProgram</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">createAccountWithSeed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        newAccountPubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ada_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fromPubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> signer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        basePubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> signer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        programId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> program</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        seed</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lamports</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">LAMPORTS_PER_SOL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        space</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pda-使用-example">PDA 使用 example<a href="#pda-使用-example" class="hash-link" aria-label="Direct link to PDA 使用 example" title="Direct link to PDA 使用 example">​</a></h2><p>客户端部分代码逻辑</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> pda_seed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pda.creator"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Model</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pda</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bump_seed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">PublicKey</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">findProgramAddressSync</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">signer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toBuffer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">TextEncoder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">movie</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">title</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"pda address : "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pda</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toBase58</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> instruction </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">TransactionInstruction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    keys</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 付钱的账户</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> signer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isSigner</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isWritable</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// PDA将存储数据</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pda</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isSigner</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isWritable</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 系统程序将用于创建PDA</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pubkey</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">SystemProgram</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">programId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isSigner</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        isWritable</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 传输数据 </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">serialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    programId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> program</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> transaction </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Transaction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">instruction</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> signature </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> web3</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">sendAndConfirmTransaction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    connection</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    transaction</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">signer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>合约部分代码逻辑</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 获取账户迭代器</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> account_info_iter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> accounts</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">iter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 获取账户</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> initializer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">next_account_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">account_info_iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> pda_account </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">next_account_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">account_info_iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> system_program </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">next_account_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">account_info_iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 构造PDA账户</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pda</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bump_seed</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Pubkey</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">find_program_address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">initializer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> program_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 和客户端比对</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> pda </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pda_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">msg!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Invalid seeds for PDA"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">ProgramError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">InvalidArgument</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 计算所需的租金</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> rent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Rent</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> rent_lamports </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rent</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">minimum_balance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">total_len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 创建账户</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">invoke_signed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token namespace" style="opacity:0.7">system_instruction</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">create_account</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        initializer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pda_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rent_lamports</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        total_len</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">try_into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">_</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">ConvertUsizeToU64Failed</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        program_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        initializer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pda_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        system_program</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">initializer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_ref</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> title</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bump_seed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// MovieAccountState 定义的state类型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> account_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">try_from_slice_unchecked</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">MovieAccountState</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pda_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">borrow</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">account_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">title </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> title</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">account_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rating </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rating</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">account_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">description </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> description</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">account_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">is_initialized </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 写入pda 数据本身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">account_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">serialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> pda_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">borrow_mut</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料">参考资料<a href="#参考资料" class="hash-link" aria-label="Direct link to 参考资料" title="Direct link to 参考资料">​</a></h2><ul><li><a href="https://solana.stackexchange.com/questions/1557/then-what-is-the-purpose-of-createwithseed-instruction?rq=1" target="_blank" rel="noopener noreferrer">https://solana.stackexchange.com/questions/1557/then-what-is-the-purpose-of-createwithseed-instruction?rq=1</a></li><li><a href="https://solanacookbook.com/references/accounts.html#how-to-create-accounts-with-seeds" target="_blank" rel="noopener noreferrer">https://solanacookbook.com/references/accounts.html#how-to-create-accounts-with-seeds</a></li></ul>]]></content>
        <author>
            <name>v1xingyue</name>
            <uri>https://github.com/v1xingyue</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="co-learn" term="co-learn"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用anchor build 依賴衝突]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/error-after-running-anchor-build</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/error-after-running-anchor-build"/>
        <updated>2023-08-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[報錯日志]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="報錯日志">報錯日志<a href="#報錯日志" class="hash-link" aria-label="Direct link to 報錯日志" title="Direct link to 報錯日志">​</a></h2><p>在使用solana-cli時候，鑑於一些依賴版本限制，會用到cli14.xx(主網版本)，而不是16.xx(測試網版本)</p><p>例如，在使用solana-cli版本爲<code>1.14.17</code>, anchor版本爲<code>0.26.0</code>的環境中, <code>anchor init</code>創建一個新項目後運行 <code>anchor build</code>會發生以下錯誤：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error: package constant_time_eq v0.3.0 cannot be built because it requires rustc </span><span class="token number" style="color:#36acaa">1.66</span><span class="token plain">.0 or newer, </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> the currently active rustc version is </span><span class="token number" style="color:#36acaa">1.62</span><span class="token plain">.0-dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="報錯原因">報錯原因<a href="#報錯原因" class="hash-link" aria-label="Direct link to 報錯原因" title="Direct link to 報錯原因">​</a></h2><p>使用的solana-cli版本在14.xxx， cli內自帶的rustc版本過老，無法編譯較新的依賴</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解決方案">解決方案<a href="#解決方案" class="hash-link" aria-label="Direct link to 解決方案" title="Direct link to 解決方案">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-升級solana-cli至最新版本">1. 升級solana-cli至最新版本<a href="#1-升級solana-cli至最新版本" class="hash-link" aria-label="Direct link to 1. 升級solana-cli至最新版本" title="Direct link to 1. 升級solana-cli至最新版本">​</a></h3><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">solana-install update</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2指定依賴包版本">2.指定依賴包版本<a href="#2指定依賴包版本" class="hash-link" aria-label="Direct link to 2.指定依賴包版本" title="Direct link to 2.指定依賴包版本">​</a></h3><p>需要在Cargo.toml文件下指定以下依賴版本</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">getrandom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0.2.9"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> features </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"custom"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">solana</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">program </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"=1.14.17"</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">winnow</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"=0.4.1"</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">toml_datetime</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"=0.6.1"</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">blake3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"=1.3.1"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>運行<code>cargo clean</code>後重新運行<code>anchor build</code>即可解決</p><h2></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="監聽程序log監聽到兩次">監聽程序log監聽到兩次<a href="#監聽程序log監聽到兩次" class="hash-link" aria-label="Direct link to 監聽程序log監聽到兩次" title="Direct link to 監聽程序log監聽到兩次">​</a></h2><p>在使用<code>program.addEventListener()</code>有可能聽到兩次相同的事件，其中一次的txSign會是“1111111111111111111111111111111111111111111111111111111111111111”， 這是因爲監聽到了模擬時的交易哈系，我們只需要在監聽到該交易哈系時拋棄即可</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">program</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"eventName"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">event</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> slot</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> signature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signature </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1111111111111111111111111111111111111111111111111111111111111111'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// do ur stuff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然而，有時websocket訂閱也會多次返回實際簽名。如果是這種情況，您可以使用一些緩存解決方案。例如，創建一個具有一定長度限制的集合，在此處添加簽名並檢查該集合中是否存在新簽名：</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> handledSignatures </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Set</span><span class="token class-name operator" style="color:#393A34">&lt;</span><span class="token class-name builtin">string</span><span class="token class-name operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> maxHandledSignaturesLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">program</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"eventName"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">event</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> slot</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> signature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signature </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1111111111111111111111111111111111111111111111111111111111111111'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">handledSignatures</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">has</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// do ur stuff</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    handledSignatures</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">handledSignatures</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxHandledSignaturesLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      handledSignatures</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">delete</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">handledSignatures</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">values</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>YanAemons</name>
            <uri>https://github.com/Manuel-yang</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="anchor" term="anchor"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[翻译 Solana 的状态压缩]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/solana-state-compression</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/solana-state-compression"/>
        <updated>2023-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在Solana上，状态压缩是一种创建离链数据的“指纹”（或哈希）并将该指纹存储在链上以进行安全验证的方法。有效地利用Solana账本的安全性来安全验证离链数据，以确保其未被篡改。]]></summary>
        <content type="html"><![CDATA[<p>在<code>Solana</code>上，状态压缩是一种创建离链数据的“指纹”（或哈希）并将该指纹存储在链上以进行安全验证的方法。有效地利用<code>Solana</code>账本的安全性来安全验证离链数据，以确保其未被篡改。</p><p>这种“压缩”方法使得Solana的程序和dApps能够使用廉价的区块链<a href="https://docs.solana.com/terminology#ledger" target="_blank" rel="noopener noreferrer">账本</a>空间来安全存储数据，而不是更昂贵的<a href="https://docs.solana.com/terminology#account" target="_blank" rel="noopener noreferrer">账户</a>空间。</p><p>这是通过使用一种特殊的二叉树结构，称为并发默克尔树，对每个数据片段（称为 <code>leaf</code> ）创建哈希，将它们哈希在一起，并仅将最终哈希存储在链上来实现的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是状态压缩">什么是状态压缩？<a href="#什么是状态压缩" class="hash-link" aria-label="Direct link to 什么是状态压缩？" title="Direct link to 什么是状态压缩？">​</a></h2><p>简单来说，状态压缩使用“树”结构将链外数据以确定性的方式进行加密哈希，计算出一个最终的哈希值，并将其存储在链上。</p><p>这些树是通过这个“确定性”过程创建的：</p><ul><li>获取任何数据</li><li>创建这些数据的哈希值</li><li>将此哈希值存储为树底部的 <code>leaf</code></li><li>每个 <code>leaf</code> 对都会被一起哈希，创建一个 <code>branch</code></li><li>每个 <code>branch</code> 然后一起哈希</li><li>不断攀爬树木并将相邻的树枝连接在一起</li><li>树顶上一旦到达，就会产生最后的 <code>root hash</code></li></ul><p>这个 <code>root hash</code> 然后存储在链上，作为每个叶子节点中所有数据的可验证证据。这样任何人都可以通过加密验证树中所有离链数据，而实际上只需在链上存储少量数据。因此，由于这种"状态压缩"，大大降低了存储/证明大量数据的成本。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="默克尔树和并发默克尔树">默克尔树和并发默克尔树<a href="#默克尔树和并发默克尔树" class="hash-link" aria-label="Direct link to 默克尔树和并发默克尔树" title="Direct link to 默克尔树和并发默克尔树">​</a></h2><p><code>Solana</code>的状态压缩使用了一种特殊类型的默克尔树，允许对任何给定的树进行多次更改，同时仍然保持树的完整性和有效性。</p><p>这棵特殊的树被称为“并发默克尔树”，有效地在链上保留了树的“更改日志”。允许在一个证明失效之前对同一棵树进行多次快速更改（即在同一个区块中）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="默克尔树是什么">默克尔树是什么？<a href="#默克尔树是什么" class="hash-link" aria-label="Direct link to 默克尔树是什么？" title="Direct link to 默克尔树是什么？">​</a></h3><p>默克尔树，有时也被称为“哈希树”，是一种基于哈希的二叉树结构，其中每个<code>leaf</code>节点都被表示为其内部数据的加密哈希。而每个非叶节点，也被称为“<code>branch</code>节点”，则被表示为其子叶节点哈希的哈希值。</p><p>每个分支也被哈希在一起，沿着树向上爬，直到最后只剩下一个哈希。这个最终的哈希，称为 <code>root hash</code> 或者"根"，可以与一个"证明路径"结合使用，来验证存储在叶节点中的任何数据。</p><p>一旦计算出最终的根哈希值(<code>root hash</code>)，可以通过重新计算特定叶子(<code>leaf</code>)节点的数据和每个相邻分支的哈希标签（称为“证明路径”）来验证存储在节点中的任何数据。将这个“重新哈希”与根哈希值进行比较，可以验证底层叶子数据的准确性。如果它们匹配，数据就被验证为准确的。如果它们不匹配，叶子数据已被更改。</p><p>只要需要，原始叶子数据可以通过对新的叶子数据进行哈希运算并重新计算根哈希值来进行更改，方法与原始根哈希值的计算方式相同。然后，这个新的根哈希值用于验证任何数据，并且有效地使之前的根哈希值和证明无效。因此，对这些传统的默克尔树的每一次更改都需要按顺序执行。</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>当使用默克尔树时，更改叶子数据并计算新的根哈希的过程可能是非常常见的事情！虽然这是树的设计要点之一，但它可能导致最显著的缺点之一：快速变化。</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="什么是并发默克尔树">什么是并发默克尔树？<a href="#什么是并发默克尔树" class="hash-link" aria-label="Direct link to 什么是并发默克尔树？" title="Direct link to 什么是并发默克尔树？">​</a></h3><p>在高吞吐量的应用中，比如在<a href="https://docs.solana.com/validator/runtime" target="_blank" rel="noopener noreferrer"><code>Solana</code>运行时</a>中，对于链上传统Merkle树的更改请求可能会相对快速地连续接收到验证者（例如在同一个槽中）。每个叶子数据的更改仍然需要按顺序执行。这导致每个后续的更改请求都会失败，因为根哈希和证明已经被同一槽中之前的更改请求无效化了。</p><p>进入，并发默克尔树。</p><p>并发默克尔树存储了最近更改的安全日志、它们的根哈希以及用于推导根哈希的证明。这个日志缓冲区存储在链上的每个树对应的特定账户中，最大记录数为（也称为 <code>maxBufferSize</code> ）。</p><p>当同一时隙内的验证者收到多个叶子数据变更请求时，链上并发 <code>Merkle</code> 树可以将这个“变更日志缓冲区”作为更可接受的证明的真实来源。有效地允许在同一时隙内对同一棵树进行多达 <code>maxBufferSize</code> 次变更。大幅提升吞吐量。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="并发默克尔树的大小调整">并发默克尔树的大小调整<a href="#并发默克尔树的大小调整" class="hash-link" aria-label="Direct link to 并发默克尔树的大小调整" title="Direct link to 并发默克尔树的大小调整">​</a></h2><p>创建这种链上树时，有三个值将决定您的树的大小、创建树的成本以及对树的并发更改数量：</p><ol><li><code>max depth</code> 最大深度</li><li><code>max buffer size</code> 最大缓冲区大小</li><li><code>canopy depth</code></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="max-depth">max depth<a href="#max-depth" class="hash-link" aria-label="Direct link to max depth" title="Direct link to max depth">​</a></h3><p>树的“最大深度”是从任何数据 <code>leaf</code> 到树的 <code>root</code> 所需的最大跳数。</p><p>由于默克尔树是二叉树，每个叶子节点只与另一个叶子节点相连；存在于一个 <code>leaf pair</code> 中。</p><p>因此，树的 <code>maxDepth</code> 被用来确定可以通过简单的计算存储在树中的最大节点数（也称为数据或 <code>leafs</code> ）</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nodes_count = 2 ^ maxDepth</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于树的深度必须在创建树时设置，您必须决定您希望树存储多少个数据。然后使用上述简单的计算，您可以确定存储数据的最低 <code>maxDepth</code> 。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例1铸造100个nfts">示例1：铸造100个NFTs<a href="#示例1铸造100个nfts" class="hash-link" aria-label="Direct link to 示例1：铸造100个NFTs" title="Direct link to 示例1：铸造100个NFTs">​</a></h4><p>如果你想创建一个用于存储<code>100</code>个压缩NFT的树，我们至少需要"<code>100</code>个叶子"或"<code>100</code>个节点"。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// maxDepth=6 -&gt; 64 nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2^6 = 64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// maxDepth=7 -&gt; 128 nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2^7 = 128</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>因此，我们需要一个最大深度为 <code>7</code> 的树，以存储 <code>100</code> 个数据。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="例子2铸造15000个nfts">例子2：铸造15000个NFTs<a href="#例子2铸造15000个nfts" class="hash-link" aria-label="Direct link to 例子2：铸造15000个NFTs" title="Direct link to 例子2：铸造15000个NFTs">​</a></h4><p>如果你想创建一个用于存储<code>15000</code>个压缩NFT的树，我们将需要至少"<code>15000</code>个叶子"或"<code>15000</code>个节点"。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// maxDepth=13 -&gt; 8192 nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2^13 = 8192</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// maxDepth=14 -&gt; 16384 nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2^14 = 16384</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>因此，我们需要一个最大深度为 <code>14</code> 的树，以存储 <code>15000</code> 个数据。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="最大深度越高成本越高">最大深度越高，成本越高<a href="#最大深度越高成本越高" class="hash-link" aria-label="Direct link to 最大深度越高，成本越高" title="Direct link to 最大深度越高，成本越高">​</a></h4><p>创建树时， <code>maxDepth</code> 值将是成本的主要驱动因素之一，因为您将在创建树时支付这笔成本。最大树深度越高，您可以存储的数据指纹（也称为哈希）越多，成本就越高。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="max-buffer-size">max buffer size<a href="#max-buffer-size" class="hash-link" aria-label="Direct link to max buffer size" title="Direct link to max buffer size">​</a></h3><p>“<code>max buffer size</code>” 实际上是树上可以发生的最大变化数量，同时仍然有效的 <code>root hash</code> 。</p><p>由于根哈希有效地是所有叶子数据的单一哈希，改变任何一个叶子将使得所有后续尝试改变常规树的叶子所需的证明无效。</p><p>但是使用并发树，对于这些证明来说，实际上有一个更新的日志。这个日志缓冲区的大小和设置是通过这个 <code>maxBufferSize</code> 值在树创建时完成的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="canopy-depth">Canopy depth<a href="#canopy-depth" class="hash-link" aria-label="Direct link to Canopy depth" title="Direct link to Canopy depth">​</a></h3><p>“<code>Canopy depth</code>”，有时也称为<code>Canopy</code>大小，是指在任何给定的证明路径上缓存/存储在链上的证明节点数量。</p><p>在对 <code>leaf</code> 执行更新操作时，例如转让所有权（例如出售压缩的<code>NFT</code>），必须使用完整的证明路径来验证叶子节点的原始所有权，从而允许进行更新操作。此验证是使用完整的证明路径来正确计算当前的 <code>root hash</code> （或通过链上的“并发缓冲区”缓存的任何 <code>root hash</code> ）来执行的。</p><p>树的最大深度越大，执行此验证所需的证明节点就越多。例如，如果您的最大深度是 <code>14</code> ，则需要使用 <code>14</code> 个总的证明节点进行验证。随着树的增大，完整的证明路径也会变得更长。</p><p>通常情况下，每个这些证明节点都需要在每个树更新事务中包含。由于每个证明节点的值在事务中占用 <code>32 bytes</code> （类似于提供公钥），较大的树很快就会超过最大事务大小限制。</p><p>进入<code>Canopy</code>。<code>Canopy</code>可以在链上存储一定数量的验证节点（对于任何给定的验证路径）。这样可以在每个更新交易中包含较少的验证节点，从而保持整体交易大小低于限制。</p><p>例如，深度为 <code>14</code> 的树需要 <code>14</code> 个总的验证节点。而有 <code>10</code> 个<code>Canopy</code>的情况下，每个更新事务只需要提交 <code>4</code> 个验证节点。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="canopy深度值越大成本越高"><code>Canopy</code>深度值越大，成本越高<a href="#canopy深度值越大成本越高" class="hash-link" aria-label="Direct link to canopy深度值越大成本越高" title="Direct link to canopy深度值越大成本越高">​</a></h4><p><code>canopyDepth</code> 值也是创建树时成本的主要因素，因为您将在树的创建时支付这个成本。<code>canopyDepth</code>越高，链上存储的数据证明节点越多，成本也越高。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="较小的canopy限制了可组合性">较小的<code>Canopy</code>限制了可组合性<a href="#较小的canopy限制了可组合性" class="hash-link" aria-label="Direct link to 较小的canopy限制了可组合性" title="Direct link to 较小的canopy限制了可组合性">​</a></h4><p>虽然树的创建成本随着<code>Canopy</code>的高度而增加，但较低的<code>Canopy</code>将需要在每个更新事务中包含更多的证明节点。所需提交的节点越多，事务的大小就越大，因此超过事务大小限制就越容易。</p><p>这也适用于任何其他试图与您的树/叶子进行交互的<code>Solana</code>程序或<code>dApp</code>。如果您的树需要太多的证明节点（因为<code>Canopy</code>深度较低），那么任何其他链上程序可能提供的额外操作都将受到其特定指令大小加上您的证明节点列表大小的限制。这限制了可组合性，并限制了您的特定树的潜在附加效用。</p><p>例如，如果您的树被用于压缩的非同质化代币（<code>NFTs</code>），并且<code>Canopy</code>深度非常低，一个<code>NFT</code>市场可能只能支持简单的<code>NFT</code>转移，而无法支持链上竞标系统。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建一棵树的成本">创建一棵树的成本<a href="#创建一棵树的成本" class="hash-link" aria-label="Direct link to 创建一棵树的成本" title="Direct link to 创建一棵树的成本">​</a></h2><p>创建并发 <code>Merkle</code> 树的成本基于树的大小参数： <code>maxDepth</code> ， <code>maxBufferSize</code> 和 <code>canopyDepth</code> 。这些值都用于计算在链上存在树所需的链上存储空间（以字节为单位）。</p><p>一旦计算出所需的空间（以字节为单位），并使用 <a href="https://docs.solana.com/api/http#getminimumbalanceforrentexemption" target="_blank" rel="noopener noreferrer"><code>getMinimumBalanceForRentExemption RPC</code></a>方法，请求在链上分配这些字节所需的费用（以<code>lamports</code>为单位）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="在javascript中计算树木成本">在JavaScript中计算树木成本<a href="#在javascript中计算树木成本" class="hash-link" aria-label="Direct link to 在JavaScript中计算树木成本" title="Direct link to 在JavaScript中计算树木成本">​</a></h3><p>在 <a href="https://www.npmjs.com/package/@solana/spl-account-compression" target="_blank" rel="noopener noreferrer"><code>@solana/spl-account-compression</code></a> 包中，开发人员可以使用 <code>getConcurrentMerkleTreeAccountSize</code> 函数来计算给定树大小参数所需的空间。</p><p>然后使用 <a href="https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getMinimumBalanceForRentExemption" target="_blank" rel="noopener noreferrer"><code>getMinimumBalanceForRentExemption</code></a> 函数来获取在链上分配所需空间的最终成本（以<code>lamports</code>计算）。</p><p>然后确定以<code>lamports</code>计算的成本，使得这个大小的账户免除租金，与其他账户创建类似。</p><div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// calculate the space required for the tree</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> requiredSpace </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getConcurrentMerkleTreeAccountSize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  maxDepth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  maxBufferSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  canopyDepth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// get the cost (in lamports) to store the tree on-chain</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> storageCost </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> connection</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getMinimumBalanceForRentExemption</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  requiredSpace</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="示例费用">示例费用<a href="#示例费用" class="hash-link" aria-label="Direct link to 示例费用" title="Direct link to 示例费用">​</a></h3><p>以下是几个不同树大小的示例成本，包括每个树可能的叶节点数量：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="例子-116384个节点成本为0222-sol">例子 #1：16,384个节点，成本为0.222 SOL<a href="#例子-116384个节点成本为0222-sol" class="hash-link" aria-label="Direct link to 例子 #1：16,384个节点，成本为0.222 SOL" title="Direct link to 例子 #1：16,384个节点，成本为0.222 SOL">​</a></h4><ul><li>最大深度为 <code>14</code> ，最大缓冲区大小为 <code>64</code></li><li>叶节点的最大数量： <code>16,384</code></li><li>创建 <code>0.222 SOL</code> 的<code>Canopy</code>深度大约需要 <code>0</code> 的成本</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="例子-216384个节点成本为1134-sol">例子 #2：16,384个节点，成本为1.134 SOL<a href="#例子-216384个节点成本为1134-sol" class="hash-link" aria-label="Direct link to 例子 #2：16,384个节点，成本为1.134 SOL" title="Direct link to 例子 #2：16,384个节点，成本为1.134 SOL">​</a></h4><ul><li>最大深度为 <code>14</code> ，最大缓冲区大小为 <code>64</code></li><li>叶节点的最大数量： <code>16,384</code></li><li>创建 <code>1.134 SOL</code> 的<code>Canopy</code>深度大约需要 <code>11</code> 的成本</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-31048576个节点成本为1673-sol">示例 #3：1,048,576个节点，成本为1.673 SOL<a href="#示例-31048576个节点成本为1673-sol" class="hash-link" aria-label="Direct link to 示例 #3：1,048,576个节点，成本为1.673 SOL" title="Direct link to 示例 #3：1,048,576个节点，成本为1.673 SOL">​</a></h4><ul><li>最大深度为 <code>20</code> ，最大缓冲区大小为 <code>256</code></li><li>叶节点的最大数量： <code>1,048,576</code></li><li>创建 <code>1.673 SOL</code> 的<code>Canopy</code>深度大约需要 <code>10</code> 的成本</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例41048576个节点成本为15814-sol">示例＃4：1,048,576个节点，成本为15.814 SOL<a href="#示例41048576个节点成本为15814-sol" class="hash-link" aria-label="Direct link to 示例＃4：1,048,576个节点，成本为15.814 SOL" title="Direct link to 示例＃4：1,048,576个节点，成本为15.814 SOL">​</a></h4><ul><li>最大深度为 <code>20</code> ，最大缓冲区大小为 <code>256</code></li><li>叶节点的最大数量： <code>1,048,576</code></li><li>创建 <code>15.814 SOL</code> 的<code>Canopy</code>深度大约需要 <code>15</code> 的成本</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="压缩的nfts">压缩的NFTs<a href="#压缩的nfts" class="hash-link" aria-label="Direct link to 压缩的NFTs" title="Direct link to 压缩的NFTs">​</a></h2><p>压缩的NFT是<code>Solana</code>上状态压缩的最受欢迎的应用之一。通过压缩，一个拥有一百万个<code>NFT</code>的收藏品可以以 <code>~50 SOL</code> 的价格铸造，而不是其未压缩的等价收藏品。</p><blockquote><p>  开发者指南：</p><p>阅读我们的开发者指南，了解<a href="https://docs.solana.com/developing/guides/compressed-nfts" target="_blank" rel="noopener noreferrer">如何铸造和转移压缩的NFT</a>。</p></blockquote>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="state-compression" term="state-compression"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solana共学教程]]></title>
        <id>https://www.all-in-one-blockchain.xyz/blog/first-blog-post</id>
        <link href="https://www.all-in-one-blockchain.xyz/blog/first-blog-post"/>
        <updated>2023-08-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[欢迎来到Solana共学，这是一个精心设计的教程系列，供任何对Solana感兴趣的人深入学习。无论你是初学者还是有经验的开发者，这些模块都会引导你了解Solana区块链开发的基本内容。]]></summary>
        <content type="html"><![CDATA[<p>欢迎来到Solana共学，这是一个精心设计的教程系列，供任何对Solana感兴趣的人深入学习。无论你是初学者还是有经验的开发者，这些模块都会引导你了解Solana区块链开发的基本内容。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="模块1solana基础">模块1：Solana基础<a href="#模块1solana基础" class="hash-link" aria-label="Direct link to 模块1：Solana基础" title="Direct link to 模块1：Solana基础">​</a></h2><ul><li>区块链基本概念介绍</li><li>本地程序开发环境配置<ul><li>原始Solana合约实现《hello, World》</li><li>Anchor合约框架实现《hello, World》</li><li>使用Solang编译器编译solidity合约实现《hello, World》</li></ul></li><li>BackPack钱包使用</li><li>客户端开发</li><li>钱包和前端</li><li>自定义指令</li><li>开始你自己的定制项目</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="模块2solana高级主题">模块2：Solana高级主题<a href="#模块2solana高级主题" class="hash-link" aria-label="Direct link to 模块2：Solana高级主题" title="Direct link to 模块2：Solana高级主题">​</a></h2><ul><li>SPL token</li><li>NFTs + 使用Metaplex进行铸造</li><li>在用户界面中展示NFTs</li><li>创造神奇的网络货币并出售JPEG图片</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="更深入的模块深入了解solana">更深入的模块：深入了解Solana<a href="#更深入的模块深入了解solana" class="hash-link" aria-label="Direct link to 更深入的模块：深入了解Solana" title="Direct link to 更深入的模块：深入了解Solana">​</a></h2><ul><li><strong>模块3</strong>：Rust入门，原生Solana开发，安全性，NFT质押</li><li><strong>模块4</strong>：本地环境，跨程序调用，测试，质押应用开发</li><li><strong>模块5</strong>：Anchor入门，全栈Anchor应用开发</li><li><strong>模块6</strong>：发布周，随机性，完善</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="特别主题超越基础">特别主题：超越基础<a href="#特别主题超越基础" class="hash-link" aria-label="Direct link to 特别主题：超越基础" title="Direct link to 特别主题：超越基础">​</a></h2><ul><li>Solana程序中的环境变量</li><li>Solana支付，版本化事务，Rust宏</li><li>Solana程序安全：签名授权，所有者检查，重新初始化攻击，PDA共享等</li><li>使用Solidity编写Solana合约</li><li>发行Token2020，压缩NFT</li><li>在Solana中使用The Graph，Oracles Pyth SDK</li><li>TipLink使用，如何在Quicknode和Helius申请RPC endpoint</li><li>等等...</li></ul><p>和我们一起，在这全面的指南中探索Solana的每一个方面。从最基本的内容到安全和合约开发的复杂方面，Solana共学为每一位Solana爱好者提供了内容。</p><p>敬请期待，如果有任何问题或需要进一步的协助，请随时与我们联系。欢迎来到Solana共学！</p>]]></content>
        <author>
            <name>Davirain</name>
            <uri>https://github.com/DaviRain-Su</uri>
        </author>
        <category label="blog" term="blog"/>
        <category label="blockchain" term="blockchain"/>
        <category label="solana" term="solana"/>
        <category label="co-learn" term="co-learn"/>
    </entry>
</feed>